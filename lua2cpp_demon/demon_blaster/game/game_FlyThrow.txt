#[acmd_script( agent = "demon_blaster", script = "game_flythrow" , category = ACMD_GAME , low_priority)]
unsafe fn game_flythrow (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	PostureModule::scale(fighter.module_accessor);
	if(0x3cfb70(-1037516665, 1.4)){;
		if is_excute(fighter) {
			ATTACK(fighter, 0, 0, Hash40::new("top"), 10.0, 55, 62, 0, 85, 6.0, 0.0, 0.0, 1.0, None, None, None, 0.3, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, 5, 0.0, 0, true, true, false, false, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_elec"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_ELEC, *ATTACK_REGION_ENERGY);
			ATTACK(fighter, 1, 0, Hash40::new("top"), 10.0, 55, 62, 0, 85, 6.0, 0.0, 0.0, 5.0, None, None, None, 0.3, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, 5, 0.0, 0, true, true, false, false, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_elec"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_ELEC, *ATTACK_REGION_ENERGY);
			ATK_SET_SHIELD_SETOFF_MUL(fighter, 0, 1.1);
			ATK_SET_SHIELD_SETOFF_MUL(fighter, 1, 1.1);
		}
		else{;
		PostureModule::scale(fighter.module_accessor);
		if(0x3cfb70(-1037516665, 0.5)){;
			if is_excute(fighter) {
				ATTACK(fighter, 0, 0, Hash40::new("top"), 10.0, 55, 62, 0, 85, 8.0, 0.0, 0.0, 1.0, None, None, None, 0.3, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, 5, 0.0, 0, true, true, false, false, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_elec"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_ELEC, *ATTACK_REGION_ENERGY);
				ATTACK(fighter, 1, 0, Hash40::new("top"), 10.0, 55, 62, 0, 85, 8.0, 0.0, 0.0, 5.0, None, None, None, 0.3, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, 5, 0.0, 0, true, true, false, false, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_elec"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_ELEC, *ATTACK_REGION_ENERGY);
				ATK_SET_SHIELD_SETOFF_MUL(fighter, 0, 1.1);
				ATK_SET_SHIELD_SETOFF_MUL(fighter, 1, 1.1);
			}
			else{;
			if is_excute(fighter) {
				ATTACK(fighter, 0, 0, Hash40::new("top"), 10.0, 55, 62, 0, 85, 6.0, 0.0, 0.0, 1.0, None, None, None, 0.3, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, 5, 0.0, 0, true, true, false, false, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_elec"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_ELEC, *ATTACK_REGION_ENERGY);
				ATTACK(fighter, 1, 0, Hash40::new("top"), 10.0, 55, 62, 0, 85, 6.0, 0.0, 0.0, 5.0, None, None, None, 0.3, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, 5, 0.0, 0, true, true, false, false, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_elec"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_ELEC, *ATTACK_REGION_ENERGY);
				ATK_SET_SHIELD_SETOFF_MUL(fighter, 0, 1.1);
				ATK_SET_SHIELD_SETOFF_MUL(fighter, 1, 1.1);
			}
		}
	}
}
}
frame(lua_state, 1.0);
if is_excute(fighter) {
AttackModule::clear(fighter.module_accessor, /*ID*/ 1);
}
}