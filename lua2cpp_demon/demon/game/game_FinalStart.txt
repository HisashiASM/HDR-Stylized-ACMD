#[acmd_script( agent = "demon", script = "game_finalstart" , category = ACMD_GAME , low_priority)]
unsafe fn game_finalstart (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	battle_object_module_accessor();
	methodlib::L2CValue::L2CValue(void*)();
	methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
	methodlib::L2CValue::as_pointer()const(true, 10);
	set_devil();
	frame(lua_state, 1.0);
	if is_excute(fighter) {
		SLOW_OPPONENT(fighter, 2.5, 5);
		FT_SET_FINAL_FEAR_FACE(fighter, 50);
		CHECK_VALID_FINAL_START_CAMERA(fighter, 0, 7, 20, 0, 0, 0);
		ATTACK(fighter, 0, 0, Hash40::new("top"), 0.0, 0, 0, 0, 60, 8.0, 0.0, 10.0, 8.0, Some(0.0), Some(10.0), Some(10.0), 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, true, Hash40::new("no"), 0.0, 1, false, false, true, true, true, *COLLISION_SITUATION_MASK_G, *COLLISION_CATEGORY_MASK_FIGHTER, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_NONE);
		ATTACK(fighter, 1, 0, Hash40::new("top"), 0.0, 366, 0, 0, 30, 10.0, 0.0, 10.0, 14.0, Some(0.0), Some(10.0), Some(14.0), 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, true, Hash40::new("no"), 0.0, 1, false, false, true, true, true, *COLLISION_SITUATION_MASK_G, *COLLISION_CATEGORY_MASK_FIGHTER, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_NONE);
		ATTACK(fighter, 2, 0, Hash40::new("top"), 0.0, 180, 0, 0, 60, 8.0, 0.0, 10.0, -8.0, Some(0.0), Some(10.0), Some(-10.0), 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, true, Hash40::new("no"), 0.0, 1, false, false, true, true, true, *COLLISION_SITUATION_MASK_G, *COLLISION_CATEGORY_MASK_FIGHTER, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_NONE);
		ATTACK(fighter, 3, 0, Hash40::new("top"), 0.0, 366, 0, 0, 30, 10.0, 0.0, 10.0, -14.0, Some(0.0), Some(10.0), Some(-14.0), 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, true, Hash40::new("no"), 0.0, 1, false, false, true, true, true, *COLLISION_SITUATION_MASK_G, *COLLISION_CATEGORY_MASK_FIGHTER, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_NONE);
		ATTACK(fighter, 4, 0, Hash40::new("top"), 0.0, 0, 0, 0, 60, 8.0, 0.0, 4.0, 10.0, Some(0.0), Some(18.0), Some(10.0), 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, true, Hash40::new("no"), 0.0, 1, false, false, true, true, true, *COLLISION_SITUATION_MASK_A, *COLLISION_CATEGORY_MASK_FIGHTER, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_NONE);
		ATTACK(fighter, 5, 0, Hash40::new("top"), 0.0, 366, 0, 0, 30, 11.0, 0.0, 4.0, 14.5, Some(0.0), Some(18.0), Some(14.5), 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, true, Hash40::new("no"), 0.0, 1, false, false, true, true, true, *COLLISION_SITUATION_MASK_A, *COLLISION_CATEGORY_MASK_FIGHTER, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_NONE);
		ATTACK(fighter, 6, 0, Hash40::new("top"), 0.0, 180, 0, 0, 60, 8.0, 0.0, 4.0, -10.0, Some(0.0), Some(18.0), Some(-10.0), 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, true, Hash40::new("no"), 0.0, 1, false, false, true, true, true, *COLLISION_SITUATION_MASK_A, *COLLISION_CATEGORY_MASK_FIGHTER, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_NONE);
		ATTACK(fighter, 7, 0, Hash40::new("top"), 0.0, 366, 0, 0, 30, 11.0, 0.0, 4.0, -14.5, Some(0.0), Some(18.0), Some(-14.5), 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, true, Hash40::new("no"), 0.0, 1, false, false, true, true, true, *COLLISION_SITUATION_MASK_A, *COLLISION_CATEGORY_MASK_FIGHTER, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_NONE);
	}
	frame(lua_state, 4.0);
	battle_object_module_accessor();
	methodlib::L2CValue::L2CValue(void*)();
	methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
	methodlib::L2CValue::as_pointer()const(true, 5);
	set_devil();
	frame(lua_state, 5.0);
	battle_object_module_accessor();
	methodlib::L2CValue::L2CValue(void*)();
	methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
	methodlib::L2CValue::as_pointer()const(true, 3);
	set_devil();
	if is_excute(fighter) {
		SLOW_OPPONENT(fighter, 30, 48);
	}
	WorkModule::is_flag(fighter.module_accessor, *FIGHTER_INSTANCE_WORK_ID_FLAG_DISABLE_FINAL_START_CAMERA);
	if(0x3cfb70(false, false)){;
		get_value_float(*SO_VAR_FLOAT_LR);
		if(0x3cfb70(1344, 0)){;
			if is_excute(fighter) {
				REQ_FINAL_START_CAMERA_arg3(Hash40::new("d04finalstart.nuanmb"), true, false);
			}
			else{;
			if is_excute(fighter) {
				PostureModule::scale(fighter.module_accessor, 10, 0);
				0x3cfb70(-1037516665, 2.5);
				CAM_ZOOM_IN_arg5(0, 0);
				camera(*MA_MSC_CMD_CAMERA_CAM_OFFSET, 0, 0);
			}
			else{;
			if is_excute(fighter) {
				REQ_FINAL_START_CAMERA_arg3(Hash40::new("d04finalstart.nuanmb"), true, false);
			}
			if is_excute(fighter) {
				FT_START_CUTIN(fighter);
			}
		}
	}
}
}
frame(lua_state, 26.0);
if is_excute(fighter) {
AttackModule::clear(fighter.module_accessor, /*ID*/ 0);
AttackModule::clear(fighter.module_accessor, /*ID*/ 2);
AttackModule::clear(fighter.module_accessor, /*ID*/ 4);
AttackModule::clear(fighter.module_accessor, /*ID*/ 6);
}
frame(lua_state, 27.0);
if is_excute(fighter) {
AttackModule::clear_all(fighter.module_accessor);
}
frame(lua_state, 30.0);
if is_excute(fighter) {
CAM_ZOOM_OUT(fighter);
camera(*MA_MSC_CMD_CAMERA_CAM_RECT, 150, 0, 0, 0);
}
frame(lua_state, 41.0);
if is_excute(fighter) {
SLOW_OPPONENT(fighter, 7, 22);
}
frame(lua_state, 50.0);
if is_excute(fighter) {
ATTACK(fighter, 0, 0, Hash40::new("top"), 8.0, 35, 100, 100, 0, 5.0, 0.0, 10.0, 12.0, Some(0.0), Some(10.0), Some(120.0), 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, true, Hash40::new("no"), 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_ELEC, *ATTACK_REGION_OBJECT);
ATTACK(fighter, 1, 0, Hash40::new("top"), 8.0, 35, 100, 100, 0, 9.0, 0.0, 10.0, 16.0, None, None, None, 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, true, Hash40::new("no"), 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_ELEC, *ATTACK_REGION_OBJECT);
AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
}
frame(lua_state, 53.0);
if is_excute(fighter) {
AttackModule::clear_all(fighter.module_accessor);
CAM_ZOOM_OUT(fighter);
}
frame(lua_state, 131.0);
battle_object_module_accessor();
methodlib::L2CValue::L2CValue(void*)();
methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
methodlib::L2CValue::as_pointer()const(true, 5);
set_devil();
frame(lua_state, 133.0);
battle_object_module_accessor();
methodlib::L2CValue::L2CValue(void*)();
methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
methodlib::L2CValue::as_pointer()const(true, 6);
set_devil();
frame(lua_state, 134.0);
battle_object_module_accessor();
methodlib::L2CValue::L2CValue(void*)();
methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
methodlib::L2CValue::as_pointer()const(true, 7);
set_devil();
frame(lua_state, 135.0);
battle_object_module_accessor();
methodlib::L2CValue::L2CValue(void*)();
methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
methodlib::L2CValue::as_pointer()const(false, 0);
set_devil();
}