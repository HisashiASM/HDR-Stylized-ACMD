#[acmd_script( agent = "demon", script = "game_attackragedrive" , category = ACMD_GAME , low_priority)]
unsafe fn game_attackragedrive (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	WorkModule::is_flag(fighter.module_accessor, *FIGHTER_DEMON_INSTANCE_WORK_ID_FLAG_ATTACK_RAGE_CAPTURE);
	if(0x3cfb70(false, false)){;
		battle_object_module_accessor();
		methodlib::L2CValue::L2CValue(void*)();
		methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
		methodlib::L2CValue::as_pointer()const(true, 10);
		set_devil();
		FT_MOTION_RATE(fighter, 0.7);
		if is_excute(fighter) {
			ATTACK_ABS(fighter, *FIGHTER_ATTACK_ABSOLUTE_KIND_CATCH, 0, 5.0, 70, 30, 0, 60, 0.0, 1.0, *ATTACK_LR_CHECK_F, 0.0, true, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_BODY);
		}
		frame(lua_state, 3.0);
		if is_excute(fighter) {
			damage(MSC=*MA_MSC_DAMAGE_DAMAGE_NO_REACTION, Type=*DAMAGE_NO_REACTION_MODE_ALWAYS, DamageThreshold=0);
		}
		frame(lua_state, 10.0);
		FT_MOTION_RATE(fighter, 1);
		frame(lua_state, 11.0);
		if is_excute(fighter) {
			GrabModule::set_rebound(fighter.module_accessor, /*CanCatchRebound*/ true);
		}
		frame(lua_state, 12.0);
		if is_excute(fighter) {
			CATCH(fighter, 0, Hash40::new("top"), 5.0, 0.0, 8.0, 5.0, *FIGHTER_STATUS_KIND_DEMON_DIVED, *COLLISION_SITUATION_MASK_G);
			CATCH(fighter, 1, Hash40::new("top"), 4.5, 0.0, 6.0, 8.5, *FIGHTER_STATUS_KIND_DEMON_DIVED, *COLLISION_SITUATION_MASK_G);
			CATCH(fighter, 2, Hash40::new("top"), 4.0, 0.0, 8.0, 5.0, *FIGHTER_STATUS_KIND_DEMON_DIVED, *COLLISION_SITUATION_MASK_A);
			CATCH(fighter, 3, Hash40::new("top"), 3.5, 0.0, 6.0, 8.5, *FIGHTER_STATUS_KIND_DEMON_DIVED, *COLLISION_SITUATION_MASK_A);
			GrabModule::set_constraint(fighter.module_accessor, 0, true);
			GrabModule::set_constraint(fighter.module_accessor, false, 1, true);
			GrabModule::set_constraint(fighter.module_accessor, false, 2, true);
			GrabModule::set_constraint(fighter.module_accessor, false, 3, true);
		}
		frame(false, 13);
		if is_excute(fighter) {
			damage(MSC=*MA_MSC_DAMAGE_DAMAGE_NO_REACTION, Type=*DAMAGE_NO_REACTION_MODE_NORMAL, DamageThreshold=0);
			CATCH(fighter, 0, Hash40::new("top"), 5.0, 0.0, 9.5, 5.0, *FIGHTER_STATUS_KIND_DEMON_DIVED, *COLLISION_SITUATION_MASK_G);
			CATCH(fighter, 1, Hash40::new("top"), 4.5, 0.0, 8.5, 12.0, *FIGHTER_STATUS_KIND_DEMON_DIVED, *COLLISION_SITUATION_MASK_G);
			CATCH(fighter, 2, Hash40::new("top"), 4.0, 0.0, 9.5, 5.0, *FIGHTER_STATUS_KIND_DEMON_DIVED, *COLLISION_SITUATION_MASK_A);
			CATCH(fighter, 3, Hash40::new("top"), 3.5, 0.0, 8.5, 12.0, *FIGHTER_STATUS_KIND_DEMON_DIVED, *COLLISION_SITUATION_MASK_A);
			GrabModule::set_constraint(fighter.module_accessor, 0, true);
			GrabModule::set_constraint(fighter.module_accessor, false, 1, true);
			GrabModule::set_constraint(fighter.module_accessor, false, 2, true);
			GrabModule::set_constraint(fighter.module_accessor, false, 3, true);
		}
		frame(false, 14);
		if is_excute(fighter) {
			CATCH(fighter, 0, Hash40::new("top"), 5.0, 0.0, 14.0, 5.0, Some(0.0), Some(9.5), Some(5.0), *FIGHTER_STATUS_KIND_DEMON_DIVED, *COLLISION_SITUATION_MASK_G);
			CATCH(fighter, 1, Hash40::new("top"), 4.5, 0.0, 19.0, 9.0, Some(0.0), Some(8.5), Some(12.0), *FIGHTER_STATUS_KIND_DEMON_DIVED, *COLLISION_SITUATION_MASK_G);
			CATCH(fighter, 2, Hash40::new("top"), 4.0, 0.0, 14.0, 5.0, Some(0.0), Some(9.5), Some(5.0), *FIGHTER_STATUS_KIND_DEMON_DIVED, *COLLISION_SITUATION_MASK_A);
			CATCH(fighter, 3, Hash40::new("top"), 3.5, 0.0, 21.0, 8.5, Some(0.0), Some(8.5), Some(12.0), *FIGHTER_STATUS_KIND_DEMON_DIVED, *COLLISION_SITUATION_MASK_A);
			GrabModule::set_constraint(fighter.module_accessor, 0, true);
			GrabModule::set_constraint(fighter.module_accessor, false, 1, true);
			GrabModule::set_constraint(fighter.module_accessor, false, 2, true);
			GrabModule::set_constraint(fighter.module_accessor, false, 3, true);
		}
		frame(false, 15);
		if is_excute(fighter) {
			CATCH(fighter, 0, Hash40::new("top"), 5.0, 0.0, 14.0, 5.0, Some(0.0), Some(9.5), Some(5.0), *FIGHTER_STATUS_KIND_DEMON_DIVED, *COLLISION_SITUATION_MASK_G);
			CATCH(fighter, 1, Hash40::new("top"), 4.5, 0.0, 22.0, 7.0, Some(0.0), Some(8.5), Some(10.0), *FIGHTER_STATUS_KIND_DEMON_DIVED, *COLLISION_SITUATION_MASK_G);
			CATCH(fighter, 2, Hash40::new("top"), 4.0, 0.0, 14.0, 5.0, Some(0.0), Some(9.5), Some(5.0), *FIGHTER_STATUS_KIND_DEMON_DIVED, *COLLISION_SITUATION_MASK_A);
			CATCH(fighter, 3, Hash40::new("top"), 3.5, 0.0, 24.0, 6.5, Some(0.0), Some(8.5), Some(10.0), *FIGHTER_STATUS_KIND_DEMON_DIVED, *COLLISION_SITUATION_MASK_A);
			GrabModule::set_constraint(fighter.module_accessor, 0, true);
			GrabModule::set_constraint(fighter.module_accessor, false, 1, true);
			GrabModule::set_constraint(fighter.module_accessor, false, 2, true);
			GrabModule::set_constraint(fighter.module_accessor, false, 3, true);
		}
		frame(false, 16);
		if is_excute(fighter) {
			grab(*MA_MSC_CMD_GRAB_CLEAR_ALL);
			GrabModule::set_rebound(fighter.module_accessor, /*CanCatchRebound*/ false);
		}
		frame(lua_state, 38.0);
		FT_MOTION_RATE(fighter, 1.3);
		frame(lua_state, 52.0);
		battle_object_module_accessor();
		methodlib::L2CValue::L2CValue(void*)();
		methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
		methodlib::L2CValue::as_pointer()const(false, 0);
		set_devil();
	}
	else{;
	battle_object_module_accessor(0);
	methodlib::L2CValue::L2CValue(void*)();
	methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
	methodlib::L2CValue::as_pointer()const(true, 10);
	set_devil();
	if is_excute(fighter) {
		ATTACK_ABS(fighter, *FIGHTER_ATTACK_ABSOLUTE_KIND_CATCH, 0, 5.0, 70, 30, 0, 60, 0.0, 1.0, *ATTACK_LR_CHECK_F, 0.0, true, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_BODY);
	}
	frame(lua_state, 4.0);
	if is_excute(fighter) {
		damage(MSC=*MA_MSC_DAMAGE_DAMAGE_NO_REACTION, Type=*DAMAGE_NO_REACTION_MODE_ALWAYS, DamageThreshold=0);
	}
	frame(lua_state, 12.0);
	if is_excute(fighter) {
		GrabModule::set_rebound(fighter.module_accessor, /*CanCatchRebound*/ true);
	}
	frame(lua_state, 13.0);
	if is_excute(fighter) {
		damage(MSC=*MA_MSC_DAMAGE_DAMAGE_NO_REACTION, Type=*DAMAGE_NO_REACTION_MODE_NORMAL, DamageThreshold=0);
		CATCH(fighter, 0, Hash40::new("top"), 5.0, 0.0, 9.5, 5.0, *FIGHTER_STATUS_KIND_DEMON_DIVED, *COLLISION_SITUATION_MASK_G);
		CATCH(fighter, 1, Hash40::new("top"), 4.5, 0.0, 8.5, 12.0, *FIGHTER_STATUS_KIND_DEMON_DIVED, *COLLISION_SITUATION_MASK_G);
		CATCH(fighter, 2, Hash40::new("top"), 4.0, 0.0, 9.5, 5.0, *FIGHTER_STATUS_KIND_DEMON_DIVED, *COLLISION_SITUATION_MASK_A);
		CATCH(fighter, 3, Hash40::new("top"), 3.5, 0.0, 8.5, 12.0, *FIGHTER_STATUS_KIND_DEMON_DIVED, *COLLISION_SITUATION_MASK_A);
		GrabModule::set_constraint(fighter.module_accessor, 0, true);
		GrabModule::set_constraint(fighter.module_accessor, false, 1, true);
		GrabModule::set_constraint(fighter.module_accessor, false, 2, true);
		GrabModule::set_constraint(fighter.module_accessor, false, 3, true);
	}
	frame(false, 14);
	if is_excute(fighter) {
		CATCH(fighter, 0, Hash40::new("top"), 5.0, 0.0, 14.0, 5.0, Some(0.0), Some(9.5), Some(5.0), *FIGHTER_STATUS_KIND_DEMON_DIVED, *COLLISION_SITUATION_MASK_G);
		CATCH(fighter, 1, Hash40::new("top"), 4.5, 0.0, 19.0, 9.0, Some(0.0), Some(8.5), Some(12.0), *FIGHTER_STATUS_KIND_DEMON_DIVED, *COLLISION_SITUATION_MASK_G);
		CATCH(fighter, 2, Hash40::new("top"), 4.0, 0.0, 14.0, 5.0, Some(0.0), Some(9.5), Some(5.0), *FIGHTER_STATUS_KIND_DEMON_DIVED, *COLLISION_SITUATION_MASK_A);
		CATCH(fighter, 3, Hash40::new("top"), 3.5, 0.0, 21.0, 8.5, Some(0.0), Some(8.5), Some(12.0), *FIGHTER_STATUS_KIND_DEMON_DIVED, *COLLISION_SITUATION_MASK_A);
		GrabModule::set_constraint(fighter.module_accessor, 0, true);
		GrabModule::set_constraint(fighter.module_accessor, false, 1, true);
		GrabModule::set_constraint(fighter.module_accessor, false, 2, true);
		GrabModule::set_constraint(fighter.module_accessor, false, 3, true);
	}
	frame(false, 15);
	if is_excute(fighter) {
		grab(*MA_MSC_CMD_GRAB_CLEAR_ALL);
		GrabModule::set_rebound(fighter.module_accessor, /*CanCatchRebound*/ false);
	}
	frame(lua_state, 38.0);
	FT_MOTION_RATE(fighter, 1.3);
	frame(lua_state, 52.0);
	battle_object_module_accessor();
	methodlib::L2CValue::L2CValue(void*)();
	methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
	methodlib::L2CValue::as_pointer()const(false, 0);
	set_devil();
}
}