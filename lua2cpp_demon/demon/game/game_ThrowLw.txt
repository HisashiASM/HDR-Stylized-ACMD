#[acmd_script( agent = "demon", script = "game_throwlw" , category = ACMD_GAME , low_priority)]
unsafe fn game_throwlw (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	is_vr_mode();
	if(0x3cfb70(false, false)){;
		battle_object_module_accessor();
		methodlib::L2CValue::L2CValue(void*)();
	}
	else{;
	methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
	methodlib::L2CValue::as_pointer()const();
	is_one_on_one_including_thrown();
	if(0x3cfb70(false, true)){;
		if is_excute(fighter) {
			battle_object_module_accessor();
			methodlib::L2CValue::L2CValue(void*)();
		}
		else{;
		methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
	}
	methodlib::L2CValue::as_pointer()const();
	check_disabled_motion_camera_of_scale();
	battle_object_module_accessor();
	methodlib::L2CValue::L2CValue(void*)();
}
else{;
methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
}
}
methodlib::L2CValue::as_pointer()const();
check_disabled_motion_camera_of_stage();
WorkModule::is_flag(fighter.module_accessor, *FIGHTER_DEMON_INSTANCE_WORK_ID_FLAG_ENABLE_THROW_MOTION_CAMERA);
if(0x3cfb70(false, true)){;
if is_excute(fighter) {
CHECK_VALID_START_CAMERA(fighter, 0, 0, 0, 0, 0, 0, false);
}
}
WorkModule::is_flag(fighter.module_accessor, *FIGHTER_DEMON_INSTANCE_WORK_ID_FLAG_DISABLE_THROW_MOTION_CAMERA);
if(0x3cfb70(false, false)){;
WorkModule::is_flag(fighter.module_accessor, *FIGHTER_INSTANCE_WORK_ID_FLAG_DISABLE_FINAL_START_CAMERA);
if(0x3cfb70(false, false)){;
if is_excute(fighter) {
	REQ_MOTION_CAMERA(fighter, Hash40::new("e01throwlw.nuanmb"), false);
}
}
}
if is_excute(fighter) {
PostureModule::scale(fighter.module_accessor, 7, 0);
0x3cfb70(-1037516665, 1.5);
CAM_ZOOM_IN_arg5(0, 0);
}
if is_excute(fighter) {
ATTACK_ABS(fighter, *FIGHTER_ATTACK_ABSOLUTE_KIND_THROW, 0, 1.0, 72, 100, 0, 53, 0.0, 1.0, *ATTACK_LR_CHECK_F, 0.0, true, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_THROW);
ATTACK_ABS(fighter, *FIGHTER_ATTACK_ABSOLUTE_KIND_CATCH, 0, 3.0, 361, 100, 0, 40, 0.0, 1.0, *ATTACK_LR_CHECK_F, 0.0, true, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_THROW);
}
frame(lua_state, 34.0);
if is_excute(fighter) {
ATTACK(fighter, 0, 0, Hash40::new("top"), 7.0, 50, 65, 0, 50, 6.0, 0.0, 12.0, 7.0, None, None, None, 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, COLLISION_SOUND_ATTR_DEMON_PUNCH02, *ATTACK_REGION_HEAD);
AttackModule::set_catch_only_all(fighter.module_accessor, true, false);
CHECK_FINISH_CAMERA(fighter, 9, 4);
}
frame(lua_state, 35.0);
if is_excute(fighter) {
AttackModule::clear_all(fighter.module_accessor);
ATK_HIT_ABS(fighter, *FIGHTER_ATTACK_ABSOLUTE_KIND_THROW, Hash40::new("throw"), *FIGHTER_STATUS_THROW_WORK_INT_TARGET_OBJECT, *FIGHTER_STATUS_THROW_WORK_INT_TARGET_HIT_GROUP, *FIGHTER_STATUS_THROW_WORK_INT_TARGET_HIT_NO);
CAM_ZOOM_OUT(fighter);
}
}