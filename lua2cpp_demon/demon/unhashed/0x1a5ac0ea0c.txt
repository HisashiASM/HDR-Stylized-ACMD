#[acmd_script( agent = "demon", script = "0x1a5ac0ea0c" , category = ACMD_UNHASHED , low_priority)]
unsafe fn 0x1a5ac0ea0c (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	battle_object_module_accessor();
	methodlib::L2CValue::L2CValue(void*)();
	methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
	methodlib::L2CValue::as_pointer()const(true, 5);
	set_devil();
	if is_excute(fighter) {
		WHOLE_HIT(fighter, *HIT_STATUS_INVINCIBLE);
	}
	is_vr_mode();
	if(0x3cfb70(false, false)){;
		battle_object_module_accessor();
		methodlib::L2CValue::L2CValue(void*)();
	}
	else{;
	methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
}
methodlib::L2CValue::as_pointer()const();
is_one_on_one_including_thrown();
if(0x3cfb70(false, true)){;
	if is_excute(fighter) {
		battle_object_module_accessor();
		methodlib::L2CValue::L2CValue(void*)();
	}
	else{;
	methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
}
}
methodlib::L2CValue::as_pointer()const();
check_disabled_motion_camera_of_scale();
battle_object_module_accessor();
methodlib::L2CValue::L2CValue(void*)();
methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
methodlib::L2CValue::as_pointer()const();
check_disabled_motion_camera_of_stage();
WorkModule::is_flag(fighter.module_accessor, *FIGHTER_DEMON_INSTANCE_WORK_ID_FLAG_ENABLE_THROW_MOTION_CAMERA);
if(0x3cfb70(false, true)){;
WorkModule::is_flag(fighter.module_accessor, *FIGHTER_DEMON_STATUS_SPECIAL_LW_FLAG_ENABLE_MOTION_CAMERA);
if(0x3cfb70(false, true)){;
	WorkModule::is_flag(fighter.module_accessor, *FIGHTER_DEMON_INSTANCE_WORK_ID_FLAG_DISABLE_THROW_MOTION_CAMERA);
	if(0x3cfb70(false, false)){;
		if is_excute(fighter) {
			REQ_MOTION_CAMERA(fighter, 0x1857a8bd1d, false);
		}
	}
}
}
if is_excute(fighter) {
ATTACK_ABS(fighter, *FIGHTER_ATTACK_ABSOLUTE_KIND_CATCH, 0, 5.0, 70, 30, 0, 60, 0.0, 1.0, *ATTACK_LR_CHECK_F, 0.0, true, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_BODY);
}
frame(lua_state, 3.0);
battle_object_module_accessor();
methodlib::L2CValue::L2CValue(void*)();
methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
methodlib::L2CValue::as_pointer()const(true, 3);
set_devil();
frame(lua_state, 30.0);
if is_excute(fighter) {
WorkModule::set_int(fighter.module_accessor, *HIT_STATUS_INVINCIBLE, *FIGHTER_DEMON_STATUS_ATTACK_RAGE_DRIVE_INT_TARGET_HIT_STATUS);
WorkModule::on_flag(fighter.module_accessor, /*Flag*/ *FIGHTER_DEMON_STATUS_SPECIAL_LW_FLAG_CHECK_DAMAGE);
}
}