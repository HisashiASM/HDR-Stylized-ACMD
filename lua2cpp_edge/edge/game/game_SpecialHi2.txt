#[acmd_script( agent = "edge", script = "game_specialhi2" , category = ACMD_GAME , low_priority)]
unsafe fn game_specialhi2 (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	if is_excute(fighter) {
		notify_event_msc_cmd(0x2127e37c07, *GROUND_CLIFF_CHECK_KIND_NONE);
		battle_object_module_accessor();
		methodlib::L2CValue::L2CValue(void*)();
	}
	else{;
	methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
}
methodlib::L2CValue::as_pointer()const();
set_special_hi_jostle_area();
frame(lua_state, 2.0);
if is_excute(fighter) {
	ATTACK(fighter, 0, 0, Hash40::new("rot"), 2.3, 361, 100, 0, 0, 8.0, 0.0, 2.5, 1.0, Some(0.0), Some(-2.5), Some(1.0), 1.0, 0.5, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, -1, -1.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FIGHTER, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_CUTUP, *ATTACK_REGION_SWORD);
	ATTACK(fighter, 1, 0, Hash40::new("rot"), 2.3, 368, 100, 0, 0, 8.0, 0.0, 2.5, 1.0, Some(0.0), Some(-2.5), Some(1.0), 1.0, 0.5, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, -1, -1.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_A, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_CUTUP, *ATTACK_REGION_SWORD);
	ATTACK(fighter, 2, 0, Hash40::new("rot"), 2.3, 368, 100, 0, 0, 6.5, 0.0, 3.0, 10.0, Some(0.0), Some(-3.0), Some(10.0), 1.0, 0.5, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, -1, -1.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_A, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_CUTUP, *ATTACK_REGION_SWORD);
	ATTACK(fighter, 3, 0, Hash40::new("rot"), 2.3, 368, 100, 0, 0, 6.5, 0.0, 3.0, 20.5, Some(0.0), Some(-3.0), Some(20.5), 1.0, 0.5, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, -1, -1.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_A, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_CUTUP, *ATTACK_REGION_SWORD);
	ATTACK(fighter, 4, 0, Hash40::new("rot"), 2.3, 368, 100, 0, 0, 8.0, 0.0, 2.5, 1.0, Some(0.0), Some(-2.5), Some(1.0), 1.0, 0.5, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, -1, -1.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_G, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_CUTUP, *ATTACK_REGION_SWORD);
	ATTACK(fighter, 5, 0, Hash40::new("rot"), 2.3, 368, 100, 0, 0, 6.5, 0.0, 3.0, 10.0, Some(0.0), Some(-3.0), Some(10.0), 1.0, 0.5, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, -1, -1.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_G, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_CUTUP, *ATTACK_REGION_SWORD);
	ATTACK(fighter, 6, 0, Hash40::new("rot"), 2.3, 368, 100, 0, 0, 6.5, 0.0, 3.0, 20.5, Some(0.0), Some(-3.0), Some(20.5), 1.0, 0.5, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, -1, -1.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_G, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_CUTUP, *ATTACK_REGION_SWORD);
	battle_object_module_accessor();
	methodlib::L2CValue::L2CValue(void*)();
}
else{;
methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
}
methodlib::L2CValue::as_pointer()const(1, Hash40::new("rot"), 30, -5, 3);
methodlib::L2CValue::as_hash()const();
set_vec_target_pos();
battle_object_module_accessor();
methodlib::L2CValue::L2CValue(void*)();
methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
methodlib::L2CValue::as_pointer()const(2, Hash40::new("rot"), 26, -5, 2);
methodlib::L2CValue::as_hash()const();
set_vec_target_pos();
battle_object_module_accessor();
methodlib::L2CValue::L2CValue(void*)();
methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
methodlib::L2CValue::as_pointer()const(3, Hash40::new("rot"), 20, -5, 2);
methodlib::L2CValue::as_hash()const();
set_vec_target_pos();
battle_object_module_accessor();
methodlib::L2CValue::L2CValue(void*)();
methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
methodlib::L2CValue::as_pointer()const(4, Hash40::new("rot"), 5, 1, 4);
methodlib::L2CValue::as_hash()const();
set_vec_target_pos();
battle_object_module_accessor();
methodlib::L2CValue::L2CValue(void*)();
methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
methodlib::L2CValue::as_pointer()const(5, Hash40::new("rot"), 15, 1, 4);
methodlib::L2CValue::as_hash()const();
set_vec_target_pos();
battle_object_module_accessor();
methodlib::L2CValue::L2CValue(void*)();
methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
methodlib::L2CValue::as_pointer()const(6, Hash40::new("rot"), 20, 1, 4);
methodlib::L2CValue::as_hash()const();
set_vec_target_pos();
AttackModule::set_no_finish_camera_ex(fighter.module_accessor, 1, true, false);
AttackModule::set_no_finish_camera_ex(fighter.module_accessor, 2, true, false);
AttackModule::set_no_finish_camera_ex(fighter.module_accessor, 3, true, false);
AttackModule::set_no_finish_camera_ex(fighter.module_accessor, 4, true, false);
AttackModule::set_no_finish_camera_ex(fighter.module_accessor, 5, true, false);
AttackModule::set_no_finish_camera_ex(fighter.module_accessor, 6, true, false);
wait(lua_state, 1.0);
if is_excute(fighter) {
AttackModule::clear_all(fighter.module_accessor);
}
frame(lua_state, 4.0);
for(6 Iterations){;
if is_excute(fighter) {
ATTACK(fighter, 0, 0, Hash40::new("rot"), 2.3, 368, 100, 0, 0, 5.0, 0.0, 2.5, 0.0, Some(0.0), Some(-2.5), Some(0.0), 1.0, 0.5, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, -1, -1.0, 2, false, false, false, false, true, *COLLISION_SITUATION_MASK_A, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_CUTUP, *ATTACK_REGION_SWORD);
ATTACK(fighter, 1, 0, Hash40::new("rot"), 2.3, 368, 100, 0, 0, 5.0, 0.0, 3.0, 10.0, Some(0.0), Some(-3.0), Some(10.0), 1.0, 0.5, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, -1, -1.0, 2, false, false, false, false, true, *COLLISION_SITUATION_MASK_A, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_CUTUP, *ATTACK_REGION_SWORD);
ATTACK(fighter, 2, 0, Hash40::new("rot"), 2.3, 368, 100, 0, 0, 6.5, 0.0, 3.0, 20.5, Some(0.0), Some(-3.0), Some(20.5), 1.0, 0.5, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, -1, -1.0, 2, false, false, false, false, true, *COLLISION_SITUATION_MASK_A, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_CUTUP, *ATTACK_REGION_SWORD);
ATTACK(fighter, 3, 0, Hash40::new("rot"), 2.3, 368, 100, 0, 0, 5.0, 0.0, 2.5, 0.0, Some(0.0), Some(-2.5), Some(0.0), 1.0, 0.5, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, -1, -1.0, 2, false, false, false, false, true, *COLLISION_SITUATION_MASK_G, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_CUTUP, *ATTACK_REGION_SWORD);
ATTACK(fighter, 4, 0, Hash40::new("rot"), 2.3, 368, 100, 0, 0, 5.0, 0.0, 3.0, 10.0, Some(0.0), Some(-3.0), Some(10.0), 1.0, 0.5, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, -1, -1.0, 2, false, false, false, false, true, *COLLISION_SITUATION_MASK_G, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_CUTUP, *ATTACK_REGION_SWORD);
ATTACK(fighter, 5, 0, Hash40::new("rot"), 2.3, 368, 100, 0, 0, 6.5, 0.0, 3.0, 20.5, Some(0.0), Some(-3.0), Some(20.5), 1.0, 0.5, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, -1, -1.0, 2, false, false, false, false, true, *COLLISION_SITUATION_MASK_G, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_CUTUP, *ATTACK_REGION_SWORD);
ATTACK(fighter, 6, 0, Hash40::new("rot"), 2.3, 60, 60, 0, 90, 6.5, 0.0, 3.0, 0.0, Some(0.0), Some(-3.0), Some(0.0), 0.5, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_B, false, -1, -1.0, 2, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_CUTUP, *ATTACK_REGION_SWORD);
ATTACK(fighter, 7, 0, Hash40::new("rot"), 2.3, 60, 60, 0, 90, 6.5, 0.0, 3.0, 10.0, Some(0.0), Some(-3.0), Some(10.0), 0.5, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_B, false, -1, -1.0, 2, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_CUTUP, *ATTACK_REGION_SWORD);
battle_object_module_accessor();
methodlib::L2CValue::L2CValue(void*)();
}
else{;
methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
}
methodlib::L2CValue::as_pointer()const(0, Hash40::new("rot"), 30, 100, 368);
methodlib::L2CValue::as_hash()const();
set_vec_target_pos();
battle_object_module_accessor();
methodlib::L2CValue::L2CValue(void*)();
methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
methodlib::L2CValue::as_pointer()const(1, Hash40::new("rot"), 26, -5, 2);
methodlib::L2CValue::as_hash()const();
set_vec_target_pos();
battle_object_module_accessor();
methodlib::L2CValue::L2CValue(void*)();
methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
methodlib::L2CValue::as_pointer()const(2, Hash40::new("rot"), 20, -5, 2);
methodlib::L2CValue::as_hash()const();
set_vec_target_pos();
battle_object_module_accessor();
methodlib::L2CValue::L2CValue(void*)();
methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
methodlib::L2CValue::as_pointer()const(3, Hash40::new("rot"), 5, 1, 4);
methodlib::L2CValue::as_hash()const();
set_vec_target_pos();
battle_object_module_accessor();
methodlib::L2CValue::L2CValue(void*)();
methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
methodlib::L2CValue::as_pointer()const(4, Hash40::new("rot"), 15, 1, 4);
methodlib::L2CValue::as_hash()const();
set_vec_target_pos();
battle_object_module_accessor();
methodlib::L2CValue::L2CValue(void*)();
methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
methodlib::L2CValue::as_pointer()const(5, Hash40::new("rot"), 20, 1, 4);
methodlib::L2CValue::as_hash()const();
set_vec_target_pos();
AttackModule::set_no_finish_camera_ex(fighter.module_accessor, 0, true, false);
AttackModule::set_no_finish_camera_ex(fighter.module_accessor, 1, true, false);
AttackModule::set_no_finish_camera_ex(fighter.module_accessor, 2, true, false);
AttackModule::set_no_finish_camera_ex(fighter.module_accessor, 3, true, false);
AttackModule::set_no_finish_camera_ex(fighter.module_accessor, 4, true, false);
AttackModule::set_no_finish_camera_ex(fighter.module_accessor, 5, true, false);
AttackModule::set_no_finish_camera(fighter.module_accessor, 6, true, false);
AttackModule::set_no_finish_camera(fighter.module_accessor, 7, true, false);
wait(lua_state, 1.0);
if is_excute(fighter) {
AttackModule::clear_all(fighter.module_accessor);
}
wait(lua_state, 1.0);
}
frame(lua_state, 14.0);
if is_excute(fighter) {
battle_object_module_accessor();
methodlib::L2CValue::L2CValue(void*)();
}
else{;
methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
}
methodlib::L2CValue::as_pointer()const();
clear_special_hi_jostle_area();
}