#[acmd_script( agent = "plizardon", script = "expression_attackhi4" , category = ACMD_EXPRESSION , low_priority)]
unsafe fn expression_attackhi4 (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	if is_excute(fighter) {
		slope(*MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_LR);
	}
	frame(lua_state, 3.0);
	execute(3);
	if is_excute(fighter) {
		slope(*MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_LR);
	}
	frame(lua_state, 6.0);
	if is_excute(fighter) {
		RUMBLE_HIT(fighter, Hash40::new("rbkind_attackm"), 0);
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohitm"), 6, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 7.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("wingl7"), *ATTACK_DIRECTION_Z_MINUS, *ATTACK_DIRECTION_X_MINUS, *ATTACK_DIRECTION_Y);
		AttackModule::set_attack_reference_joint_id(fighter.module_accessor);
	}
	frame(lua_state, 8.0);
	if is_excute(fighter) {
		slope(*MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_R);
	}
	frame(lua_state, 15.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("wingr7"), *ATTACK_DIRECTION_X_MINUS, *ATTACK_DIRECTION_Z, *ATTACK_DIRECTION_Y);
		AttackModule::set_attack_reference_joint_id(fighter.module_accessor);
	}
	frame(lua_state, 16.0);
	if is_excute(fighter) {
		RUMBLE_HIT(fighter, Hash40::new("rbkind_attackl"), 0);
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohitl"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 17.0);
	if is_excute(fighter) {
		slope(*MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_L);
	}
	frame(lua_state, 18.0);
	if is_excute(fighter) {
		QUAKE(fighter, *CAMERA_QUAKE_KIND_S);
	}
	frame(lua_state, 40.0);
	if is_excute(fighter) {
		slope(*MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_LR);
	}
}