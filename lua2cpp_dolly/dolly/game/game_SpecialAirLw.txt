#[acmd_script( agent = "dolly", script = "game_specialairlw" , category = ACMD_GAME , low_priority)]
unsafe fn game_specialairlw (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	frame(lua_state, 0.0);
	if(0x2508e0(*FIGHTER_DOLLY_STATUS_SPECIAL_COMMON_WORK_INT_STRENGTH, *FIGHTER_DOLLY_STRENGTH_W)){;
		if is_excute(fighter) {
			WorkModule::on_flag(fighter.module_accessor, /*Flag*/ *FIGHTER_INSTANCE_WORK_ID_FLAG_NO_SPEED_OPERATION_CHK);
			KineticModule::add_speed(fighter.module_accessor, 0.3, -1, 0.0);
			WorkModule::off_flag(fighter.module_accessor, /*Flag*/ *FIGHTER_INSTANCE_WORK_ID_FLAG_NO_SPEED_OPERATION_CHK);
		}
		else{;
		if is_excute(fighter) {
			WorkModule::on_flag(fighter.module_accessor, /*Flag*/ *FIGHTER_INSTANCE_WORK_ID_FLAG_NO_SPEED_OPERATION_CHK);
			KineticModule::add_speed(fighter.module_accessor, 1.3, -1.5, 0.0);
			WorkModule::off_flag(fighter.module_accessor, /*Flag*/ *FIGHTER_INSTANCE_WORK_ID_FLAG_NO_SPEED_OPERATION_CHK);
		}
	}
}
frame(lua_state, 1.0);
if(0x2508e0(*FIGHTER_DOLLY_STATUS_SPECIAL_COMMON_WORK_INT_STRENGTH, *FIGHTER_DOLLY_STRENGTH_W)){;
	if is_excute(fighter) {
		KineticModule::add_speed(fighter.module_accessor, 0, -0.3, 0.0);
	}
	else{;
	if is_excute(fighter) {
		KineticModule::add_speed(fighter.module_accessor, 0, -1, 0.0);
	}
}
}
frame(lua_state, 2.0);
if(0x2508e0(*FIGHTER_DOLLY_STATUS_SPECIAL_COMMON_WORK_INT_STRENGTH, *FIGHTER_DOLLY_STRENGTH_W)){;
if is_excute(fighter) {
	KineticModule::add_speed(fighter.module_accessor, 0, 0, 0.0);
}
else{;
if is_excute(fighter) {
	KineticModule::add_speed(fighter.module_accessor, 0, -0.5, 0.0);
}
}
}
frame(lua_state, 3.0);
WorkModule::is_flag(fighter.module_accessor, *FIGHTER_DOLLY_STATUS_SPECIAL_COMMON_WORK_FLAG_COMMAND);
if(0x2508e0(false, true)){;
if(0x2508e0(*FIGHTER_DOLLY_STATUS_SPECIAL_COMMON_WORK_INT_STRENGTH, *FIGHTER_DOLLY_STRENGTH_W)){;
if is_excute(fighter) {
	ATTACK(fighter, 0, 0, Hash40::new("top"), 11.0, 50, 70, 0, 80, 5.0, 0.0, 6.0, 7.0, Some(0.0), Some(4.0), Some(2.0), 1.2, 1.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_F, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_DOLLY_PUNCH, *ATTACK_REGION_PUNCH);
}
else{;
if(0x2508e0(*ATTACK_REGION_PUNCH, *FIGHTER_DOLLY_STRENGTH_W)){;
	if is_excute(fighter) {
		ATTACK(fighter, 0, 0, Hash40::new("top"), 12.0, 50, 65, 0, 80, 5.0, 0.0, 6.0, 7.0, Some(0.0), Some(4.0), Some(2.0), 1.2, 1.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_F, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_DOLLY_PUNCH, *ATTACK_REGION_PUNCH);
	}
	else{;
	if is_excute(fighter) {
		ATTACK(fighter, 0, 0, Hash40::new("top"), 11.0, 50, 75, 0, 80, 5.0, 0.0, 6.0, 7.0, Some(0.0), Some(4.0), Some(2.0), 1.2, 1.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_F, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_DOLLY_CRITICAL, *ATTACK_REGION_PUNCH);
	}
	else{;
	if is_excute(fighter) {
		ATTACK(fighter, 0, 0, Hash40::new("top"), 12.0, 50, 70, 0, 80, 5.0, 0.0, 6.0, 7.0, Some(0.0), Some(4.0), Some(2.0), 1.2, 1.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_F, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_DOLLY_PUNCH, *ATTACK_REGION_PUNCH);
	}
}
}
}
}
}
}
frame(lua_state, 4.0);
if(0x2508e0(*FIGHTER_DOLLY_STATUS_SPECIAL_COMMON_WORK_INT_STRENGTH, *FIGHTER_DOLLY_STRENGTH_W)){;
if is_excute(fighter) {
KineticModule::add_speed(fighter.module_accessor, 0, 0.05, 0.0);
}
else{;
if is_excute(fighter) {
KineticModule::add_speed(fighter.module_accessor, 0, 0.2, 0.0);
}
}
}
frame(lua_state, 5.0);
WorkModule::is_flag(fighter.module_accessor, *FIGHTER_DOLLY_STATUS_SPECIAL_COMMON_WORK_FLAG_COMMAND);
if(0x2508e0(false, true)){;
if(0x2508e0(*FIGHTER_DOLLY_STATUS_SPECIAL_COMMON_WORK_INT_STRENGTH, *FIGHTER_DOLLY_STRENGTH_W)){;
if is_excute(fighter) {
ATTACK(fighter, 0, 0, Hash40::new("top"), 14.0, 50, 80, 0, 60, 4.0, 0.0, 6.0, 7.0, Some(0.0), Some(4.0), Some(2.0), 1.2, 1.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_F, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_DOLLY_PUNCH, *ATTACK_REGION_PUNCH);
}
else{;
if(0x2508e0(*ATTACK_REGION_PUNCH, *FIGHTER_DOLLY_STRENGTH_W)){;
if is_excute(fighter) {
ATTACK(fighter, 0, 0, Hash40::new("top"), 14.0, 50, 80, 0, 60, 4.0, 0.0, 6.0, 7.0, Some(0.0), Some(4.0), Some(2.0), 1.2, 1.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_F, false, 8, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_DOLLY_PUNCH, *ATTACK_REGION_PUNCH);
}
else{;
if is_excute(fighter) {
ATTACK(fighter, 0, 0, Hash40::new("top"), 14.0, 310, 95, 0, 30, 5.0, 0.0, 6.0, 7.0, Some(0.0), Some(4.0), Some(2.0), 1.2, 1.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_F, false, 8, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_DOLLY_CRITICAL, *ATTACK_REGION_PUNCH);
}
else{;
if is_excute(fighter) {
ATTACK(fighter, 0, 0, Hash40::new("top"), 14.0, 50, 80, 0, 60, 4.0, 0.0, 6.0, 7.0, Some(0.0), Some(4.0), Some(2.0), 1.2, 1.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_F, false, 8, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_DOLLY_PUNCH, *ATTACK_REGION_PUNCH);
}
}
}
}
}
}
}
if(0x2508e0(*FIGHTER_DOLLY_STATUS_SPECIAL_COMMON_WORK_INT_STRENGTH, *FIGHTER_DOLLY_STRENGTH_W)){;
if is_excute(fighter) {
MotionModule::set_rate(fighter.module_accessor, /*FSR*/ 1.2);
KineticModule::add_speed(fighter.module_accessor, 0, 0.05, 0.0);
}
else{;
if is_excute(fighter) {
MotionModule::set_rate(fighter.module_accessor, /*FSR*/ 1);
KineticModule::add_speed(fighter.module_accessor, 0, 0.2, 0.0);
}
}
}
frame(lua_state, 6.0);
if(0x2508e0(*FIGHTER_DOLLY_STATUS_SPECIAL_COMMON_WORK_INT_STRENGTH, *FIGHTER_DOLLY_STRENGTH_W)){;
if is_excute(fighter) {
KineticModule::add_speed(fighter.module_accessor, 0, 0.05, 0.0);
}
else{;
if is_excute(fighter) {
KineticModule::add_speed(fighter.module_accessor, 0, 0.2, 0.0);
}
}
}
frame(lua_state, 7.0);
if(0x2508e0(*FIGHTER_DOLLY_STATUS_SPECIAL_COMMON_WORK_INT_STRENGTH, *FIGHTER_DOLLY_STRENGTH_W)){;
if is_excute(fighter) {
KineticModule::add_speed(fighter.module_accessor, 0, 0.05, 0.0);
}
else{;
if is_excute(fighter) {
KineticModule::add_speed(fighter.module_accessor, 0, 0.2, 0.0);
}
}
}
frame(lua_state, 8.0);
if(0x2508e0(*FIGHTER_DOLLY_STATUS_SPECIAL_COMMON_WORK_INT_STRENGTH, *FIGHTER_DOLLY_STRENGTH_W)){;
if is_excute(fighter) {
KineticModule::add_speed(fighter.module_accessor, 0, 0.05, 0.0);
}
else{;
if is_excute(fighter) {
KineticModule::add_speed(fighter.module_accessor, 0, 0.2, 0.0);
}
}
}
frame(lua_state, 9.0);
if(0x2508e0(*FIGHTER_DOLLY_STATUS_SPECIAL_COMMON_WORK_INT_STRENGTH, *FIGHTER_DOLLY_STRENGTH_W)){;
if is_excute(fighter) {
KineticModule::add_speed(fighter.module_accessor, 0, 0.05, 0.0);
}
else{;
if is_excute(fighter) {
KineticModule::add_speed(fighter.module_accessor, 0, 0.2, 0.0);
}
}
}
frame(lua_state, 10.0);
if(0x2508e0(*FIGHTER_DOLLY_STATUS_SPECIAL_COMMON_WORK_INT_STRENGTH, *FIGHTER_DOLLY_STRENGTH_W)){;
if is_excute(fighter) {
KineticModule::add_speed(fighter.module_accessor, 0, 0.05, 0.0);
}
else{;
if is_excute(fighter) {
KineticModule::add_speed(fighter.module_accessor, 0, 0.2, 0.0);
}
}
}
frame(lua_state, 11.0);
if(0x2508e0(*FIGHTER_DOLLY_STATUS_SPECIAL_COMMON_WORK_INT_STRENGTH, *FIGHTER_DOLLY_STRENGTH_W)){;
if is_excute(fighter) {
KineticModule::add_speed(fighter.module_accessor, 0, 0, 0.0);
}
else{;
if is_excute(fighter) {
KineticModule::add_speed(fighter.module_accessor, 0, 0.2, 0.0);
}
}
}
frame(lua_state, 12.0);
if(0x2508e0(*FIGHTER_DOLLY_STATUS_SPECIAL_COMMON_WORK_INT_STRENGTH, *FIGHTER_DOLLY_STRENGTH_W)){;
if is_excute(fighter) {
KineticModule::add_speed(fighter.module_accessor, 0, 0, 0.0);
}
else{;
if is_excute(fighter) {
KineticModule::add_speed(fighter.module_accessor, 0, 0.2, 0.0);
}
}
}
frame(lua_state, 13.0);
if(0x2508e0(*FIGHTER_DOLLY_STATUS_SPECIAL_COMMON_WORK_INT_STRENGTH, *FIGHTER_DOLLY_STRENGTH_W)){;
if is_excute(fighter) {
KineticModule::add_speed(fighter.module_accessor, 0, 0, 0.0);
}
else{;
if is_excute(fighter) {
KineticModule::add_speed(fighter.module_accessor, 0, 0.2, 0.0);
}
}
}
frame(lua_state, 14.0);
WorkModule::is_flag(fighter.module_accessor, *FIGHTER_DOLLY_STATUS_SPECIAL_COMMON_WORK_FLAG_COMMAND);
if(0x2508e0(false, true)){;
0x2508e0(*FIGHTER_DOLLY_STATUS_SPECIAL_COMMON_WORK_INT_STRENGTH, *FIGHTER_DOLLY_STRENGTH_W);
if is_excute(fighter) {
ATTACK(fighter, 0, 0, Hash40::new("top"), 14.0, 50, 80, 0, 60, 4.0, 0.0, 6.0, 7.0, Some(0.0), Some(4.0), Some(2.0), 1.8, 1.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_F, false, 8, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_DOLLY_PUNCH, *ATTACK_REGION_PUNCH);
}
}
frame(lua_state, 15.0);
if(0x2508e0(*FIGHTER_DOLLY_STATUS_SPECIAL_COMMON_WORK_INT_STRENGTH, *FIGHTER_DOLLY_STRENGTH_W)){;
if is_excute(fighter) {
MotionModule::set_rate(fighter.module_accessor, /*FSR*/ 10);
}
else{;
if is_excute(fighter) {
MotionModule::set_rate(fighter.module_accessor, /*FSR*/ 10);
}
}
}
frame(lua_state, 35.0);
if is_excute(fighter) {
AttackModule::clear_all(fighter.module_accessor);
KineticModule::change_kinetic(fighter.module_accessor, *FIGHTER_KINETIC_TYPE_DOLLY_SPECIAL_LW_FALL);
MotionModule::set_rate(fighter.module_accessor, /*FSR*/ 1);
}
frame(lua_state, 37.0);
if is_excute(fighter) {
WorkModule::on_flag(fighter.module_accessor, /*Flag*/ *FIGHTER_DOLLY_STATUS_SPECIAL_LW_WORK_FLAG_LANDING_HEAVY);
}
}