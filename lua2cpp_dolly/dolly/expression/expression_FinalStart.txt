#[acmd_script( agent = "dolly", script = "expression_finalstart" , category = ACMD_EXPRESSION , low_priority)]
unsafe fn expression_finalstart (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	if is_excute(fighter) {
		START_INFO_FLASH_EYE(fighter);
		ItemModule::set_have_item_visibility(fighter.module_accessor, false);
		slope(*MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_LR);
	}
	frame(lua_state, 26.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_erase_sp"), 1, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 38.0);
	if is_excute(fighter) {
		slope(*MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_TOP, 2);
	}
	frame(lua_state, 39.0);
	if is_excute(fighter) {
		slope(*MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_TOP, 2, true);
	}
	frame(lua_state, 40.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_explosion"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
		RUMBLE_HIT(fighter, Hash40::new("rbkind_attack_critical"), 0);
		QUAKE(fighter, *CAMERA_QUAKE_KIND_L);
	}
	frame(lua_state, 59.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_erase_sp"), 1, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 60.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_explosion"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
		QUAKE(fighter, *CAMERA_QUAKE_KIND_L);
	}
	frame(lua_state, 89.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_erase_sp"), 1, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 90.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_explosionm"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
		QUAKE(fighter, *CAMERA_QUAKE_KIND_L);
	}
	frame(lua_state, 115.0);
	if is_excute(fighter) {
		slope(*MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_LR, 10);
	}
}