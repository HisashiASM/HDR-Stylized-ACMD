#[acmd_script( agent = "littlemac", script = "game_finalairattack" , category = ACMD_GAME , low_priority)]
unsafe fn game_finalairattack (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	if is_excute(fighter) {
		WHOLE_HIT(fighter, *HIT_STATUS_XLU);
	}
	frame(lua_state, 1.0);
	if is_excute(fighter) {
		CAM_ZOOM_OUT(fighter);
	}
	WorkModule::is_flag(fighter.module_accessor, *FIGHTER_LITTLEMAC_STATUS_FINAL_FLAG_HIT_ALL_OPPONENT);
	if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, true)){;
		WorkModule::is_flag(fighter.module_accessor, *FIGHTER_LITTLEMAC_STATUS_FINAL_FLAG_DEMON_DOJO_ZOOM);
		if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, true)){;
			get_value_float(*SO_VAR_FLOAT_LR);
			if(0x1462c0(0, 0)){;
				if is_excute(fighter) {
					PostureModule::scale(fighter.module_accessor, 300, 0);
					0x1462c0(0, 2.5);
					CAM_ZOOM_IN_FINAL_arg13(-15, 10, 0, -5, 70, true, *FIGHTER_LITTLEMAC_STATUS_FINAL_WORK_INT_ATTACK_HIT_OBJECT_ID, 0, 20, 5);
				}
				else{;
				get_value_float(*FIGHTER_LITTLEMAC_STATUS_FINAL_WORK_INT_ATTACK_HIT_OBJECT_ID);
				if(0x1462c0(680, 0)){;
					if is_excute(fighter) {
						PostureModule::scale(fighter.module_accessor, 300, 0);
						0x1462c0(0, 2.5);
						CAM_ZOOM_IN_FINAL_arg13(-30, 10, -20, -5, 70, true, *FIGHTER_LITTLEMAC_STATUS_FINAL_WORK_INT_ATTACK_HIT_OBJECT_ID, 0, 20, 5);
					}
					else{;
					if is_excute(fighter) {
						CAM_ZOOM_IN_FINAL_arg13(300, 0, 2.5, 15, 10, 0, -5, 70, true, *FIGHTER_LITTLEMAC_STATUS_FINAL_WORK_INT_ATTACK_HIT_OBJECT_ID, 0, -15, 5);
					}
					else{;
					if is_excute(fighter) {
						CAM_ZOOM_IN_FINAL_arg13(300, 0, 2.5, 30, 10, 20, -5, 70, true, *FIGHTER_LITTLEMAC_STATUS_FINAL_WORK_INT_ATTACK_HIT_OBJECT_ID, 0, -15, 5);
					}
				}
			}
		}
	}
}
}
}
frame(lua_state, 2.0);
for(47 Iterations){;
if is_excute(fighter) {
ATTACK(fighter, 0, 0, Hash40::new("top"), 1.0, 315, 100, 50, 0, 10.0, 0.0, 20.0, 8.0, None, None, None, 0.4, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, true, Hash40::new("no"), 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_NONE);
ATTACK(fighter, 1, 0, Hash40::new("top"), 1.0, 225, 100, 50, 0, 10.0, 0.0, 20.0, 30.0, None, None, None, 0.4, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, true, Hash40::new("no"), 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_NONE);
ATTACK(fighter, 2, 0, Hash40::new("top"), 1.0, 45, 100, 50, 0, 10.0, 0.0, 0.0, 8.0, None, None, None, 0.4, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, true, Hash40::new("no"), 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_NONE);
ATTACK(fighter, 3, 0, Hash40::new("top"), 1.0, 135, 100, 50, 0, 10.0, 0.0, 0.0, 30.0, None, None, None, 0.4, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, true, Hash40::new("no"), 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_NONE);
AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
AttackModule::set_no_uniq_effect_all(fighter.module_accessor, true, false);
}
wait(lua_state, 1.0);
if is_excute(fighter) {
AttackModule::clear_all(fighter.module_accessor);
}
wait(lua_state, 2.0);
}
frame(lua_state, 143.0);
if is_excute(fighter) {
ATTACK(fighter, 0, 0, Hash40::new("top"), 2.0, 40, 100, 0, 30, 20.0, 0.0, 10.0, 20.0, None, None, None, 0.4, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, Hash40::new("no"), 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_NONE);
AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
WorkModule::on_flag(fighter.module_accessor, /*Flag*/ *FIGHTER_LITTLEMAC_STATUS_FINAL_FLAG_ATTACK_REQUEST_LOOP_DAMAGE_MOTION);
WorkModule::set_int64(fighter.module_accessor, Hash40::new("fall_damage"), *FIGHTER_LITTLEMAC_STATUS_FINAL_WORK_INT_ATTACK_REQUEST_LOOP_DAMAGE_MOTION);
}
frame(lua_state, 144.0);
if is_excute(fighter) {
AttackModule::clear_all(fighter.module_accessor);
WorkModule::off_flag(fighter.module_accessor, /*Flag*/ *FIGHTER_LITTLEMAC_STATUS_FINAL_FLAG_ATTACK_REQUEST_LOOP_DAMAGE_MOTION);
}
frame(lua_state, 149.0);
if is_excute(fighter) {
CAM_ZOOM_OUT(fighter);
WHOLE_HIT(fighter, *HIT_STATUS_XLU);
AttackModule::clear_all(fighter.module_accessor);
ATTACK(fighter, 0, 0, Hash40::new("top"), 10.0, 68, 120, 0, 80, 23.0, 0.0, 14.0, 18.0, None, None, None, 1.6, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, Hash40::new("no"), 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_NONE);
AttackModule::set_force_reaction(fighter.module_accessor, 0, true, false);
WorkModule::on_flag(fighter.module_accessor, /*Flag*/ *FIGHTER_LITTLEMAC_STATUS_FINAL_FLAG_ATTACK_END_HIT);
AttackModule::set_final_finish_cut_in(fighter.module_accessor, 0, true, false, -1, false);
}
WorkModule::is_flag(fighter.module_accessor, *FIGHTER_LITTLEMAC_STATUS_FINAL_FLAG_HIT_ALL_OPPONENT);
if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, true)){;
if is_excute(fighter) {
PostureModule::scale(fighter.module_accessor, 2, 0);
0x1462c0(-1186192792, 2.5);
CAM_ZOOM_IN_arg5(0, 0);
}
}
get_value_float(*SO_VAR_FLOAT_LR);
if(0x1462c0(1421420, 0)){;
if is_excute(fighter) {
camera(*MA_MSC_CMD_CAMERA_CAM_OFFSET, -10, 10);
}
else{;
if is_excute(fighter) {
camera(*MA_MSC_CMD_CAMERA_CAM_OFFSET, 10, 10);
}
}
}
frame(lua_state, 151.0);
if is_excute(fighter) {
AttackModule::clear_all(fighter.module_accessor);
}
frame(lua_state, 176.0);
if is_excute(fighter) {
CAM_ZOOM_OUT(fighter);
}
}