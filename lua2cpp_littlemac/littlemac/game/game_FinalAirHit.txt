#[acmd_script( agent = "littlemac", script = "game_finalairhit" , category = ACMD_GAME , low_priority)]
unsafe fn game_finalairhit (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	if is_excute(fighter) {
		WHOLE_HIT(fighter, *HIT_STATUS_XLU);
		CAM_ZOOM_OUT(fighter);
	}
	frame(lua_state, 2.0);
	if is_excute(fighter) {
		ATTACK(fighter, 0, 0, Hash40::new("top"), 2.0, 361, 100, 100, 0, 15.0, 0.0, 9.0, 4.0, Some(0.0), Some(9.0), Some(20.0), 2.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, Hash40::new("no"), 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_NONE);
		AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
		AttackModule::set_no_uniq_effect_all(fighter.module_accessor, true, false);
		PostureModule::scale(fighter.module_accessor, 1, 0);
		0x1462c0(1128533056, 2.5);
		CAM_ZOOM_IN_arg5(0, 0);
	}
	get_value_float(*SO_VAR_FLOAT_LR);
	if(0x1462c0(1718776, 0)){;
		if is_excute(fighter) {
			camera(*MA_MSC_CMD_CAMERA_CAM_OFFSET, -10, 7);
		}
		else{;
		if is_excute(fighter) {
			camera(*MA_MSC_CMD_CAMERA_CAM_OFFSET, 10, 7);
		}
	}
}
wait(lua_state, 3.0);
if is_excute(fighter) {
	AttackModule::clear_all(fighter.module_accessor);
}
frame(lua_state, 45.0);
if is_excute(fighter) {
	CAM_ZOOM_OUT(fighter);
}
}