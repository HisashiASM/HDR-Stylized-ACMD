#[acmd_script( agent = "lucas", script = "game_catchturn" , category = ACMD_GAME , low_priority)]
unsafe fn game_catchturn (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	if is_excute(fighter) {
		ArticleModule::generate_article(fighter.module_accessor, *FIGHTER_LUCAS_GENERATE_ARTICLE_HIMOHEBI);
		methodlib::L2CValue::as_hash()const(*FIGHTER_LUCAS_GENERATE_ARTICLE_HIMOHEBI, Hash40::new("catch_turn"));
		ArticleModule::change_motion(fighter.module_accessor);
	}
	frame(lua_state, 14.0);
	if is_excute(fighter) {
		GrabModule::set_rebound(fighter.module_accessor, /*CanCatchRebound*/ true);
	}
	frame(lua_state, 15.0);
	if is_excute(fighter) {
		CATCH(fighter, 0, Hash40::new("throw"), 3.0, 0.0, 0.0, 3.5, Some(0.0), Some(0.0), Some(-5.0), *FIGHTER_STATUS_KIND_CAPTURE_PULLED, *COLLISION_SITUATION_MASK_GA);
	}
	methodlua2cpp::L2CFighterAnimcmdGameCommon::game_CaptureCutCommon()();
	frame(lua_state, 17.0);
	if is_excute(fighter) {
		CATCH(fighter, 0, Hash40::new("throw"), 2.8, 0.0, 0.0, 0.0, *FIGHTER_STATUS_KIND_CAPTURE_PULLED, *COLLISION_SITUATION_MASK_GA);
	}
	frame(lua_state, 21.0);
	if is_excute(fighter) {
		grab(*MA_MSC_CMD_GRAB_CLEAR_ALL);
		GrabModule::set_rebound(fighter.module_accessor, /*CanCatchRebound*/ false);
	}
	frame(lua_state, 75.0);
	if is_excute(fighter) {
		ArticleModule::remove_exist(fighter.module_accessor, *FIGHTER_LUCAS_GENERATE_ARTICLE_HIMOHEBI);
	}
}