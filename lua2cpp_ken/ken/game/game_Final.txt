#[acmd_script( agent = "ken", script = "game_final" , category = ACMD_GAME , low_priority)]
unsafe fn game_final (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	frame(lua_state, 1.0);
	if is_excute(fighter) {
		CHECK_VALID_FINAL_START_CAMERA(fighter, 0, 0, 20, 0, 0, 0);
		SLOW_OPPONENT(fighter, 10, 70);
	}
	WorkModule::is_flag(fighter.module_accessor, *FIGHTER_INSTANCE_WORK_ID_FLAG_DISABLE_FINAL_START_CAMERA);
	if(0x16e550(false, false)){;
		frame(lua_state, 5.0);
		if is_excute(fighter) {
			FT_SET_FINAL_FEAR_FACE(fighter, 40);
			REQ_FINAL_START_CAMERA(fighter, Hash40::new("d04final.nuanmb"), true);
			FT_START_CUTIN(fighter);
		}
		else{;
		if is_excute(fighter) {
			FT_START_CUTIN(fighter);
		}
		get_value_float(*SO_VAR_FLOAT_LR);
		if(0x16e550(0, 0)){;
			if is_excute(fighter) {
				camera(*MA_MSC_CMD_CAMERA_CAM_OFFSET, 0, 0);
				PostureModule::scale(fighter.module_accessor, 3, 0);
				0x16e550(1760657085, 1.8);
				CAM_ZOOM_IN_arg5(0, 0);
			}
			else{;
			if is_excute(fighter) {
				camera(*MA_MSC_CMD_CAMERA_CAM_OFFSET, 0, 0);
				PostureModule::scale(fighter.module_accessor, 3, 0);
				0x16e550(1760657085, 1.8);
				CAM_ZOOM_IN_arg5(0, 0);
			}
		}
	}
}
}
frame(0, 10);
FT_MOTION_RATE(fighter, 15);
if is_excute(fighter) {
ATTACK(fighter, 0, 0, Hash40::new("top"), 1.0, 365, 100, 48, 17, 11.0, 0.0, 8.0, 8.0, None, None, None, 0.0, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, Hash40::new("no"), 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_G, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_paralyze"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_NONE);
ATTACK(fighter, 1, 0, Hash40::new("top"), 1.0, 365, 100, 48, 17, 11.0, 0.0, 8.0, 8.0, None, None, None, 0.0, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, Hash40::new("no"), 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_A, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_paralyze"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_NONE);
AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
AttackModule::set_no_uniq_effect_all(fighter.module_accessor, true, false);
AttackModule::set_damage_shake_scale(fighter.module_accessor, 0.18);
}
PostureModule::scale(fighter.module_accessor, 0);
if(0x16e550(1760657085, 1.4)){;
if is_excute(fighter) {
	methodlib::L2CValue::as_hash()const(0, Hash40::new("top"), 15, 0, 5);
	AttackModule::set_vec_target_pos(fighter.module_accessor);
	methodlib::L2CValue::as_hash()const(1, Hash40::new("top"), 15, 0, 5);
	AttackModule::set_vec_target_pos(fighter.module_accessor);
}
else{;
PostureModule::scale(fighter.module_accessor);
if(0x16e550(0, 0.5)){;
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(0, Hash40::new("top"), 20, 0, 2);
		AttackModule::set_vec_target_pos(fighter.module_accessor);
		methodlib::L2CValue::as_hash()const(1, Hash40::new("top"), 20, 0, 2);
		AttackModule::set_vec_target_pos(fighter.module_accessor);
	}
	else{;
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(0, Hash40::new("top"), 13, 5, 5);
		AttackModule::set_vec_target_pos(fighter.module_accessor);
		methodlib::L2CValue::as_hash()const(1, Hash40::new("top"), 15, 4, 10);
		AttackModule::set_vec_target_pos(fighter.module_accessor);
	}
}
}
}
}
wait(lua_state, 1.0);
if is_excute(fighter) {
AttackModule::clear_all(fighter.module_accessor);
}
frame(lua_state, 13.0);
FT_MOTION_RATE(fighter, 1);
frame(lua_state, 22.0);
frame(0, 25);
if is_excute(fighter) {
CAM_ZOOM_OUT(fighter);
ATTACK(fighter, 0, 0, Hash40::new("top"), 3.2, 45, 150, 40, 0, 9.0, 0.0, 11.0, 5.0, Some(0.0), Some(11.0), Some(10.0), 1.0, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, Hash40::new("no"), 0.0, 0, false, false, false, false, false, *COLLISION_SITUATION_MASK_G, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, COLLISION_SOUND_ATTR_KEN_FINAL01, *ATTACK_REGION_KICK);
ATTACK(fighter, 1, 0, Hash40::new("top"), 3.2, 45, 150, 40, 0, 9.0, 0.0, 11.0, 5.0, Some(0.0), Some(11.0), Some(10.0), 1.0, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, Hash40::new("no"), 0.0, 0, false, false, false, false, false, *COLLISION_SITUATION_MASK_A, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, COLLISION_SOUND_ATTR_KEN_FINAL01, *ATTACK_REGION_KICK);
AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
methodlib::L2CValue::as_hash()const(0, Hash40::new("ken_final_shippu_hit_rush"));
AttackModule::set_optional_hit_effect(fighter.module_accessor);
methodlib::L2CValue::as_hash()const(1, Hash40::new("ken_final_shippu_hit_rush"));
AttackModule::set_optional_hit_effect(fighter.module_accessor);
}
PostureModule::scale(fighter.module_accessor, 0);
if(0x16e550(1760657085, 1.4)){;
if is_excute(fighter) {
methodlib::L2CValue::as_hash()const(0, Hash40::new("top"), 12, 5, 13);
AttackModule::set_vec_target_pos(fighter.module_accessor);
methodlib::L2CValue::as_hash()const(1, Hash40::new("top"), 15, 20, 5);
AttackModule::set_vec_target_pos(fighter.module_accessor);
}
else{;
PostureModule::scale(fighter.module_accessor);
if(0x16e550(0, 0.5)){;
if is_excute(fighter) {
methodlib::L2CValue::as_hash()const(0, Hash40::new("top"), 28, 5, 13);
AttackModule::set_vec_target_pos(fighter.module_accessor);
methodlib::L2CValue::as_hash()const(1, Hash40::new("top"), 37, 10, 15);
AttackModule::set_vec_target_pos(fighter.module_accessor);
}
else{;
if is_excute(fighter) {
methodlib::L2CValue::as_hash()const(0, Hash40::new("top"), 15, 1, 9);
AttackModule::set_vec_target_pos(fighter.module_accessor);
methodlib::L2CValue::as_hash()const(1, Hash40::new("top"), 19, 5, 15);
AttackModule::set_vec_target_pos(fighter.module_accessor);
}
}
}
}
}
wait(lua_state, 1.0);
if is_excute(fighter) {
AttackModule::clear_all(fighter.module_accessor);
}
frame(0, 40);
if is_excute(fighter) {
ATTACK(fighter, 0, 0, Hash40::new("top"), 3.2, 45, 150, 40, 0, 9.0, 0.0, 11.0, 5.0, Some(0.0), Some(11.0), Some(10.0), 1.0, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, Hash40::new("no"), 0.0, 0, false, false, false, false, false, *COLLISION_SITUATION_MASK_G, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, COLLISION_SOUND_ATTR_KEN_FINAL01, *ATTACK_REGION_KICK);
ATTACK(fighter, 1, 0, Hash40::new("top"), 3.2, 45, 150, 40, 0, 9.0, 0.0, 11.0, 5.0, Some(0.0), Some(11.0), Some(10.0), 1.0, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, Hash40::new("no"), 0.0, 0, false, false, false, false, false, *COLLISION_SITUATION_MASK_A, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, COLLISION_SOUND_ATTR_KEN_FINAL01, *ATTACK_REGION_KICK);
AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
methodlib::L2CValue::as_hash()const(0, Hash40::new("ken_final_shippu_hit_rush"));
AttackModule::set_optional_hit_effect(fighter.module_accessor);
methodlib::L2CValue::as_hash()const(1, Hash40::new("ken_final_shippu_hit_rush"));
AttackModule::set_optional_hit_effect(fighter.module_accessor);
}
PostureModule::scale(fighter.module_accessor, 0);
if(0x16e550(1760657085, 1.4)){;
if is_excute(fighter) {
methodlib::L2CValue::as_hash()const(0, Hash40::new("top"), 13, 4, 13);
AttackModule::set_vec_target_pos(fighter.module_accessor);
methodlib::L2CValue::as_hash()const(1, Hash40::new("top"), 13, 7, 15);
AttackModule::set_vec_target_pos(fighter.module_accessor);
}
else{;
PostureModule::scale(fighter.module_accessor);
if(0x16e550(0, 0.5)){;
if is_excute(fighter) {
methodlib::L2CValue::as_hash()const(0, Hash40::new("top"), 37, 4, 13);
AttackModule::set_vec_target_pos(fighter.module_accessor);
methodlib::L2CValue::as_hash()const(1, Hash40::new("top"), 37, 7, 15);
AttackModule::set_vec_target_pos(fighter.module_accessor);
}
else{;
if is_excute(fighter) {
methodlib::L2CValue::as_hash()const(0, Hash40::new("top"), 20, 2, 13);
AttackModule::set_vec_target_pos(fighter.module_accessor);
methodlib::L2CValue::as_hash()const(1, Hash40::new("top"), 20, 4, 15);
AttackModule::set_vec_target_pos(fighter.module_accessor);
}
}
}
}
}
wait(lua_state, 1.0);
if is_excute(fighter) {
AttackModule::clear_all(fighter.module_accessor);
}
frame(0, 55);
if is_excute(fighter) {
ATTACK(fighter, 0, 0, Hash40::new("top"), 3.2, 45, 150, 40, 0, 9.0, 0.0, 11.0, 8.0, Some(0.0), Some(11.0), Some(10.0), 1.0, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, Hash40::new("no"), 0.0, 0, false, false, false, false, false, *COLLISION_SITUATION_MASK_G, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, COLLISION_SOUND_ATTR_KEN_FINAL01, *ATTACK_REGION_KICK);
ATTACK(fighter, 1, 0, Hash40::new("top"), 3.2, 45, 150, 40, 0, 9.0, 0.0, 11.0, 8.0, Some(0.0), Some(11.0), Some(10.0), 1.0, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, Hash40::new("no"), 0.0, 0, false, false, false, false, false, *COLLISION_SITUATION_MASK_A, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, COLLISION_SOUND_ATTR_KEN_FINAL01, *ATTACK_REGION_KICK);
AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
methodlib::L2CValue::as_hash()const(0, Hash40::new("ken_final_shippu_hit_rush"));
AttackModule::set_optional_hit_effect(fighter.module_accessor);
methodlib::L2CValue::as_hash()const(1, Hash40::new("ken_final_shippu_hit_rush"));
AttackModule::set_optional_hit_effect(fighter.module_accessor);
}
PostureModule::scale(fighter.module_accessor, 0);
if(0x16e550(1760657085, 1.4)){;
if is_excute(fighter) {
methodlib::L2CValue::as_hash()const(0, Hash40::new("top"), 13, 8, 10);
AttackModule::set_vec_target_pos(fighter.module_accessor);
methodlib::L2CValue::as_hash()const(1, Hash40::new("top"), 13, 10, 15);
AttackModule::set_vec_target_pos(fighter.module_accessor);
}
else{;
PostureModule::scale(fighter.module_accessor);
if(0x16e550(0, 0.5)){;
if is_excute(fighter) {
methodlib::L2CValue::as_hash()const(0, Hash40::new("top"), 46, 8, 10);
AttackModule::set_vec_target_pos(fighter.module_accessor);
methodlib::L2CValue::as_hash()const(1, Hash40::new("top"), 46, 12, 15);
AttackModule::set_vec_target_pos(fighter.module_accessor);
}
else{;
if is_excute(fighter) {
methodlib::L2CValue::as_hash()const(0, Hash40::new("top"), 22, 4, 10);
AttackModule::set_vec_target_pos(fighter.module_accessor);
methodlib::L2CValue::as_hash()const(1, Hash40::new("top"), 22, 7, 15);
AttackModule::set_vec_target_pos(fighter.module_accessor);
}
}
}
}
}
wait(lua_state, 1.0);
if is_excute(fighter) {
AttackModule::clear_all(fighter.module_accessor);
}
frame(0, 64);
if is_excute(fighter) {
ATTACK(fighter, 0, 0, Hash40::new("top"), 3.2, 45, 150, 40, 0, 9.0, 0.0, 11.0, 8.0, Some(0.0), Some(11.0), Some(10.0), 1.0, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, Hash40::new("no"), 0.0, 0, false, false, false, false, false, *COLLISION_SITUATION_MASK_G, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, COLLISION_SOUND_ATTR_KEN_FINAL01, *ATTACK_REGION_KICK);
ATTACK(fighter, 1, 0, Hash40::new("top"), 3.2, 45, 150, 40, 0, 9.0, 0.0, 11.0, 8.0, Some(0.0), Some(11.0), Some(10.0), 1.0, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, Hash40::new("no"), 0.0, 0, false, false, false, false, false, *COLLISION_SITUATION_MASK_A, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, COLLISION_SOUND_ATTR_KEN_FINAL01, *ATTACK_REGION_KICK);
AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
methodlib::L2CValue::as_hash()const(0, Hash40::new("ken_final_shippu_hit_rush"));
AttackModule::set_optional_hit_effect(fighter.module_accessor);
methodlib::L2CValue::as_hash()const(1, Hash40::new("ken_final_shippu_hit_rush"));
AttackModule::set_optional_hit_effect(fighter.module_accessor);
}
PostureModule::scale(fighter.module_accessor, 0);
if(0x16e550(1760657085, 1.4)){;
if is_excute(fighter) {
methodlib::L2CValue::as_hash()const(0, Hash40::new("top"), 14, 8, 14);
AttackModule::set_vec_target_pos(fighter.module_accessor);
methodlib::L2CValue::as_hash()const(1, Hash40::new("top"), 16, 10, 15);
AttackModule::set_vec_target_pos(fighter.module_accessor);
}
else{;
PostureModule::scale(fighter.module_accessor);
if(0x16e550(0, 0.5)){;
if is_excute(fighter) {
methodlib::L2CValue::as_hash()const(0, Hash40::new("top"), 44, 8, 14);
AttackModule::set_vec_target_pos(fighter.module_accessor);
methodlib::L2CValue::as_hash()const(1, Hash40::new("top"), 52, 10, 15);
AttackModule::set_vec_target_pos(fighter.module_accessor);
}
else{;
if is_excute(fighter) {
methodlib::L2CValue::as_hash()const(0, Hash40::new("top"), 22, 4, 14);
AttackModule::set_vec_target_pos(fighter.module_accessor);
methodlib::L2CValue::as_hash()const(1, Hash40::new("top"), 26, 5, 15);
AttackModule::set_vec_target_pos(fighter.module_accessor);
}
}
}
}
}
wait(lua_state, 1.0);
if is_excute(fighter) {
AttackModule::clear_all(fighter.module_accessor);
}
frame(0, 76);
if is_excute(fighter) {
WorkModule::on_flag(fighter.module_accessor, /*Flag*/ *FIGHTER_RYU_STATUS_WORK_ID_FINAL_FLAG_LOCK_ATTACK);
ATTACK(fighter, 0, 0, Hash40::new("top"), 4.0, 50, 95, 40, 0, 11.0, 0.0, 8.0, 8.0, Some(0.0), Some(10.0), Some(8.0), 3.0, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, Hash40::new("no"), 0.0, 0, false, false, false, false, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, COLLISION_SOUND_ATTR_KEN_FINAL01, *ATTACK_REGION_KICK);
AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
}
PostureModule::scale(fighter.module_accessor, 0);
0x16e550(1760657085, 1.4);
PostureModule::scale(fighter.module_accessor);
0x16e550(0, 0.5);
wait(lua_state, 1.0);
if is_excute(fighter) {
AttackModule::clear_all(fighter.module_accessor);
}
if is_excute(fighter) {
WorkModule::on_flag(fighter.module_accessor, /*Flag*/ *FIGHTER_RYU_STATUS_WORK_ID_FINAL_FLAG_BRANCH_HIT);
SlowModule::clear_whole(fighter.module_accessor, 0);
}
}