#[acmd_script( agent = "ken", script = "game_finalhit_com" , category = ACMD_GAME , low_priority)]
unsafe fn game_finalhit_com (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	frame(lua_state, 1.0);
	if is_excute(fighter) {
		CAM_ZOOM_OUT(fighter);
	}
	frame(lua_state, 10.0);
	if is_excute(fighter) {
		ATTACK(fighter, 0, 0, Hash40::new("top"), 4.3, 367, 100, 60, 0, 9.0, 0.0, 12.0, 10.0, Some(0.0), Some(12.0), Some(14.0), 0.5, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, Hash40::new("no"), 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, COLLISION_SOUND_ATTR_KEN_FINAL02, *ATTACK_REGION_KICK);
		AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
		methodlib::L2CValue::as_hash()const(0, Hash40::new("ken_final_shippu_hit_rush"));
		AttackModule::set_optional_hit_effect(fighter.module_accessor);
	}
	wait(lua_state, 1.0);
	if is_excute(fighter) {
		AttackModule::clear_all(fighter.module_accessor);
	}
	frame(lua_state, 11.0);
	if is_excute(fighter) {
		WorkModule::on_flag(fighter.module_accessor, /*Flag*/ *FIGHTER_RYU_STATUS_WORK_ID_FINAL_FLAG_REMOVE_FINAL_AURA);
	}
	frame(lua_state, 19.0);
	if is_excute(fighter) {
		WorkModule::on_flag(fighter.module_accessor, /*Flag*/ *FIGHTER_RYU_STATUS_WORK_ID_FINAL_FLAG_ATTACK_END_SET_PARAM);
		ATTACK(fighter, 0, 0, Hash40::new("top"), 4.3, 367, 100, 50, 0, 10.0, 0.0, 12.0, 10.0, Some(0.0), Some(12.0), Some(14.0), 0.6, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, Hash40::new("no"), 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, COLLISION_SOUND_ATTR_KEN_FINAL02, *ATTACK_REGION_KICK);
		AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
		methodlib::L2CValue::as_hash()const(0, Hash40::new("ken_final_shippu_hit_rush"));
		AttackModule::set_optional_hit_effect(fighter.module_accessor);
	}
	wait(lua_state, 1.0);
	if is_excute(fighter) {
		AttackModule::clear_all(fighter.module_accessor);
	}
	frame(lua_state, 28.0);
	if is_excute(fighter) {
		WorkModule::on_flag(fighter.module_accessor, /*Flag*/ *FIGHTER_RYU_STATUS_WORK_ID_FINAL_FLAG_ATTACK_END_SET_PARAM);
		ATTACK(fighter, 0, 0, Hash40::new("top"), 4.3, 367, 100, 40, 0, 10.0, 0.0, 12.0, 10.0, Some(0.0), Some(12.0), Some(14.0), 0.6, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, Hash40::new("no"), 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, COLLISION_SOUND_ATTR_KEN_FINAL02, *ATTACK_REGION_KICK);
		AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
		methodlib::L2CValue::as_hash()const(0, Hash40::new("ken_final_shippu_hit_rush"));
		AttackModule::set_optional_hit_effect(fighter.module_accessor);
	}
	wait(lua_state, 1.0);
	if is_excute(fighter) {
		AttackModule::clear_all(fighter.module_accessor);
	}
	frame(lua_state, 37.0);
	if is_excute(fighter) {
		WorkModule::on_flag(fighter.module_accessor, /*Flag*/ *FIGHTER_RYU_STATUS_WORK_ID_FINAL_FLAG_ATTACK_END_SET_PARAM);
		ATTACK(fighter, 0, 0, Hash40::new("top"), 4.3, 367, 100, 40, 0, 10.0, 0.0, 12.0, 10.0, Some(0.0), Some(12.0), Some(14.0), 0.6, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, Hash40::new("no"), 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, COLLISION_SOUND_ATTR_KEN_FINAL02, *ATTACK_REGION_KICK);
		AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
		methodlib::L2CValue::as_hash()const(0, Hash40::new("ken_final_shippu_hit_rush"));
		AttackModule::set_optional_hit_effect(fighter.module_accessor);
	}
	wait(lua_state, 1.0);
	if is_excute(fighter) {
		AttackModule::clear_all(fighter.module_accessor);
	}
	frame(lua_state, 46.0);
	if is_excute(fighter) {
		WorkModule::on_flag(fighter.module_accessor, /*Flag*/ *FIGHTER_RYU_STATUS_WORK_ID_FINAL_FLAG_ATTACK_END_SET_PARAM);
	}
	PostureModule::scale(fighter.module_accessor);
	if(0x16e550(1760657085, 1.4)){;
		if is_excute(fighter) {
			ATTACK(fighter, 0, 0, Hash40::new("top"), 4.0, 80, 100, 80, 0, 10.0, 0.0, 12.0, 10.0, Some(0.0), Some(12.0), Some(14.0), 0.6, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, Hash40::new("no"), 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, COLLISION_SOUND_ATTR_KEN_FINAL02, *ATTACK_REGION_KICK);
		}
		else{;
		PostureModule::scale(fighter.module_accessor);
		if(0x16e550(1760657085, 0.5)){;
			if is_excute(fighter) {
				ATTACK(fighter, 0, 0, Hash40::new("top"), 4.0, 80, 100, 40, 0, 10.0, 0.0, 12.0, 10.0, Some(0.0), Some(12.0), Some(14.0), 0.6, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, Hash40::new("no"), 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, COLLISION_SOUND_ATTR_KEN_FINAL02, *ATTACK_REGION_KICK);
			}
			else{;
			if is_excute(fighter) {
				ATTACK(fighter, 0, 0, Hash40::new("top"), 4.3, 80, 100, 60, 0, 10.0, 0.0, 12.0, 10.0, Some(0.0), Some(12.0), Some(14.0), 0.6, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, Hash40::new("no"), 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, COLLISION_SOUND_ATTR_KEN_FINAL02, *ATTACK_REGION_KICK);
			}
		}
	}
}
}
if is_excute(fighter) {
AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
methodlib::L2CValue::as_hash()const(0, Hash40::new("ken_final_shippu_hit_rush"));
AttackModule::set_optional_hit_effect(fighter.module_accessor);
}
wait(lua_state, 1.0);
if is_excute(fighter) {
AttackModule::clear_all(fighter.module_accessor);
}
frame(lua_state, 64.0);
if is_excute(fighter) {
WorkModule::on_flag(fighter.module_accessor, /*Flag*/ *FIGHTER_RYU_STATUS_WORK_ID_FINAL_FLAG_ATTACK_END_SET_PARAM);
}
frame(lua_state, 65.0);
if is_excute(fighter) {
WorkModule::on_flag(fighter.module_accessor, /*Flag*/ *FIGHTER_RYU_STATUS_WORK_ID_FINAL_FLAG_ATTACK_END);
}
get_value_float(*SO_VAR_FLOAT_LR);
if(0x16e550(1612628, 0)){;
if is_excute(fighter) {
	camera(*MA_MSC_CMD_CAMERA_CAM_OFFSET, -10, 0);
	PostureModule::scale(fighter.module_accessor, 3, 0);
	0x16e550(1760657085, 1.8);
	CAM_ZOOM_IN_arg5(0, 0);
}
else{;
if is_excute(fighter) {
	camera(*MA_MSC_CMD_CAMERA_CAM_OFFSET, 10, 0);
	PostureModule::scale(fighter.module_accessor, 3, 0);
	0x16e550(1760657085, 1.8);
	CAM_ZOOM_IN_arg5(0, 0);
}
}
}
if is_excute(fighter) {
SlowModule::set_whole(fighter.module_accessor, 2, 0);
ATTACK(fighter, 0, 0, Hash40::new("top"), 7.0, 45, 160, 0, 30, 10.0, 0.0, 17.0, 10.0, Some(0.0), Some(17.0), Some(15.0), 5.0, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, Hash40::new("no"), 0.0, 0, false, false, false, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, COLLISION_SOUND_ATTR_KEN_FINAL03, *ATTACK_REGION_KICK);
AttackModule::set_force_reaction(fighter.module_accessor, 0, true, false);
WorkModule::set_int(fighter.module_accessor, FIGHTER_RYU_FINAL_CAMERA_OFFSET_7, *FIGHTER_RYU_STATUS_WORK_ID_FINAL_INT_CAMERA_OFFSET_TYPE);
WorkModule::on_flag(fighter.module_accessor, /*Flag*/ *FIGHTER_RYU_STATUS_WORK_ID_FINAL_FLAG_CAMERA_OFFSET);
FILL_SCREEN_MODEL_COLOR(fighter, 1, 0, 1, 1, 1, 0, 0, 0, 0.9, 1.7, EffectScreenLayer:*CHAR, *EFFECT_SCREEN_PRIO_FINAL);
}
wait(lua_state, 1.0);
if is_excute(fighter) {
AttackModule::clear_all(fighter.module_accessor);
SlowModule::clear_whole(fighter.module_accessor);
CANCEL_FILL_SCREEN(fighter, 1, 10);
}
frame(lua_state, 68.0);
if is_excute(fighter) {
CAM_ZOOM_OUT(fighter);
WorkModule::set_int(fighter.module_accessor, *FIGHTER_RYU_FINAL_CAMERA_OFFSET_RETURN, *FIGHTER_RYU_STATUS_WORK_ID_FINAL_INT_CAMERA_OFFSET_TYPE);
}
}