#[acmd_script( agent = "koopa", script = "expression_throwhi" , category = ACMD_EXPRESSION , low_priority)]
unsafe fn expression_throwhi (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("top"), *ATTACK_DIRECTION_Y, *ATTACK_DIRECTION_Z, *ATTACK_DIRECTION_X);
		AttackModule::set_attack_reference_joint_id(fighter.module_accessor);
		FT_ATTACK_ABS_CAMERA_QUAKE(fighter, *FIGHTER_ATTACK_ABSOLUTE_KIND_THROW, *CAMERA_QUAKE_KIND_NONE);
	}
	frame(lua_state, 1.0);
	if is_excute(fighter) {
		FT_DISABLE_CURRY_FACE(fighter, true);
		slope(*MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_LR);
	}
	frame(lua_state, 16.0);
	if is_excute(fighter) {
		ItemModule::set_attach_item_visibility(fighter.module_accessor, false);
	}
	frame(lua_state, 17.0);
	if is_excute(fighter) {
		slope(*MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_NONE);
	}
	frame(lua_state, 21.0);
	if is_excute(fighter) {
		QUAKE(fighter, *CAMERA_QUAKE_KIND_S);
		RUMBLE_HIT(fighter, Hash40::new("rbkind_attacks"), 5);
	}
	frame(lua_state, 51.0);
	if is_excute(fighter) {
		QUAKE(fighter, *CAMERA_QUAKE_KIND_L);
	}
	frame(lua_state, 57.0);
	if is_excute(fighter) {
		RUMBLE_HIT(fighter, Hash40::new("rbkind_attackm"), 0);
		slope(*MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_LR, 2);
		ItemModule::set_attach_item_visibility(fighter.module_accessor, true);
	}
}