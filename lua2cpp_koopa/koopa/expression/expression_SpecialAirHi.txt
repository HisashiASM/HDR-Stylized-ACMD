#[acmd_script( agent = "koopa", script = "expression_specialairhi" , category = ACMD_EXPRESSION , low_priority)]
unsafe fn expression_specialairhi (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	frame(lua_state, 1.0);
	if is_excute(fighter) {
		FT_DISABLE_CURRY_FACE(fighter, true);
		methodlib::L2CValue::as_hash()const(Hash40::new("top"), *ATTACK_DIRECTION_Y, *ATTACK_DIRECTION_Z, *ATTACK_DIRECTION_X);
		AttackModule::set_attack_reference_joint_id(fighter.module_accessor);
		slope(*MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_TOP, 6, true);
	}
	frame(lua_state, 5.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohitl"), 9, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 6.0);
	if is_excute(fighter) {
		RUMBLE_HIT(fighter, Hash40::new("rbkind_attacks"), 9);
	}
	frame(lua_state, 7.0);
	if is_excute(fighter) {
		ItemModule::set_have_item_visibility(fighter.module_accessor, false);
		ItemModule::set_attach_item_visibility(fighter.module_accessor, false);
	}
	frame(lua_state, 15.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohitl"), 9, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 25.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohitl"), 9, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 35.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohitl"), 9, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 45.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohitl"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 48.0);
	if is_excute(fighter) {
		RUMBLE_HIT(fighter, Hash40::new("rbkind_attackl"), 0);
	}
	frame(lua_state, 53.0);
	if is_excute(fighter) {
		slope(*MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_LR, 3);
	}
}