#[acmd_script( agent = "pickel", script = "game_finalair" , category = ACMD_GAME , low_priority)]
unsafe fn game_finalair (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	if is_excute(fighter) {
		WorkModule::on_flag(fighter.module_accessor, /*Flag*/ *FIGHTER_PICKEL_INSTANCE_WORK_ID_FLAG_REQUEST_REMOVE_HAVE_CRAFT_WEAPON);
		CHECK_VALID_FINAL_START_CAMERA(fighter, 0, 7, 20, 0, 0, 0);
		SLOW_OPPONENT(fighter, 30, 25);
	}
	frame(lua_state, 3.0);
	frame(lua_state, 5.0);
	if is_excute(fighter) {
		ArticleModule::generate_article(fighter.module_accessor, *FIGHTER_PICKEL_GENERATE_ARTICLE_PUSHFINAL);
		FT_SET_FINAL_FEAR_FACE(fighter, 50);
		FT_START_CUTIN(fighter);
	}
	WorkModule::is_flag(fighter.module_accessor, *FIGHTER_INSTANCE_WORK_ID_FLAG_DISABLE_FINAL_START_CAMERA);
	if(0x370870(false, false)){;
		if is_excute(fighter) {
			REQ_FINAL_START_CAMERA(fighter, Hash40::new("d04final.nuanmb"), false);
			SlowModule::set_whole(fighter.module_accessor, 3, 0);
		}
		else{;
		if is_excute(fighter) {
			PostureModule::scale(fighter.module_accessor, 4, 0);
			0x370870(189281854, 2.1);
			CAM_ZOOM_IN_arg5(0, 0);
		}
	}
}
frame(lua_state, 20.0);
if is_excute(fighter) {
	SlowModule::clear_whole(fighter.module_accessor);
}
frame(lua_state, 25.0);
if is_excute(fighter) {
	CAM_ZOOM_OUT(fighter);
}
frame(0, 25);
if is_excute(fighter) {
	ATTACK(fighter, 0, 0, Hash40::new("top"), 0.0, 50, 100, 75, 0, 13.0, 0.0, 10.0, 16.0, None, None, None, 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, true, Hash40::new("no"), 0.0, 0, false, false, false, true, true, *COLLISION_SITUATION_MASK_G, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_OBJECT);
	ATTACK(fighter, 1, 0, Hash40::new("top"), 0.0, 40, 100, 70, 0, 13.0, 0.0, 10.0, 16.0, None, None, None, 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, true, Hash40::new("no"), 0.0, 0, false, false, false, true, true, *COLLISION_SITUATION_MASK_A, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_OBJECT);
	ATTACK(fighter, 0, 1, Hash40::new("top"), 0.0, 361, 100, 10, 0, 8.0, 0.0, 10.0, 16.0, Some(0.0), Some(10.0), Some(44.0), 2.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, true, Hash40::new("no"), 0.0, 0, false, false, false, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_paralyze"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_OBJECT);
	AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
	camera(*MA_MSC_CMD_CAMERA_CAM_RECT, 100, -50, 50, -10);
}
frame(lua_state, 44.0);
if is_excute(fighter) {
	QUAKE(fighter, *CAMERA_QUAKE_KIND_M);
}
frame(lua_state, 45.0);
if is_excute(fighter) {
	AttackModule::clear_all(fighter.module_accessor);
	WorkModule::on_flag(fighter.module_accessor, /*Flag*/ *FIGHTER_PICKEL_STATUS_FINAL_FLAG_ATTACK);
	ATTACK_ABS(fighter, *FIGHTER_PICKEL_ATTACK_ABSOLUTE_KIND_FINAL, 0, 15.0, 30, 120, 100, 0, 0.0, 1.0, *ATTACK_LR_CHECK_POS, 0.0, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_OBJECT);
	AttackModule::set_no_dead_all(fighter.module_accessor, true, true);
	WorkModule::on_flag(fighter.module_accessor, /*Flag*/ *FIGHTER_PICKEL_STATUS_FINAL_FLAG_ABS_HIT);
	ATTACK(fighter, 0, 0, Hash40::new("top"), 15.0, 35, 120, 0, 50, 12.0, 0.0, 10.0, 16.0, Some(0.0), Some(10.0), Some(47.0), 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, Hash40::new("no"), 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_OBJECT);
	AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
}
frame(lua_state, 49.0);
if is_excute(fighter) {
	AttackModule::clear_all(fighter.module_accessor);
}
frame(lua_state, 90.0);
if is_excute(fighter) {
	ArticleModule::remove_exist(fighter.module_accessor, *FIGHTER_PICKEL_GENERATE_ARTICLE_PUSHFINAL);
}
}