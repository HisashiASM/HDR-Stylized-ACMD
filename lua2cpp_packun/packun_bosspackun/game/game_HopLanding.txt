#[acmd_script( agent = "packun_bosspackun", script = "game_hoplanding" , category = ACMD_GAME , low_priority)]
unsafe fn game_hoplanding (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_landl_hv"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 1.0);
	WorkModule::is_flag(fighter.module_accessor, *WEAPON_PACKUN_BOSSPACKUN_STATUS_WORK_FLAG_HOP_HIGH);
	if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, true)){;
		if is_excute(fighter) {
			ATTACK(fighter, 4, 1, Hash40::new("top"), 5.0, 60, 100, 130, 0, 6.0, 0.0, 5.0, -15.0, Some(0.0), Some(5.0), Some(-5.0), 1.0, 1.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_POS, false, Hash40::new("no"), 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_BODY);
			ATTACK(fighter, 5, 1, Hash40::new("top"), 5.0, 60, 100, 130, 0, 6.0, 0.0, 5.0, 5.0, Some(0.0), Some(5.0), Some(15.0), 1.0, 1.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_POS, false, Hash40::new("no"), 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_BODY);
			AttackModule::set_final_finish_cut_in(fighter.module_accessor, 4, true, true, -1, false);
			AttackModule::set_final_finish_cut_in(fighter.module_accessor, 5, true, true, -1, false);
		}
	}
	frame(0, 4);
	if is_excute(fighter) {
		WorkModule::on_flag(fighter.module_accessor, /*Flag*/ *WEAPON_PACKUN_BOSSPACKUN_STATUS_WORK_FLAG_HOP_LANDING_START_TURN);
		AttackModule::clear(fighter.module_accessor, /*ID*/ 4);
		AttackModule::clear(fighter.module_accessor, /*ID*/ 5);
	}
}