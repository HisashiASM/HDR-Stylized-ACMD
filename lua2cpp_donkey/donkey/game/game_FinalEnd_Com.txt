#[acmd_script( agent = "donkey", script = "game_finalend_com" , category = ACMD_GAME , low_priority)]
unsafe fn game_finalend_com (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	if is_excute(fighter) {
		CAM_ZOOM_OUT(fighter);
	}
	PostureModule::scale(fighter.module_accessor);
	if(0x120890(298784397, 1.4)){;
		frame(lua_state, 7.0);
		if is_excute(fighter) {
			ATTACK(fighter, 0, 0, Hash40::new("handl"), 14.0, 70, 96, 0, 90, 12.0, 2.0, 0.0, 0.0, None, None, None, 1.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, Hash40::new("no"), 0.0, 0, false, false, false, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_NONE);
			ATTACK(fighter, 1, 0, Hash40::new("arml"), 14.0, 70, 96, 0, 90, 11.0, -2.0, 0.0, 0.0, None, None, None, 1.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, Hash40::new("no"), 0.0, 0, false, false, false, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_NONE);
			ATTACK(fighter, 2, 0, Hash40::new("top"), 14.0, 70, 96, 0, 90, 13.0, 0.0, 11.0, 5.0, None, None, None, 1.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, Hash40::new("no"), 0.0, 0, false, false, false, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_NONE);
			ATTACK(fighter, 3, 0, Hash40::new("top"), 14.0, 70, 96, 0, 90, 15.0, 0.0, 11.0, 25.0, None, None, None, 1.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, Hash40::new("no"), 0.0, 0, false, false, false, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_NONE);
			AttackModule::set_force_reaction(fighter.module_accessor, 0, true, false);
			AttackModule::set_force_reaction(fighter.module_accessor, 1, true, false);
			AttackModule::set_force_reaction(fighter.module_accessor, 2, true, false);
			AttackModule::set_force_reaction(fighter.module_accessor, 3, true, false);
			WorkModule::on_flag(fighter.module_accessor, /*Flag*/ *FIGHTER_DONKEY_STATUS_FINAL_FLAG_ATTACK_END_HIT);
			AttackModule::set_final_finish_cut_in(fighter.module_accessor, 0, true, false, -1, false);
			AttackModule::set_final_finish_cut_in(fighter.module_accessor, 1, true, false, -1, false);
			AttackModule::set_final_finish_cut_in(fighter.module_accessor, 2, true, false, -1, false);
			AttackModule::set_final_finish_cut_in(fighter.module_accessor, 3, true, false, -1, false);
		}
	}
	frame(lua_state, 9.0);
	methodlib::L2CValue::operatorbool()const(is_excute);
	PostureModule::scale(fighter.module_accessor);
	if(0x120890(0, 0.5)){;
		frame(lua_state, 6.0);
		if is_excute(fighter) {
			ATTACK(fighter, 0, 0, Hash40::new("top"), 0.0, 3, 100, 0, 0, 15.0, 0.0, 10.0, 9.0, Some(0.0), Some(10.0), Some(11.0), 1.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, Hash40::new("no"), 0.0, 0, false, false, false, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_NONE);
			methodlib::L2CValue::as_hash()const(0, Hash40::new("top"), 50, 3, 1);
			AttackModule::set_vec_target_pos(fighter.module_accessor);
			AttackModule::set_force_reaction(fighter.module_accessor, 0, true, false);
			WorkModule::on_flag(fighter.module_accessor, /*Flag*/ *FIGHTER_DONKEY_STATUS_FINAL_FLAG_ATTACK_END_HIT);
		}
	}
	frame(lua_state, 7.0);
	if is_excute(fighter) {
		ATTACK(fighter, 0, 0, Hash40::new("handl"), 14.0, 70, 96, 0, 90, 12.0, 2.0, 0.0, 0.0, None, None, None, 1.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, Hash40::new("no"), 0.0, 0, false, false, false, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_NONE);
		ATTACK(fighter, 1, 0, Hash40::new("arml"), 14.0, 70, 96, 0, 90, 11.0, -2.0, 0.0, 0.0, None, None, None, 1.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, Hash40::new("no"), 0.0, 0, false, false, false, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_NONE);
		ATTACK(fighter, 2, 0, Hash40::new("top"), 14.0, 70, 96, 0, 90, 13.0, 0.0, 11.0, 5.0, None, None, None, 1.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, Hash40::new("no"), 0.0, 0, false, false, false, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_NONE);
		ATTACK(fighter, 3, 0, Hash40::new("top"), 14.0, 70, 96, 0, 90, 15.0, 0.0, 11.0, 25.0, None, None, None, 1.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, Hash40::new("no"), 0.0, 0, false, false, false, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_NONE);
		AttackModule::set_force_reaction(fighter.module_accessor, 0, true, false);
		AttackModule::set_force_reaction(fighter.module_accessor, 1, true, false);
		AttackModule::set_force_reaction(fighter.module_accessor, 2, true, false);
		AttackModule::set_force_reaction(fighter.module_accessor, 3, true, false);
		AttackModule::set_final_finish_cut_in(fighter.module_accessor, 0, true, false, -1, false);
		AttackModule::set_final_finish_cut_in(fighter.module_accessor, 1, true, false, -1, false);
		AttackModule::set_final_finish_cut_in(fighter.module_accessor, 2, true, false, -1, false);
		AttackModule::set_final_finish_cut_in(fighter.module_accessor, 3, true, false, -1, false);
	}
	frame(lua_state, 9.0);
	if is_excute(fighter) {
	}
	else{;
	frame(lua_state, 7.0);
	if is_excute(fighter) {
		ATTACK(fighter, 0, 0, Hash40::new("handl"), 14.0, 70, 96, 0, 90, 12.0, 2.0, 0.0, 0.0, None, None, None, 1.6, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, Hash40::new("no"), 0.0, 0, false, false, false, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_NONE);
		ATTACK(fighter, 1, 0, Hash40::new("arml"), 14.0, 70, 96, 0, 90, 11.0, -2.0, 0.0, 0.0, None, None, None, 1.6, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, Hash40::new("no"), 0.0, 0, false, false, false, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_NONE);
		ATTACK(fighter, 2, 0, Hash40::new("top"), 14.0, 70, 96, 0, 90, 13.0, 0.0, 11.0, 5.0, None, None, None, 1.6, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, Hash40::new("no"), 0.0, 0, false, false, false, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_NONE);
		ATTACK(fighter, 3, 0, Hash40::new("top"), 14.0, 70, 96, 0, 90, 15.0, 0.0, 11.0, 25.0, None, None, None, 1.6, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, Hash40::new("no"), 0.0, 0, false, false, false, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_NONE);
		AttackModule::set_force_reaction(fighter.module_accessor, 0, true, false);
		AttackModule::set_force_reaction(fighter.module_accessor, 1, true, false);
		AttackModule::set_force_reaction(fighter.module_accessor, 2, true, false);
		AttackModule::set_force_reaction(fighter.module_accessor, 3, true, false);
		WorkModule::on_flag(fighter.module_accessor, /*Flag*/ *FIGHTER_DONKEY_STATUS_FINAL_FLAG_ATTACK_END_HIT);
		AttackModule::set_final_finish_cut_in(fighter.module_accessor, 0, true, false, -1, false);
		AttackModule::set_final_finish_cut_in(fighter.module_accessor, 1, true, false, -1, false);
		AttackModule::set_final_finish_cut_in(fighter.module_accessor, 2, true, false, -1, false);
		AttackModule::set_final_finish_cut_in(fighter.module_accessor, 3, true, false, -1, false);
		CHECK_VALID_FINAL_START_CAMERA(fighter, 0, 7, 40, 0, 0, 0);
	}
}
WorkModule::is_flag(fighter.module_accessor, *FIGHTER_INSTANCE_WORK_ID_FLAG_DISABLE_FINAL_START_CAMERA);
if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, false)){;
	WorkModule::is_flag(fighter.module_accessor, *FIGHTER_DONKEY_STATUS_FINAL_FLAG_HIT_ALL_OPPONENT);
	if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, true)){;
		get_value_float(*SO_VAR_FLOAT_LR);
		if(0x120890(1285780, 0)){;
			if is_excute(fighter) {
				PostureModule::scale(fighter.module_accessor, 1, 0);
				0x120890(0, 1.5);
				CAM_ZOOM_IN_arg5(0, 0);
				camera(*MA_MSC_CMD_CAMERA_CAM_OFFSET, -20, 5);
			}
			else{;
			if is_excute(fighter) {
				PostureModule::scale(fighter.module_accessor, 1, 0);
				0x120890(0, 1.5);
				CAM_ZOOM_IN_arg5(0, 0);
				camera(*MA_MSC_CMD_CAMERA_CAM_OFFSET, 20, 5);
			}
		}
	}
}
}
frame(lua_state, 9.0);
if is_excute(fighter) {
CAM_ZOOM_OUT(fighter);
AttackModule::clear_all(fighter.module_accessor);
}
}