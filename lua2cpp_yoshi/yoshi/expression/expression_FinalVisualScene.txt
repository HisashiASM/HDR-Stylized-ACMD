#[acmd_script( agent = "yoshi", script = "expression_finalvisualscene" , category = ACMD_EXPRESSION , low_priority)]
unsafe fn expression_finalvisualscene (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	frame(lua_state, 1.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_erase_sp"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
		RUMBLE_FINAL_TARGET(fighter, Hash40::new("rbkind_erase_sp"), 0);
	}
	frame(lua_state, 20.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_down"), 0, true);
		ControlModule::set_rumble(fighter.module_accessor);
		RUMBLE_FINAL_TARGET(fighter, Hash40::new("rbkind_down"), 0);
	}
	frame(lua_state, 30.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_31_cypher"), 0, true);
		ControlModule::set_rumble(fighter.module_accessor);
		RUMBLE_FINAL_TARGET(fighter, Hash40::new("rbkind_31_cypher"), 0);
	}
	frame(lua_state, 85.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_erase"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
		RUMBLE_FINAL_TARGET(fighter, Hash40::new("rbkind_erase"), 0);
	}
	frame(lua_state, 86.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_elecattack"), 0, true);
		ControlModule::set_rumble(fighter.module_accessor);
		RUMBLE_FINAL_TARGET(fighter, Hash40::new("rbkind_elecattack"), 0);
	}
	frame(lua_state, 139.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_erase"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
		RUMBLE_FINAL_TARGET(fighter, Hash40::new("rbkind_erase"), 0);
	}
	frame(lua_state, 140.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_spinattack"), 0, true);
		ControlModule::set_rumble(fighter.module_accessor);
		RUMBLE_FINAL_TARGET(fighter, Hash40::new("rbkind_spinattack"), 0);
	}
	frame(lua_state, 172.0);
	if is_excute(fighter) {
		RUMBLE_FINAL_TARGET(fighter, Hash40::new("rbkind_damage_visual"), 80);
	}
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_attackm"), 9, true);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	wait(lua_state, 10.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_attackm"), 9, true);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	wait(lua_state, 10.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_attackm"), 9, true);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	wait(lua_state, 10.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_attackl"), 9, true);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	wait(lua_state, 10.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_attackl"), 9, true);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	wait(lua_state, 10.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_attackl"), 9, true);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	wait(lua_state, 10.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_attackl"), 9, true);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	wait(lua_state, 10.0);
}