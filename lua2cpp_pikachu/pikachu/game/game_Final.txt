#[acmd_script( agent = "pikachu", script = "game_final" , category = ACMD_GAME , low_priority)]
unsafe fn game_final (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	if is_excute(fighter) {
		WHOLE_HIT(fighter, *HIT_STATUS_XLU);
		CHECK_VALID_FINAL_START_CAMERA(fighter, 0, 7, 20, 11, 0, 0);
		SLOW_OPPONENT(fighter, 9, 45);
	}
	WorkModule::is_flag(fighter.module_accessor, *FIGHTER_INSTANCE_WORK_ID_FLAG_DISABLE_FINAL_START_CAMERA);
	if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, false)){;
		frame(lua_state, 10.0);
		if is_excute(fighter) {
			FT_SET_FINAL_FEAR_FACE(fighter, 60);
			REQ_FINAL_START_CAMERA_arg3(Hash40::new("d04final.nuanmb"), false, false);
			FT_START_CUTIN(fighter);
			ATTACK(fighter, 0, 0, Hash40::new("top"), 0.3, 70, 70, 20, 0, 5.5, 0.0, 0.0, 5.0, Some(0.0), Some(0.0), Some(-5.0), 0.2, 0.2, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, Hash40::new("no"), 0.0, 6, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_elec"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_ELEC, *ATTACK_REGION_NONE);
			ATTACK(fighter, 1, 0, Hash40::new("top"), 0.3, 40, 70, 20, 0, 5.5, 0.0, 10.0, 5.0, Some(0.0), Some(10.0), Some(-5.0), 0.2, 0.2, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, Hash40::new("no"), 0.0, 6, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_elec"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_ELEC, *ATTACK_REGION_NONE);
			AttackModule::set_final_finish_cut_in(fighter.module_accessor, 0, true, false, -1, false);
			AttackModule::set_final_finish_cut_in(fighter.module_accessor, 1, true, false, -1, false);
		}
		else{;
		if is_excute(fighter) {
			PostureModule::scale(fighter.module_accessor, 3, 0);
			0x1010a0(-501063100, 2.2);
			CAM_ZOOM_IN_arg5(0, 0);
			FT_START_CUTIN(fighter);
			ATTACK(fighter, 0, 0, Hash40::new("top"), 0.3, 70, 70, 20, 0, 5.5, 0.0, 0.0, 5.0, Some(0.0), Some(10.0), Some(-5.0), 0.2, 0.2, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, Hash40::new("no"), 0.0, 6, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_elec"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_ELEC, *ATTACK_REGION_NONE);
			ATTACK(fighter, 1, 0, Hash40::new("top"), 0.3, 40, 70, 20, 0, 5.5, 0.0, 10.0, 5.0, Some(0.0), Some(10.0), Some(-5.0), 0.2, 0.2, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, Hash40::new("no"), 0.0, 6, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_elec"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_ELEC, *ATTACK_REGION_NONE);
			AttackModule::set_final_finish_cut_in(fighter.module_accessor, 0, true, false, -1, false);
			AttackModule::set_final_finish_cut_in(fighter.module_accessor, 1, true, false, -1, false);
		}
	}
}
frame(lua_state, 35.0);
WorkModule::is_flag(fighter.module_accessor, *FIGHTER_INSTANCE_WORK_ID_FLAG_DISABLE_FINAL_START_CAMERA);
methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, false);
if is_excute(fighter) {
	CAM_ZOOM_OUT(fighter);
}
frame(lua_state, 47.0);
if is_excute(fighter) {
	ATTACK(fighter, 0, 0, Hash40::new("top"), 1.0, 50, 100, 75, 0, 5.5, 0.0, 0.0, 5.0, Some(0.0), Some(0.0), Some(-5.0), 0.2, 0.2, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, Hash40::new("no"), 0.0, 6, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_elec"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_ELEC, *ATTACK_REGION_NONE);
	ATTACK(fighter, 1, 0, Hash40::new("top"), 1.0, 30, 100, 30, 0, 5.5, 0.0, 10.0, 5.0, Some(0.0), Some(10.0), Some(-5.0), 0.2, 0.2, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, Hash40::new("no"), 0.0, 6, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_elec"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_ELEC, *ATTACK_REGION_NONE);
	AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
}
frame(lua_state, 50.0);
if is_excute(fighter) {
	AttackModule::clear_all(fighter.module_accessor);
}
}