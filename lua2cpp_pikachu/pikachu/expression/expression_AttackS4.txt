#[acmd_script( agent = "pikachu", script = "expression_attacks4" , category = ACMD_EXPRESSION , low_priority)]
unsafe fn expression_attacks4 (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	if is_excute(fighter) {
		slope(*MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_NONE);
	}
	frame(lua_state, 10.0);
	execute(10);
	WorkModule::is_flag(fighter.module_accessor, *FIGHTER_STATUS_ATTACK_FLAG_SMASH_SMASH_HOLD_TO_ATTACK);
	if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, true)){;
		if is_excute(fighter) {
			slope(*MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_NONE, 4);
			QUAKE(fighter, *CAMERA_QUAKE_KIND_S);
		}
	}
	frame(lua_state, 15.0);
	if is_excute(fighter) {
		RUMBLE_HIT(fighter, Hash40::new("rbkind_08_attack_s4"), 0);
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohit_attacks"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 16.0);
	for(14 Iterations){;
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_loopattack"), 0, true);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	wait(lua_state, 1.0);
}
frame(lua_state, 30.0);
if is_excute(fighter) {
	methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_erase"), 0, false);
	ControlModule::set_rumble(fighter.module_accessor);
}
frame(lua_state, 48.0);
if is_excute(fighter) {
	slope(*MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_NONE, 10);
}
}