#[acmd_script( agent = "ryu", script = "game_finalhit" , category = ACMD_GAME , low_priority)]
unsafe fn game_finalhit (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	frame(lua_state, 1.0);
	if is_excute(fighter) {
		SlowModule::set_whole(fighter.module_accessor, 2, 0);
	}
	frame(lua_state, 4.0);
	if is_excute(fighter) {
		ATTACK(fighter, 0, 0, Hash40::new("top"), 10.0, 80, 95, 0, 50, 8.0, 0.0, 12.0, 10.0, None, None, None, 2.6, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, Hash40::new("no"), 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, COLLISION_SOUND_ATTR_RYU_FINAL02, *ATTACK_REGION_PUNCH);
		AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
		AttackModule::set_damage_shake_scale(fighter.module_accessor, 0.18);
		CAM_ZOOM_OUT(fighter);
		CAM_ZOOM_IN_arg5(3, 0, 1.9, 0, 0);
		WorkModule::set_int(fighter.module_accessor, FIGHTER_RYU_FINAL_CAMERA_OFFSET_2, *FIGHTER_RYU_STATUS_WORK_ID_FINAL_INT_CAMERA_OFFSET_TYPE);
		WorkModule::on_flag(fighter.module_accessor, /*Flag*/ *FIGHTER_RYU_STATUS_WORK_ID_FINAL_FLAG_CAMERA_OFFSET);
	}
	wait(lua_state, 1.0);
	if is_excute(fighter) {
		AttackModule::clear_all(fighter.module_accessor);
	}
	frame(lua_state, 7.0);
	if is_excute(fighter) {
		WorkModule::on_flag(fighter.module_accessor, /*Flag*/ *FIGHTER_RYU_STATUS_WORK_ID_FINAL_FLAG_REMOVE_FINAL_AURA);
		CAM_ZOOM_OUT(fighter);
		CAM_ZOOM_IN_arg5(5, 0, 2.1, 0, 0);
	}
	frame(lua_state, 9.0);
	if is_excute(fighter) {
		WorkModule::on_flag(fighter.module_accessor, /*Flag*/ *FIGHTER_RYU_STATUS_WORK_ID_FINAL_FLAG_ATTACK_END_SET_PARAM);
	}
	frame(lua_state, 10.0);
	if is_excute(fighter) {
		WorkModule::on_flag(fighter.module_accessor, /*Flag*/ *FIGHTER_RYU_STATUS_WORK_ID_FINAL_FLAG_ATTACK_END);
		ATTACK(fighter, 0, 0, Hash40::new("top"), 20.0, 80, 90, 0, 60, 10.0, 0.0, 20.0, 8.0, None, None, None, 2.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, Hash40::new("no"), 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, COLLISION_SOUND_ATTR_RYU_FINAL03, *ATTACK_REGION_PUNCH);
		AttackModule::set_force_reaction(fighter.module_accessor, 0, true, false);
		AttackModule::set_damage_shake_scale(fighter.module_accessor, 0.18);
		WorkModule::set_int(fighter.module_accessor, FIGHTER_RYU_FINAL_CAMERA_OFFSET_3, *FIGHTER_RYU_STATUS_WORK_ID_FINAL_INT_CAMERA_OFFSET_TYPE);
		WorkModule::on_flag(fighter.module_accessor, /*Flag*/ *FIGHTER_RYU_STATUS_WORK_ID_FINAL_FLAG_CAMERA_OFFSET);
	}
	wait(lua_state, 1.0);
	if is_excute(fighter) {
		AttackModule::clear_all(fighter.module_accessor);
		SlowModule::clear_whole(fighter.module_accessor);
	}
	frame(lua_state, 18.0);
	if is_excute(fighter) {
		CAM_ZOOM_OUT(fighter);
		WorkModule::set_int(fighter.module_accessor, *FIGHTER_RYU_FINAL_CAMERA_OFFSET_RETURN, *FIGHTER_RYU_STATUS_WORK_ID_FINAL_INT_CAMERA_OFFSET_TYPE);
		WorkModule::on_flag(fighter.module_accessor, /*Flag*/ *FIGHTER_RYU_STATUS_WORK_ID_FINAL_FLAG_CAMERA_OFFSET);
	}
}