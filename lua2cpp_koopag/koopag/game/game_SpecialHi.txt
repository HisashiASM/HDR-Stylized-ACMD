#[acmd_script( agent = "koopag", script = "game_specialhi" , category = ACMD_GAME , low_priority)]
unsafe fn game_specialhi (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	frame(lua_state, 1.0);
	if is_excute(fighter) {
		KineticModule::unable_energy(fighter.module_accessor, *FIGHTER_KINETIC_ENERGY_ID_CONTROL);
		KineticModule::clear_speed_all(fighter.module_accessor);
	}
	FT_MOTION_RATE(fighter, 8);
	if is_excute(fighter) {
		FighterAreaModuleImpl::enable_fix_jostle_area(fighter.module_accessor, 20, 20);
	}
	frame(lua_state, 2.0);
	FT_MOTION_RATE(fighter, 20);
	frame(lua_state, 3.0);
	FT_MOTION_RATE(fighter, 1.2);
	if is_excute(fighter) {
		KineticModule::enable_energy(fighter.module_accessor, *FIGHTER_KINETIC_ENERGY_ID_CONTROL);
	}
	frame(lua_state, 6.0);
	if is_excute(fighter) {
		WorkModule::on_flag(fighter.module_accessor, /*Flag*/ FIGHTER_KOOPA_STATUS_SPECIAL_HI_FLAG4);
		ATTACK(fighter, 0, 0, Hash40::new("top"), 2.0, 180, 100, 50, 0, 14.0, 0.0, 14.0, -8.0, None, None, None, 0.7, 1.5, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, 3, 0.0, 5, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_CUTUP, *ATTACK_REGION_NONE);
		ATTACK(fighter, 1, 0, Hash40::new("top"), 2.0, 180, 100, 50, 0, 14.0, 0.0, 14.0, 12.0, None, None, None, 0.7, 1.5, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, 3, 0.0, 5, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_CUTUP, *ATTACK_REGION_NONE);
	}
	wait(lua_state, 1.0);
	if is_excute(fighter) {
		WorkModule::on_flag(fighter.module_accessor, /*Flag*/ FIGHTER_KOOPA_STATUS_SPECIAL_HI_FLAG3);
	}
	if is_excute(fighter) {
		HIT_NODE(fighter, Hash40::new("hip"), *HIT_STATUS_XLU);
		HIT_NODE(fighter, Hash40::new("mouth1"), *HIT_STATUS_XLU);
		HIT_NODE(fighter, Hash40::new("head"), *HIT_STATUS_XLU);
		HIT_NODE(fighter, Hash40::new("armr"), *HIT_STATUS_XLU);
		HIT_NODE(fighter, Hash40::new("arml"), *HIT_STATUS_XLU);
		HIT_NODE(fighter, Hash40::new("kneer"), *HIT_STATUS_XLU);
		HIT_NODE(fighter, Hash40::new("kneel"), *HIT_STATUS_XLU);
		HIT_NODE(fighter, Hash40::new("toer"), *HIT_STATUS_XLU);
		HIT_NODE(fighter, Hash40::new("toel"), *HIT_STATUS_XLU);
		HIT_NODE(fighter, Hash40::new("tail3"), *HIT_STATUS_XLU);
	}
	if is_excute(fighter) {
		KineticModule::set_consider_ground_friction(fighter.module_accessor, false, *KINETIC_ENERGY_RESERVE_ATTRIBUTE_MAIN);
	}
	wait(lua_state, 1.0);
	if is_excute(fighter) {
		WorkModule::on_flag(fighter.module_accessor, /*Flag*/ FIGHTER_KOOPA_STATUS_SPECIAL_HI_FLAG2);
	}
	if is_excute(fighter) {
		HIT_NODE(fighter, Hash40::new("hip"), *HIT_STATUS_XLU);
		HIT_NODE(fighter, Hash40::new("mouth1"), *HIT_STATUS_XLU);
		HIT_NODE(fighter, Hash40::new("head"), *HIT_STATUS_XLU);
		HIT_NODE(fighter, Hash40::new("armr"), *HIT_STATUS_XLU);
		HIT_NODE(fighter, Hash40::new("arml"), *HIT_STATUS_XLU);
		HIT_NODE(fighter, Hash40::new("kneer"), *HIT_STATUS_XLU);
		HIT_NODE(fighter, Hash40::new("kneel"), *HIT_STATUS_XLU);
		HIT_NODE(fighter, Hash40::new("toer"), *HIT_STATUS_XLU);
		HIT_NODE(fighter, Hash40::new("toel"), *HIT_STATUS_XLU);
		HIT_NODE(fighter, Hash40::new("tail3"), *HIT_STATUS_XLU);
	}
	if is_excute(fighter) {
		KineticModule::set_consider_ground_friction(fighter.module_accessor, false, *KINETIC_ENERGY_RESERVE_ATTRIBUTE_MAIN);
	}
	for(4 Iterations){;
	if is_excute(fighter) {
		ATTACK(fighter, 0, 0, Hash40::new("top"), 2.0, 180, 100, 50, 0, 14.0, 0.0, 14.0, -8.0, None, None, None, 0.7, 1.5, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, 3, 0.0, 5, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_CUTUP, *ATTACK_REGION_NONE);
		ATTACK(fighter, 1, 0, Hash40::new("top"), 2.0, 180, 100, 50, 0, 14.0, 0.0, 14.0, 12.0, None, None, None, 0.7, 1.5, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, 3, 0.0, 5, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_CUTUP, *ATTACK_REGION_NONE);
	}
	wait(lua_state, 4.0);
}
for(4 Iterations){;
if is_excute(fighter) {
	ATTACK(fighter, 0, 0, Hash40::new("top"), 10.0, 80, 65, 0, 80, 16.0, 0.0, 14.0, -10.0, None, None, None, 1.5, 1.5, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_CUTUP, *ATTACK_REGION_NONE);
	ATTACK(fighter, 1, 0, Hash40::new("top"), 10.0, 80, 65, 0, 80, 16.0, 0.0, 14.0, 14.0, None, None, None, 1.5, 1.5, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_CUTUP, *ATTACK_REGION_NONE);
}
wait(lua_state, 4.0);
}
if is_excute(fighter) {
AttackModule::clear_all(fighter.module_accessor);
}
frame(lua_state, 51.0);
if is_excute(fighter) {
WorkModule::off_flag(fighter.module_accessor, /*Flag*/ FIGHTER_KOOPA_STATUS_SPECIAL_HI_FLAG4);
WorkModule::off_flag(fighter.module_accessor, /*Flag*/ FIGHTER_KOOPA_STATUS_SPECIAL_HI_FLAG3);
HitModule::set_status_all(fighter.module_accessor, *HIT_STATUS_NORMAL);
KineticModule::set_consider_ground_friction(fighter.module_accessor, true, *KINETIC_ENERGY_RESERVE_ATTRIBUTE_MAIN);
WorkModule::on_flag(fighter.module_accessor, /*Flag*/ FIGHTER_KOOPA_STATUS_SPECIAL_HI_FLAG1);
}
FT_MOTION_RATE(fighter, 2);
}