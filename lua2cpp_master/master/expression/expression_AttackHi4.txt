#[acmd_script( agent = "master", script = "expression_attackhi4" , category = ACMD_EXPRESSION , low_priority)]
unsafe fn expression_attackhi4 (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	if is_excute(fighter) {
		slope(*MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_LR);
		ItemModule::set_have_item_visibility(fighter.module_accessor, false);
		methodlib::L2CValue::as_hash()const(Hash40::new("sword1"), *ATTACK_DIRECTION_X, *ATTACK_DIRECTION_Y, *ATTACK_DIRECTION_Z);
		AttackModule::set_attack_reference_joint_id(fighter.module_accessor);
		WorkModule::on_flag(fighter.module_accessor, /*Flag*/ *FIGHTER_MASTER_INSTANCE_WORK_ID_FLAG_SWORD_OFF_EFFECT_AURA);
	}
	frame(lua_state, 7.0);
	if is_excute(fighter) {
		WorkModule::on_flag(fighter.module_accessor, /*Flag*/ *FIGHTER_STATUS_ATTACK_FLAG_START_SMASH_HOLD);
	}
	execute(7);
	if is_excute(fighter) {
		slope(*MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_LR);
		ItemModule::set_have_item_visibility(fighter.module_accessor, false);
	}
	WorkModule::is_flag(fighter.module_accessor, *FIGHTER_STATUS_ATTACK_FLAG_SMASH_SMASH_HOLD_TO_ATTACK);
	if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, true)){;
		if is_excute(fighter) {
			WorkModule::on_flag(fighter.module_accessor, /*Flag*/ *FIGHTER_MASTER_INSTANCE_WORK_ID_FLAG_SWORD_OFF_EFFECT_AURA);
		}
	}
	frame(lua_state, 11.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_attacks"), 2, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 13.0);
	if is_excute(fighter) {
		RUMBLE_HIT(fighter, Hash40::new("rbkind_pierces"), 0);
	}
	frame(lua_state, 14.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohits"), 4, true);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	wait(lua_state, 6.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohits"), 4, true);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	wait(lua_state, 6.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohits"), 4, true);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	wait(lua_state, 6.0);
}