#[acmd_script( agent = "master", script = "expression_specialairlw" , category = ACMD_EXPRESSION , low_priority)]
unsafe fn expression_specialairlw (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	if is_excute(fighter) {
		slope(*MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_LR);
		ItemModule::set_have_item_visibility(fighter.module_accessor, false);
		WorkModule::on_flag(fighter.module_accessor, /*Flag*/ *FIGHTER_MASTER_INSTANCE_WORK_ID_FLAG_SWORD_OFF_EFFECT_AURA);
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_75_hold_largestart"), 18, true);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 19.0);
	for(7 Iterations){;
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_75_hold_large"), 3, true);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	wait(lua_state, 3.0);
}
frame(lua_state, 60.0);
if is_excute(fighter) {
	methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohit_attacks"), 0, false);
	ControlModule::set_rumble(fighter.module_accessor);
}
frame(lua_state, 62.0);
if is_excute(fighter) {
	RUMBLE_HIT(fighter, Hash40::new("rbkind_attackll"), 0);
}
frame(lua_state, 67.0);
if is_excute(fighter) {
	QUAKE(fighter, *CAMERA_QUAKE_KIND_S);
}
frame(lua_state, 118.0);
if is_excute(fighter) {
	WorkModule::on_flag(fighter.module_accessor, /*Flag*/ *FIGHTER_MASTER_INSTANCE_WORK_ID_FLAG_SWORD_REQ_EFFECT_AURA);
}
}