#[acmd_script( agent = "samus", script = "expression_catch" , category = ACMD_EXPRESSION , low_priority)]
unsafe fn expression_catch (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	if is_excute(fighter) {
		slope(*MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_LR);
		VisibilityModule::set_int64(fighter.module_accessor, Hash40::new("body"), Hash40::new("body_hide_gun"));
		ArticleModule::remove_exist(fighter.module_accessor, *FIGHTER_SAMUS_GENERATE_ARTICLE_GUN);
		ArticleModule::generate_article(fighter.module_accessor, *FIGHTER_SAMUS_GENERATE_ARTICLE_GUN, true);
		methodlib::L2CValue::as_hash()const(*FIGHTER_SAMUS_GENERATE_ARTICLE_GUN, Hash40::new("catch"));
		ArticleModule::change_motion(fighter.module_accessor);
		ArticleModule::generate_article(fighter.module_accessor, *FIGHTER_SAMUS_GENERATE_ARTICLE_GBEAM);
		methodlib::L2CValue::as_hash()const(*FIGHTER_SAMUS_GENERATE_ARTICLE_GBEAM, Hash40::new("catch"));
		ArticleModule::change_motion(fighter.module_accessor);
		ArticleModule::set_visibility_whole(fighter.module_accessor, *FIGHTER_SAMUS_GENERATE_ARTICLE_GBEAM, false);
	}
	frame(lua_state, 8.0);
	if is_excute(fighter) {
		ArticleModule::set_visibility_whole(fighter.module_accessor, *FIGHTER_SAMUS_GENERATE_ARTICLE_GBEAM, true);
	}
	frame(lua_state, 12.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_elecattacks"), 10, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 23.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_elecattacks"), 19, true);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 47.0);
	if is_excute(fighter) {
		ArticleModule::remove_exist(fighter.module_accessor, *FIGHTER_SAMUS_GENERATE_ARTICLE_GBEAM);
	}
	frame(lua_state, 80.0);
	if is_excute(fighter) {
		ArticleModule::remove_exist(fighter.module_accessor, *FIGHTER_SAMUS_GENERATE_ARTICLE_GUN);
		VisibilityModule::set_int64(fighter.module_accessor, Hash40::new("body"), Hash40::new("body_normal"));
	}
}