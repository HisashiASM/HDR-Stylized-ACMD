#[acmd_script( agent = "bayonetta", script = "expression_attacklw4" , category = ACMD_EXPRESSION , low_priority)]
unsafe fn expression_attacklw4 (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	if is_excute(fighter) {
		notify_event_msc_cmd(0x25fd66ecef, 18, -1, 0);
		slope(*MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_LR);
	}
	frame(lua_state, 3.0);
	if is_excute(fighter) {
		slope(*MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_L);
	}
	frame(lua_state, 9.0);
	execute(9);
	WorkModule::is_flag(fighter.module_accessor, *FIGHTER_STATUS_ATTACK_FLAG_SMASH_SMASH_HOLD_TO_ATTACK);
	if(0x1cb400(false, true)){;
		if is_excute(fighter) {
			slope(*MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_L);
		}
	}
	frame(lua_state, 19.0);
	if is_excute(fighter) {
		slope(*MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_LR);
	}
	frame(lua_state, 20.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_landl_hv"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 25.0);
	if is_excute(fighter) {
		QUAKE(fighter, *CAMERA_QUAKE_KIND_M);
	}
	frame(lua_state, 68.0);
	if is_excute(fighter) {
		notify_event_msc_cmd(0x25fd66ecef, 30, 0, 1);
	}
}