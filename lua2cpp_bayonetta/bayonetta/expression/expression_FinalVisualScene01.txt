#[acmd_script( agent = "bayonetta", script = "expression_finalvisualscene01" , category = ACMD_EXPRESSION , low_priority)]
unsafe fn expression_finalvisualscene01 (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	if is_excute(fighter) {
		notify_event_msc_cmd(0x25fd66ecef, 0, 0, 1);
		VisibilityModule::set_int64(fighter.module_accessor, Hash40::new("gun_hand"), Hash40::new("gun_hand_hide_all"));
	}
	frame(lua_state, 1.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_erase_sp"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
		RUMBLE_FINAL_TARGET(fighter, Hash40::new("rbkind_erase_sp"), 0);
	}
	frame(lua_state, 16.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_impact"), 12, true);
		ControlModule::set_rumble(fighter.module_accessor);
		RUMBLE_FINAL_TARGET(fighter, Hash40::new("rbkind_impact"), 12);
	}
	frame(lua_state, 20.0);
	if is_excute(fighter) {
		notify_event_msc_cmd(0x25fd66ecef, 18, -1, 0);
	}
	frame(lua_state, 32.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_loopattack"), 0, true);
		ControlModule::set_rumble(fighter.module_accessor);
		RUMBLE_FINAL_TARGET(fighter, Hash40::new("rbkind_loopattack"), 0);
	}
	frame(lua_state, 85.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_erase"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
		RUMBLE_FINAL_TARGET(fighter, Hash40::new("rbkind_erase"), 0);
	}
	frame(lua_state, 105.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_attackl"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 135.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_attackl"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 161.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_attackl"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 192.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_attack_critical"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 248.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_spinattack"), 30, true);
		ControlModule::set_rumble(fighter.module_accessor);
		RUMBLE_FINAL_TARGET(fighter, Hash40::new("rbkind_spinattack"), 30);
	}
}