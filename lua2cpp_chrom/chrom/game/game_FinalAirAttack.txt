#[acmd_script( agent = "chrom", script = "game_finalairattack" , category = ACMD_GAME , low_priority)]
unsafe fn game_finalairattack (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	if is_excute(fighter) {
		WHOLE_HIT(fighter, *HIT_STATUS_XLU);
		CAM_ZOOM_OUT(fighter);
		FT_REMOVE_FINAL_AURA(fighter, false);
	}
	WorkModule::is_flag(fighter.module_accessor, *FIGHTER_ROY_STATUS_FINAL_FLAG_HIT_ALL_OPPONENT);
	if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, true)){;
		get_value_float(*SO_VAR_FLOAT_LR);
		if(0x12bc40(0, 0)){;
			if is_excute(fighter) {
				CAM_ZOOM_IN_arg5(2, 0, 1.6, 0, 0);
				camera(*MA_MSC_CMD_CAMERA_CAM_OFFSET, -5, 5);
			}
			else{;
			if is_excute(fighter) {
				CAM_ZOOM_IN_arg5(2, 0, 1.6, 0, 0);
				camera(*MA_MSC_CMD_CAMERA_CAM_OFFSET, 5, 5);
			}
		}
	}
}
frame(lua_state, 3.0);
if is_excute(fighter) {
	ATTACK(fighter, *FIGHTER_ROY_ATTACK_GROUP_KIND_FINAL_CHROM, 0, Hash40::new("top"), 10.0, 361, 40, 0, 8, 16.0, 0.0, 12.0, 8.0, Some(0.0), Some(18.0), Some(8.0), 0.0, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, Hash40::new("no"), 0.0, 0, false, false, false, false, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_CUTUP, *ATTACK_REGION_NONE);
	AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
}
wait(lua_state, 5.0);
if is_excute(fighter) {
	AttackModule::clear_all(fighter.module_accessor);
}
frame(lua_state, 14.0);
if is_excute(fighter) {
	CAM_ZOOM_OUT(fighter);
}
frame(lua_state, 50.0);
if is_excute(fighter) {
	CHECK_VALID_FINAL_START_CAMERA(fighter, 0, 5, 100, 0, 0, 0);
}
WorkModule::is_flag(fighter.module_accessor, *FIGHTER_ROY_STATUS_FINAL_FLAG_HIT_ALL_OPPONENT);
if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, true)){;
	WorkModule::is_flag(fighter.module_accessor, *FIGHTER_INSTANCE_WORK_ID_FLAG_DISABLE_FINAL_START_CAMERA);
	if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, false)){;
		if is_excute(fighter) {
			REQ_FINAL_START_CAMERA(fighter, Hash40::new("d04finalattack.nuanmb"), false);
		}
	}
}
frame(lua_state, 134.0);
if is_excute(fighter) {
	ATTACK_ABS(fighter, *FIGHTER_ATTACK_ABSOLUTE_KIND_CHROM_FINAL, 0, 36.0, 40, 55, 0, 70, 0.1, 1.0, *ATTACK_LR_CHECK_F, 0.0, true, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_CUTUP, *ATTACK_REGION_NONE);
	WorkModule::on_flag(fighter.module_accessor, /*Flag*/ *FIGHTER_ROY_STATUS_FINAL_FLAG_FINISH_ABS_HIT);
	AttackModule::set_final_finish_cut_in(fighter.module_accessor, 0, true, false, -1, true);
}
frame(lua_state, 135.0);
if is_excute(fighter) {
	ATTACK(fighter, *FIGHTER_ROY_ATTACK_GROUP_KIND_FINAL_FINISH_CHROM, 0, Hash40::new("top"), 36.0, 40, 50, 0, 70, 15.0, 0.0, 10.5, -17.0, Some(0.0), Some(10.5), Some(2.0), 0.1, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, Hash40::new("no"), 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_CUTUP, *ATTACK_REGION_NONE);
	AttackModule::set_force_reaction(fighter.module_accessor, *FIGHTER_ROY_ATTACK_GROUP_KIND_FINAL_FINISH_CHROM, true, false);
	AttackModule::set_final_finish_cut_in(fighter.module_accessor, *FIGHTER_ROY_ATTACK_GROUP_KIND_FINAL_FINISH_CHROM, true, false, -1, false);
}
frame(lua_state, 137.0);
if is_excute(fighter) {
	AttackModule::clear_all(fighter.module_accessor);
}
}