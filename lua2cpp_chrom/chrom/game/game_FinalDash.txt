#[acmd_script( agent = "chrom", script = "game_finaldash" , category = ACMD_GAME , low_priority)]
unsafe fn game_finaldash (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	if is_excute(fighter) {
		WHOLE_HIT(fighter, *HIT_STATUS_XLU);
	}
	PostureModule::scale(fighter.module_accessor);
	if(0x12bc40(1608592093, 1.4)){;
		if is_excute(fighter) {
			SEARCH(fighter, 0, 0, Hash40::new("top"), 9.0, 0.0, 7.0, 6.5, 0.0, 7.0, 8.0, *COLLISION_KIND_MASK_HIT, *HIT_STATUS_MASK_NORMAL, 1, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false);
			ATTACK(fighter, 0, 0, Hash40::new("top"), 1.0, 361, 100, 20, 0, 9.0, 0.0, 7.0, 6.5, Some(0.0), Some(7.0), Some(8.0), 1.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, Hash40::new("no"), 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_NONE);
		}
		else{;
		PostureModule::scale(fighter.module_accessor);
		if(0x12bc40(1608592093, 0.5)){;
			if is_excute(fighter) {
				SEARCH(fighter, 0, 0, Hash40::new("top"), 9.0, 0.0, 7.0, 6.5, 0.0, 7.0, 8.0, *COLLISION_KIND_MASK_HIT, *HIT_STATUS_MASK_NORMAL, 1, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false);
				ATTACK(fighter, 0, 0, Hash40::new("top"), 1.0, 361, 100, 20, 0, 9.0, 0.0, 7.0, 6.5, Some(0.0), Some(7.0), Some(8.0), 1.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, Hash40::new("no"), 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_NONE);
				methodlib::L2CValue::as_hash()const(0, Hash40::new("top"), 13, 3, 2);
				AttackModule::set_vec_target_pos(fighter.module_accessor);
			}
			wait(lua_state, 1.0);
			if is_excute(fighter) {
				SEARCH(fighter, 0, 0, Hash40::new("top"), 9.0, 0.0, 7.0, -7.5, 0.0, 7.0, 8.0, *COLLISION_KIND_MASK_HIT, *HIT_STATUS_MASK_NORMAL, 1, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false);
				ATTACK(fighter, 0, 0, Hash40::new("top"), 1.0, 361, 100, 20, 0, 9.0, 0.0, 7.0, -7.5, Some(0.0), Some(7.0), Some(8.0), 1.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, Hash40::new("no"), 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_NONE);
				methodlib::L2CValue::as_hash()const(0, Hash40::new("top"), 13, 3, 2);
				AttackModule::set_vec_target_pos(fighter.module_accessor);
			}
			else{;
			if is_excute(fighter) {
				SEARCH(fighter, 0, 0, Hash40::new("top"), 9.0, 0.0, 7.0, 6.5, 0.0, 7.0, 8.0, *COLLISION_KIND_MASK_HIT, *HIT_STATUS_MASK_NORMAL, 1, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false);
				ATTACK(fighter, 0, 0, Hash40::new("top"), 1.0, 361, 100, 20, 0, 9.0, 0.0, 7.0, 6.5, Some(0.0), Some(7.0), Some(8.0), 1.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, Hash40::new("no"), 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_NONE);
			}
		}
	}
}
}
if is_excute(fighter) {
AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
}
wait(lua_state, 11.0);
if is_excute(fighter) {
AttackModule::clear_all(fighter.module_accessor);
search(*MA_MSC_CMD_SEARCH_SEARCH_SCH_CLR_ALL);
}
}