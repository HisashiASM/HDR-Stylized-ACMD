#[acmd_script( agent = "krool", script = "expression_specialairnspitf" , category = ACMD_EXPRESSION , low_priority)]
unsafe fn expression_specialairnspitf (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	if is_excute(fighter) {
		slope(*MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_LR);
		ItemModule::set_have_item_visibility(fighter.module_accessor, false);
		VisibilityModule::set_int64(fighter.module_accessor, Hash40::new("crown"), Hash40::new("crown_hide"));
	}
	IS_EXIST_ARTICLE(fighter, *FIGHTER_KROOL_GENERATE_ARTICLE_PIRATEHAT);
	if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, true)){;
		if is_excute(fighter) {
			ArticleModule::set_visibility_whole(fighter.module_accessor, *FIGHTER_KROOL_GENERATE_ARTICLE_PIRATEHAT, true);
		}
	}
	frame(lua_state, 18.0);
	WorkModule::is_flag(fighter.module_accessor, *FIGHTER_KROOL_INSTANCE_WORK_ID_FLAG_SPECIAL_N_SUCTION_IRONBALL);
	if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, true)){;
		if is_excute(fighter) {
			QUAKE(fighter, *CAMERA_QUAKE_KIND_S);
		}
		else{;
		if is_excute(fighter) {
			QUAKE(fighter, *CAMERA_QUAKE_KIND_M);
		}
	}
}
if is_excute(fighter) {
	methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_explosion"), 0, false);
	ControlModule::set_rumble(fighter.module_accessor);
}
frame(lua_state, 54.0);
if is_excute(fighter) {
	VisibilityModule::set_int64(fighter.module_accessor, Hash40::new("crown"), Hash40::new("crown_normal"));
}
IS_EXIST_ARTICLE(fighter, *FIGHTER_KROOL_GENERATE_ARTICLE_PIRATEHAT);
if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, true)){;
	if is_excute(fighter) {
		ArticleModule::set_visibility_whole(fighter.module_accessor, *FIGHTER_KROOL_GENERATE_ARTICLE_PIRATEHAT, false);
	}
}
frame(lua_state, 67.0);
if is_excute(fighter) {
	ItemModule::set_have_item_visibility(fighter.module_accessor, true);
}
}