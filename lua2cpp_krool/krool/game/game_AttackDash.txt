#[acmd_script( agent = "krool", script = "game_attackdash" , category = ACMD_GAME , low_priority)]
unsafe fn game_attackdash (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	frame(lua_state, 1.0);
	if is_excute(fighter) {
		MotionModule::set_rate(fighter.module_accessor, /*FSR*/ 2);
	}
	frame(lua_state, 5.0);
	if is_excute(fighter) {
		MotionModule::set_rate(fighter.module_accessor, /*FSR*/ 1.25);
	}
	frame(lua_state, 10.0);
	if is_excute(fighter) {
		MotionModule::set_rate(fighter.module_accessor, /*FSR*/ 1);
		ATTACK(fighter, 0, 0, Hash40::new("hip"), 15.0, 45, 61, 0, 80, 7.0, 4.0, 3.5, 3.5, None, None, None, 1.2, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, 1, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_BODY);
		ATK_SET_SHIELD_SETOFF_MUL(fighter, 0, 1.15);
		WorkModule::on_flag(fighter.module_accessor, /*Flag*/ *FIGHTER_KROOL_INSTANCE_WORK_ID_FLAG_REQUEST_WAIST_SHIELD_ON);
	}
	frame(lua_state, 18.0);
	if is_excute(fighter) {
		ATTACK(fighter, 0, 0, Hash40::new("hip"), 11.0, 45, 55, 0, 80, 5.2, 4.0, 3.5, 3.5, None, None, None, 1.1, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, 1, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_BODY);
		ATK_SET_SHIELD_SETOFF_MUL(fighter, 0, 1);
		JostleModule::set_status(fighter.module_accessor, false);
	}
	frame(lua_state, 29.0);
	if is_excute(fighter) {
		AttackModule::clear_all(fighter.module_accessor);
	}
	frame(lua_state, 32.0);
	if is_excute(fighter) {
		WorkModule::on_flag(fighter.module_accessor, /*Flag*/ *FIGHTER_KROOL_INSTANCE_WORK_ID_FLAG_REQUEST_WAIST_SHIELD_OFF);
	}
	frame(lua_state, 37.0);
	if is_excute(fighter) {
		JostleModule::set_status(fighter.module_accessor, true);
	}
}