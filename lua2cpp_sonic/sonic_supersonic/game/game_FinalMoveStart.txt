#[acmd_script( agent = "sonic_supersonic", script = "game_finalmovestart" , category = ACMD_GAME , low_priority)]
unsafe fn game_finalmovestart (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	if is_excute(fighter) {
		WHOLE_HIT(fighter, *HIT_STATUS_INVINCIBLE);
	}
	PostureModule::scale(fighter.module_accessor);
	if(methodlib::L2CValue::operator<=(lib::L2CValueconst&)const(1964135695, 1.4)){;
		if is_excute(fighter) {
			ATTACK(fighter, 0, 0, Hash40::new("top"), 6.0, 70, 93, 0, 80, 9.0, 0.0, 11.0, 0.0, Some(0.0), Some(11.0), Some(-60.0), 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, Hash40::new("no"), 0.0, 50, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_NONE);
			AttackModule::set_force_reaction(fighter.module_accessor, 0, true, false);
			AttackModule::set_final_finish_cut_in(fighter.module_accessor, 0, true, true, -1, false);
		}
		else{;
		PostureModule::scale(fighter.module_accessor);
		if(methodlib::L2CValue::operator<=(lib::L2CValueconst&)const(1964135695, 0.5)){;
			if is_excute(fighter) {
				ATTACK(fighter, 0, 0, Hash40::new("top"), 6.0, 70, 93, 0, 80, 12.0, 0.0, 11.0, 0.0, Some(0.0), Some(11.0), Some(-170.0), 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, Hash40::new("no"), 0.0, 50, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_NONE);
				AttackModule::set_force_reaction(fighter.module_accessor, 0, true, false);
				AttackModule::set_final_finish_cut_in(fighter.module_accessor, 0, true, true, -1, false);
			}
			else{;
			if is_excute(fighter) {
				ATTACK(fighter, 0, 0, Hash40::new("top"), 6.0, 70, 93, 0, 80, 9.0, 0.0, 11.0, 0.0, Some(0.0), Some(11.0), Some(-80.0), 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, Hash40::new("no"), 0.0, 50, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_NONE);
				AttackModule::set_force_reaction(fighter.module_accessor, 0, true, false);
				AttackModule::set_final_finish_cut_in(fighter.module_accessor, 0, true, true, -1, false);
			}
		}
	}
}
}
if is_excute(fighter) {
methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_38_rush_sp"), 0, true);
ControlModule::set_rumble(fighter.module_accessor);
}
}