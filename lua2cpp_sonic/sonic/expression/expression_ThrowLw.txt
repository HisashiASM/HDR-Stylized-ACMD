#[acmd_script( agent = "sonic", script = "expression_throwlw" , category = ACMD_EXPRESSION , low_priority)]
unsafe fn expression_throwlw (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	if is_excute(fighter) {
		FT_ATTACK_ABS_CAMERA_QUAKE(fighter, *FIGHTER_ATTACK_ABSOLUTE_KIND_THROW, *CAMERA_QUAKE_KIND_NONE);
		slope(*MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_LR);
	}
	frame(lua_state, 11.0);
	if is_excute(fighter) {
		VisibilityModule::set_int64(fighter.module_accessor, Hash40::new("body"), Hash40::new("body_sphere"));
		HIT_NODE(fighter, Hash40::new("waist"), *HIT_STATUS_OFF);
		HIT_NODE(fighter, Hash40::new("head"), *HIT_STATUS_OFF);
		HIT_NODE(fighter, Hash40::new("s_stingd1"), *HIT_STATUS_OFF);
		HIT_NODE(fighter, Hash40::new("shoulderr"), *HIT_STATUS_OFF);
		HIT_NODE(fighter, Hash40::new("shoulderl"), *HIT_STATUS_OFF);
		HIT_NODE(fighter, Hash40::new("armr"), *HIT_STATUS_OFF);
		HIT_NODE(fighter, Hash40::new("arml"), *HIT_STATUS_OFF);
		HIT_NODE(fighter, Hash40::new("legr"), *HIT_STATUS_OFF);
		HIT_NODE(fighter, Hash40::new("legl"), *HIT_STATUS_OFF);
		HIT_NODE(fighter, Hash40::new("kneer"), *HIT_STATUS_OFF);
		HIT_NODE(fighter, Hash40::new("kneel"), *HIT_STATUS_OFF);
		HIT_NODE(fighter, Hash40::new("footr"), *HIT_STATUS_OFF);
		HIT_NODE(fighter, Hash40::new("footl"), *HIT_STATUS_OFF);
		HIT_NODE(fighter, Hash40::new("rot"), *HIT_STATUS_NORMAL);
	}
	if is_excute(fighter) {
		ItemModule::set_attach_item_visibility(fighter.module_accessor, false);
	}
	frame(lua_state, 18.0);
	if is_excute(fighter) {
		QUAKE(fighter, *CAMERA_QUAKE_KIND_S);
		RUMBLE_HIT(fighter, Hash40::new("rbkind_attackm"), 0);
	}
	frame(lua_state, 26.0);
	if is_excute(fighter) {
		QUAKE(fighter, *CAMERA_QUAKE_KIND_S);
		RUMBLE_HIT(fighter, Hash40::new("rbkind_attacks"), 0);
	}
	frame(lua_state, 34.0);
	if is_excute(fighter) {
		QUAKE(fighter, *CAMERA_QUAKE_KIND_S);
	}
	frame(lua_state, 41.0);
	if is_excute(fighter) {
		slope(*MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_NONE, 10);
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_attackm"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 51.0);
	if is_excute(fighter) {
		VisibilityModule::set_int64(fighter.module_accessor, Hash40::new("body"), Hash40::new("body_normal"));
		HIT_NODE(fighter, Hash40::new("waist"), *HIT_STATUS_NORMAL);
		HIT_NODE(fighter, Hash40::new("head"), *HIT_STATUS_NORMAL);
		HIT_NODE(fighter, Hash40::new("s_stingd1"), *HIT_STATUS_NORMAL);
		HIT_NODE(fighter, Hash40::new("shoulderr"), *HIT_STATUS_NORMAL);
		HIT_NODE(fighter, Hash40::new("shoulderl"), *HIT_STATUS_NORMAL);
		HIT_NODE(fighter, Hash40::new("armr"), *HIT_STATUS_NORMAL);
		HIT_NODE(fighter, Hash40::new("arml"), *HIT_STATUS_NORMAL);
		HIT_NODE(fighter, Hash40::new("legr"), *HIT_STATUS_NORMAL);
		HIT_NODE(fighter, Hash40::new("legl"), *HIT_STATUS_NORMAL);
		HIT_NODE(fighter, Hash40::new("kneer"), *HIT_STATUS_NORMAL);
		HIT_NODE(fighter, Hash40::new("kneel"), *HIT_STATUS_NORMAL);
		HIT_NODE(fighter, Hash40::new("footr"), *HIT_STATUS_NORMAL);
		HIT_NODE(fighter, Hash40::new("footl"), *HIT_STATUS_NORMAL);
		HIT_NODE(fighter, Hash40::new("rot"), *HIT_STATUS_OFF);
	}
	if is_excute(fighter) {
		ItemModule::set_attach_item_visibility(fighter.module_accessor, true);
	}
}