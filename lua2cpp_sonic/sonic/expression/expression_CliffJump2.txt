#[acmd_script( agent = "sonic", script = "expression_cliffjump2" , category = ACMD_EXPRESSION , low_priority)]
unsafe fn expression_cliffjump2 (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	methodlua2cpp::L2CFighterAnimcmdExpressionCommon::expression_CliffJump2Rumble()();
	frame(lua_state, 1.0);
	if is_excute(fighter) {
		ItemModule::set_have_item_visibility(fighter.module_accessor, false);
	}
	if is_excute(fighter) {
		VisibilityModule::set_int64(fighter.module_accessor, Hash40::new("body"), Hash40::new("body_sphere"));
		HIT_NODE(fighter, Hash40::new("waist"), *HIT_STATUS_OFF);
		HIT_NODE(fighter, Hash40::new("head"), *HIT_STATUS_OFF);
		HIT_NODE(fighter, Hash40::new("s_stingd1"), *HIT_STATUS_OFF);
		HIT_NODE(fighter, Hash40::new("shoulderr"), *HIT_STATUS_OFF);
		HIT_NODE(fighter, Hash40::new("shoulderl"), *HIT_STATUS_OFF);
		HIT_NODE(fighter, Hash40::new("armr"), *HIT_STATUS_OFF);
		HIT_NODE(fighter, Hash40::new("arml"), *HIT_STATUS_OFF);
		HIT_NODE(fighter, Hash40::new("legr"), *HIT_STATUS_OFF);
		HIT_NODE(fighter, Hash40::new("legl"), *HIT_STATUS_OFF);
		HIT_NODE(fighter, Hash40::new("kneer"), *HIT_STATUS_OFF);
		HIT_NODE(fighter, Hash40::new("kneel"), *HIT_STATUS_OFF);
		HIT_NODE(fighter, Hash40::new("footr"), *HIT_STATUS_OFF);
		HIT_NODE(fighter, Hash40::new("footl"), *HIT_STATUS_OFF);
		HIT_NODE(fighter, Hash40::new("rot"), *HIT_STATUS_NORMAL);
	}
	for(8 Iterations){;
	wait(0, 1);
	if is_excute(fighter) {
		VisibilityModule::set_int64(fighter.module_accessor, Hash40::new("body"), Hash40::new("body_normal"));
		HIT_NODE(fighter, Hash40::new("waist"), *HIT_STATUS_NORMAL);
		HIT_NODE(fighter, Hash40::new("head"), *HIT_STATUS_NORMAL);
		HIT_NODE(fighter, Hash40::new("s_stingd1"), *HIT_STATUS_NORMAL);
		HIT_NODE(fighter, Hash40::new("shoulderr"), *HIT_STATUS_NORMAL);
		HIT_NODE(fighter, Hash40::new("shoulderl"), *HIT_STATUS_NORMAL);
		HIT_NODE(fighter, Hash40::new("armr"), *HIT_STATUS_NORMAL);
		HIT_NODE(fighter, Hash40::new("arml"), *HIT_STATUS_NORMAL);
		HIT_NODE(fighter, Hash40::new("legr"), *HIT_STATUS_NORMAL);
		HIT_NODE(fighter, Hash40::new("legl"), *HIT_STATUS_NORMAL);
		HIT_NODE(fighter, Hash40::new("kneer"), *HIT_STATUS_NORMAL);
		HIT_NODE(fighter, Hash40::new("kneel"), *HIT_STATUS_NORMAL);
		HIT_NODE(fighter, Hash40::new("footr"), *HIT_STATUS_NORMAL);
		HIT_NODE(fighter, Hash40::new("footl"), *HIT_STATUS_NORMAL);
		HIT_NODE(fighter, Hash40::new("rot"), *HIT_STATUS_OFF);
	}
	wait(0, 1);
}
frame(lua_state, 18.0);
if is_excute(fighter) {
	ItemModule::set_have_item_visibility(fighter.module_accessor, true);
}
}