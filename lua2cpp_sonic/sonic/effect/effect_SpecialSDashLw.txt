#[acmd_script( agent = "sonic", script = "effect_specialsdashlw" , category = ACMD_EFFECT , low_priority)]
unsafe fn effect_specialsdashlw (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	WorkModule::is_flag(fighter.module_accessor, *FIGHTER_SONIC_STATUS_SPECIAL_S_DASH_FLAG_MAX_CHARGE);
	if(0x12c570(false, true)){;
		get_value_float(*SO_VAR_FLOAT_LR);
		if(0x12c570(0, 0)){;
			if is_excute(fighter) {
				EFFECT_FOLLOW_NO_SCALE(fighter, Hash40::new("sonic_spinwind"), Hash40::new("sphere"), 0, 0, 0, 0, 90, 0, 0.8, true);
				LAST_EFFECT_SET_COLOR(fighter, 1, 0.928, 0.65);
			}
			else{;
			get_value_float(*SO_VAR_FLOAT_LR);
			if(0x12c570(0, 0)){;
				if is_excute(fighter) {
					EFFECT_FOLLOW_NO_SCALE(fighter, Hash40::new("sonic_spinwind"), Hash40::new("sphere"), 0, 0, 0, 0, 90, 0, 0.8, true);
					LAST_EFFECT_SET_COLOR(fighter, 0.711, 0.931, 1);
				}
				if is_excute(fighter) {
					FLASH(fighter, 1, 1, 1, 0.13);
				}
				wait(lua_state, 3.0);
				if is_excute(fighter) {
					COL_NORMAL(fighter);
				}
				wait(lua_state, 4.0);
				if is_excute(fighter) {
					FLASH(fighter, 1, 1, 0.275, 0.196);
				}
				wait(lua_state, 3.0);
				if is_excute(fighter) {
					COL_NORMAL(fighter);
				}
				wait(lua_state, 2.0);
			}
			else{;
			if is_excute(fighter) {
				EFFECT_FOLLOW_NO_SCALE(fighter, Hash40::new("sonic_spinwind"), Hash40::new("sphere"), 0, 0, 0, 0, -90, 0, 0.8, true);
				LAST_EFFECT_SET_COLOR(fighter, 0.711, 0.931, 1);
			}
		}
	}
}
}
if is_excute(fighter) {
EFFECT_FOLLOW_NO_STOP(fighter, Hash40::new("sonic_spintrace"), Hash40::new("top"), 0, 5, 0, 0, 0, 0, 1, true);
EffectModule::enable_sync_init_pos_last(fighter.module_accessor);
}
}