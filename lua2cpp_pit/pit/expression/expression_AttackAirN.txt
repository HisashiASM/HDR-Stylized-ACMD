#[acmd_script( agent = "pit", script = "expression_attackairn" , category = ACMD_EXPRESSION , low_priority)]
unsafe fn expression_attackairn (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	if is_excute(fighter) {
		VisibilityModule::set_status_default_int64(fighter.module_accessor, Hash40::new("weapon"), 0x11242751f5);
		methodlib::L2CValue::as_hash()const(Hash40::new("swordr1"), *ATTACK_DIRECTION_Z, *ATTACK_DIRECTION_Y, *ATTACK_DIRECTION_X);
		AttackModule::set_attack_reference_joint_id(fighter.module_accessor);
		ItemModule::set_have_item_visibility(fighter.module_accessor, false);
	}
	frame(lua_state, 3.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohits"), 10, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 4.0);
	if is_excute(fighter) {
		RUMBLE_HIT(fighter, Hash40::new("rbkind_slashss"), 0);
	}
	frame(lua_state, 14.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohits"), 10, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 25.0);
	if is_excute(fighter) {
		RUMBLE_HIT(fighter, Hash40::new("rbkind_slashm"), 0);
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohitm"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 56.0);
	if is_excute(fighter) {
		ItemModule::set_have_item_visibility(fighter.module_accessor, true);
	}
}