#[acmd_script( agent = "nana", script = "game_downattacku_nana" , category = ACMD_GAME , low_priority)]
unsafe fn game_downattacku_nana (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	frame(lua_state, 19.0);
	get_value_float(*SO_VAR_FLOAT_LR);
	if(0x1478c0(0, 0)){;
		if is_excute(fighter) {
			ATTACK(fighter, 0, 0, Hash40::new("top"), 5.25, 48, 48, 0, 80, 4.5, 2.0, 4.5, -12.0, Some(2.0), Some(4.5), Some(-3.0), 1.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, 8, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_HAMMER);
		}
		else{;
		if is_excute(fighter) {
			ATTACK(fighter, 0, 0, Hash40::new("top"), 5.25, 48, 48, 0, 80, 4.5, -2.0, 4.5, -12.0, Some(-2.0), Some(4.5), Some(-3.0), 1.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, 8, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_HAMMER);
		}
	}
}
wait(lua_state, 2.0);
if is_excute(fighter) {
	AttackModule::clear_all(fighter.module_accessor);
}
frame(lua_state, 24.0);
get_value_float(*SO_VAR_FLOAT_LR);
if(0x1478c0(576, 0)){;
	if is_excute(fighter) {
		ATTACK(fighter, 0, 0, Hash40::new("top"), 5.25, 48, 48, 0, 80, 4.5, 2.0, 4.5, 12.0, Some(2.0), Some(4.5), Some(3.0), 1.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, 8, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_HAMMER);
	}
	else{;
	if is_excute(fighter) {
		ATTACK(fighter, 0, 0, Hash40::new("top"), 5.25, 48, 48, 0, 80, 4.5, -2.0, 4.5, 12.0, Some(-2.0), Some(4.5), Some(3.0), 1.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, 8, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_HAMMER);
	}
}
}
wait(lua_state, 2.0);
if is_excute(fighter) {
AttackModule::clear_all(fighter.module_accessor);
}
}