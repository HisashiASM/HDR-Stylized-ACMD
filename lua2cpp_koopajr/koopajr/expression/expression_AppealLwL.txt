#[acmd_script( agent = "koopajr", script = "expression_appeallwl" , category = ACMD_EXPRESSION , low_priority)]
unsafe fn expression_appeallwl (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	if is_excute(fighter) {
		VisibilityModule::set_int64(fighter.module_accessor, Hash40::new("clown"), Hash40::new("clown_off"));
		VisibilityModule::set_int64(fighter.module_accessor, Hash40::new("clown_face"), Hash40::new("clown_face_off"));
		slope(*MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_NONE);
	}
	frame(lua_state, 8.0);
	if is_excute(fighter) {
		slope(*MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_TOP, 6);
	}
	frame(lua_state, 30.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_rush"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 51.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohits"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 86.0);
	if is_excute(fighter) {
		slope(*MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_NONE, 10);
	}
	frame(lua_state, 93.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_grapple"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 97.0);
	if is_excute(fighter) {
		VisibilityModule::set_default_int64(fighter.module_accessor, Hash40::new("clown"));
		VisibilityModule::set_default_int64(fighter.module_accessor, Hash40::new("clown_face"));
	}
}