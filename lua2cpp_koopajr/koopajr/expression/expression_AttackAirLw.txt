#[acmd_script( agent = "koopajr", script = "expression_attackairlw" , category = ACMD_EXPRESSION , low_priority)]
unsafe fn expression_attackairlw (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	if is_excute(fighter) {
		ItemModule::set_have_item_visibility(fighter.module_accessor, false);
	}
	frame(lua_state, 0.0);
	if is_excute(fighter) {
		VisibilityModule::set_int64(fighter.module_accessor, Hash40::new("sholder_l"), Hash40::new("sholder_l_on"));
		VisibilityModule::set_int64(fighter.module_accessor, Hash40::new("sholder_r"), Hash40::new("sholder_r_on"));
		VisibilityModule::set_int64(fighter.module_accessor, Hash40::new("item"), Hash40::new("item_drill"));
	}
	frame(lua_state, 15.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_elecattack"), 30, true);
		ControlModule::set_rumble(fighter.module_accessor);
		RUMBLE_HIT_STATUS(fighter, Hash40::new("rbkind_attacks"), 5);
	}
	frame(lua_state, 25.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_elecattack"), 20, true);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 35.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_elecattack"), 10, true);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 47.0);
	if is_excute(fighter) {
		RUMBLE_HIT_STATUS(fighter, Hash40::new("rbkind_attackm"), 0);
	}
}