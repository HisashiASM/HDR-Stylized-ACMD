#[acmd_script( agent = "koopajr", script = "expression_attack100" , category = ACMD_EXPRESSION , low_priority)]
unsafe fn expression_attack100 (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	wait_loop_sync_mot();
	if is_excute(fighter) {
		VisibilityModule::set_int64(fighter.module_accessor, Hash40::new("sholder_l"), Hash40::new("sholder_l_on"));
		VisibilityModule::set_int64(fighter.module_accessor, Hash40::new("sholder_r"), Hash40::new("sholder_r_on"));
		VisibilityModule::set_int64(fighter.module_accessor, Hash40::new("item"), Hash40::new("item_glove"));
	}
	frame(lua_state, 1.0);
	if is_excute(fighter) {
		RUMBLE_HIT(fighter, Hash40::new("rbkind_attackss"), 4);
	}
	frame(lua_state, 3.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohits"), 5, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 9.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohits"), 5, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 15.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohits"), 5, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 21.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohits"), 5, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 27.0);
	methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohits"), 5, false);
	ControlModule::set_rumble(fighter.module_accessor);
}