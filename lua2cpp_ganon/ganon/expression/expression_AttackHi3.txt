#[acmd_script( agent = "ganon", script = "expression_attackhi3" , category = ACMD_EXPRESSION , low_priority)]
unsafe fn expression_attackhi3 (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	if is_excute(fighter) {
		slope(*MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_L);
	}
	frame(lua_state, 11.0);
	if is_excute(fighter) {
		AREA_WIND_2ND_arg10(0, 2, 225, 2, 1, 0, 12, 30, 30, 80);
	}
	frame(lua_state, 19.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_smashhold1"), 38, true);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 50.0);
	if is_excute(fighter) {
		AreaModule::erase_wind(fighter.module_accessor, 0);
	}
	frame(lua_state, 54.0);
	if is_excute(fighter) {
		slope(*MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_TOP, 4);
	}
	frame(lua_state, 60.0);
	if is_excute(fighter) {
		QUAKE(fighter, *CAMERA_QUAKE_KIND_M);
		RUMBLE_HIT(fighter, Hash40::new("rbkind_attackll"), 0);
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohit_explosionm"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 61.0);
	if is_excute(fighter) {
		AREA_WIND_2ND_arg10(0, 3, 90, 16, 1, 0, 12, 30, 30, 50);
	}
	frame(lua_state, 78.0);
	if is_excute(fighter) {
		AreaModule::erase_wind(fighter.module_accessor, 0);
	}
	frame(lua_state, 84.0);
	if is_excute(fighter) {
		slope(*MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_LR, 10);
	}
}