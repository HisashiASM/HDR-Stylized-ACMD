#[acmd_script( agent = "ganon", script = "expression_specialairn" , category = ACMD_EXPRESSION , low_priority)]
unsafe fn expression_specialairn (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	if is_excute(fighter) {
		slope(*MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_LR);
	}
	frame(lua_state, 6.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_elecattacks"), 0, true);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 11.0);
	if is_excute(fighter) {
		AREA_WIND_2ND_arg10(0, 2, 75, 2, 1, 0, 12, 50, 30, 50);
	}
	frame(lua_state, 35.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_erase"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 36.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_23_hold"), 0, true);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 56.0);
	if is_excute(fighter) {
		AreaModule::erase_wind(fighter.module_accessor, 0);
	}
	frame(lua_state, 64.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_erase"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 68.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_attackl"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 70.0);
	if is_excute(fighter) {
		QUAKE(fighter, *CAMERA_QUAKE_KIND_M);
		RUMBLE_HIT(fighter, Hash40::new("rbkind_attack_critical"), 0);
	}
	frame(lua_state, 71.0);
	if is_excute(fighter) {
		AREA_WIND_2ND_arg10(0, 3, 120, 2, 1, 0, 12, 50, 30, 0);
	}
	frame(lua_state, 101.0);
	if is_excute(fighter) {
		AreaModule::erase_wind(fighter.module_accessor, 0);
	}
}