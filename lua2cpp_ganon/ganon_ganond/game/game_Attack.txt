#[acmd_script( agent = "ganon_ganond", script = "game_attack" , category = ACMD_GAME , low_priority)]
unsafe fn game_attack (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	if is_excute(fighter) {
		QUAKE(fighter, *CAMERA_QUAKE_KIND_L);
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_23_rush_sp"), 0, true);
		ControlModule::set_rumble(fighter.module_accessor);
		ATTACK(fighter, 0, 0, Hash40::new("top"), 45.0, 42, 25, 0, 122, 10.0, 0.0, 12.0, 25.0, None, None, None, 0.0, 1.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_F, false, Hash40::new("no"), 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_purple"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_FIRE, *ATTACK_REGION_NONE);
		ATTACK(fighter, 1, 0, Hash40::new("top"), 35.0, 42, 25, 0, 122, 15.0, 0.0, 12.0, 5.0, Some(0.0), Some(12.0), Some(-20.0), 0.0, 1.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_F, false, Hash40::new("no"), 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_purple"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_FIRE, *ATTACK_REGION_NONE);
		ATTACK(fighter, 2, 0, Hash40::new("top"), 35.0, 42, 25, 0, 122, 18.0, 0.0, 30.0, 13.0, Some(0.0), Some(30.0), Some(-18.0), 0.0, 1.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_F, false, Hash40::new("no"), 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_purple"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_FIRE, *ATTACK_REGION_NONE);
		AttackModule::set_force_reaction(fighter.module_accessor, 0, true, false);
		AttackModule::set_force_reaction(fighter.module_accessor, 1, true, false);
		AttackModule::set_force_reaction(fighter.module_accessor, 2, true, false);
		AttackModule::set_final_finish_cut_in(fighter.module_accessor, 0, true, true, -1, false);
		AttackModule::set_final_finish_cut_in(fighter.module_accessor, 1, true, true, -1, false);
		AttackModule::set_final_finish_cut_in(fighter.module_accessor, 2, true, true, -1, false);
	}
}