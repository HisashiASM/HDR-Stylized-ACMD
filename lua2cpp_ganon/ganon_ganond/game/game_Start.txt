#[acmd_script( agent = "ganon_ganond", script = "game_start" , category = ACMD_GAME , low_priority)]
unsafe fn game_start (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	frame(lua_state, 18.0);
	if is_excute(fighter) {
		CAM_ZOOM_OUT(fighter);
	}
	frame(lua_state, 19.0);
	frame(lua_state, 23.0);
	if is_excute(fighter) {
		AttackModule::clear_all(fighter.module_accessor);
	}
	frame(lua_state, 48.0);
	if is_excute(fighter) {
		WorkModule::on_flag(fighter.module_accessor, /*Flag*/ *WEAPON_GANON_GANOND_INSTANCE_WORK_ID_FLAG_HIT_RUMBLE_CHECK);
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohitll_l"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 50.0);
	if is_excute(fighter) {
		QUAKE(fighter, *CAMERA_QUAKE_KIND_L);
		ATTACK(fighter, 0, 1, Hash40::new("top"), 10.0, 270, 100, 250, 0, 25.0, 0.0, 25.0, 50.0, Some(0.0), Some(25.0), Some(18.0), 2.0, 1.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_POS, false, Hash40::new("no"), 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_paralyze"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_FIRE, *ATTACK_REGION_NONE);
		AttackModule::set_final_finish_cut_in(fighter.module_accessor, 0, true, true, -1, false);
	}
	wait(lua_state, 5.0);
	if is_excute(fighter) {
		AttackModule::clear_all(fighter.module_accessor);
	}
	frame(lua_state, 55.0);
	if is_excute(fighter) {
		CHECK_VALID_FINAL_START_CAMERA(fighter, 0, 2, 50, 0, 0, 0);
	}
	WorkModule::is_flag(fighter.module_accessor, *FIGHTER_INSTANCE_WORK_ID_FLAG_DISABLE_FINAL_START_CAMERA);
	if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, false)){;
		PostureModule::scale(fighter.module_accessor);
		0xffe90(1095804846, 0.5);
		get_value_float(*SO_VAR_FLOAT_LR);
		if(methodlib::L2CValue::operator<(lib::L2CValueconst&)const(35264, 0)){;
			if is_excute(fighter) {
				CAM_ZOOM_IN_arg5(10, 0, 1.2, 0.1, -0.3);
				camera(*MA_MSC_CMD_CAMERA_CAM_OFFSET, 0, 10);
			}
			else{;
			if is_excute(fighter) {
				CAM_ZOOM_IN_arg5(10, 0, 1.2, 0.1, 0.3);
				camera(*MA_MSC_CMD_CAMERA_CAM_OFFSET, 0, 10);
			}
		}
	}
}
frame(lua_state, 60.0);
if is_excute(fighter) {
	WorkModule::off_flag(fighter.module_accessor, /*Flag*/ *WEAPON_GANON_GANOND_INSTANCE_WORK_ID_FLAG_HIT_RUMBLE_CHECK);
}
wait(lua_state, 35.0);
if is_excute(fighter) {
	CAM_ZOOM_OUT(fighter);
}
frame(lua_state, 96.0);
FT_MOTION_RATE(fighter, 2);
frame(lua_state, 105.0);
FT_MOTION_RATE(fighter, 1);
if is_excute(fighter) {
	ATTACK(fighter, 0, 0, Hash40::new("top"), 0.0, 20, 70, 220, 40, 20.0, 0.0, 20.0, 0.0, None, None, None, 0.0, 1.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_F, false, Hash40::new("no"), 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_purple"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_FIRE, *ATTACK_REGION_NONE);
}
wait(lua_state, 10.0);
if is_excute(fighter) {
	AttackModule::clear_all(fighter.module_accessor);
}
}