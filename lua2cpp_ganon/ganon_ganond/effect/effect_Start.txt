#[acmd_script( agent = "ganon_ganond", script = "effect_start" , category = ACMD_EFFECT , low_priority)]
unsafe fn effect_start (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	frame(lua_state, 17.0);
	for(6 Iterations){;
	if is_excute(fighter) {
		EFFECT(fighter, Hash40::new("ganon_final_transform_light"), Hash40::new("top"), 0, 17, 0, 0, 0, 0, 1.2, 45, 45, 45, 0, 0, 0, true);
		BURN_COLOR(fighter, 0.1, 1, 2, 0.7);
	}
	wait(lua_state, 2.0);
	if is_excute(fighter) {
		EFFECT(fighter, Hash40::new("ganon_final_transform_light"), Hash40::new("top"), 0, 27, -10, 0, 0, 0, 1.3, 40, 40, 40, 0, 0, 0, true);
		BURN_COLOR_FRAME(fighter, 5, 0.1, 1, 2, 0);
	}
	wait(lua_state, 1.0);
	if is_excute(fighter) {
		EFFECT(fighter, Hash40::new("ganon_final_transform_light"), Hash40::new("top"), 0, 37, -5, 0, 0, 0, 1.2, 40, 40, 40, 0, 0, 0, true);
		BURN_COLOR_NORMAL(fighter);
	}
	wait(lua_state, 1.0);
}
frame(lua_state, 25.0);
if is_excute(fighter) {
	EFFECT_FOLLOW(fighter, Hash40::new("ganon_final_sword_flare"), Hash40::new("havel"), 0, 0, 0, 0, 0, 0, 1, true);
	EFFECT_FOLLOW(fighter, Hash40::new("ganon_final_sword_flare"), Hash40::new("haver"), 0, 0.1, -0.2, 0, 0, 0, 1, true);
}
frame(lua_state, 45.0);
if is_excute(fighter) {
	AFTER_IMAGE4_ON_arg29(Hash40::new("tex_ganon_final_sword1"), Hash40::new("tex_ganon_final_sword2"), 5, Hash40::new("havel"), 0, 1, 0, Hash40::new("havel"), 0, 48, 0, true, Hash40::new("null"), Hash40::new("haver"), 0, 0, 0, 0, 0, 0, 1, 0, *EFFECT_AXIS_X, 0, *TRAIL_BLEND_ALPHA, 101, *TRAIL_CULL_NONE, 1.4, 0.1);
	AFTER_IMAGE4_ON_arg29(Hash40::new("tex_ganon_final_sword1"), Hash40::new("tex_ganon_final_sword2"), 5, Hash40::new("haver"), 0, 1, 0, Hash40::new("haver"), 0, 48, 0, true, Hash40::new("null"), Hash40::new("haver"), 0, 0, 0, 0, 0, 0, 1, 0, *EFFECT_AXIS_X, 0, *TRAIL_BLEND_ALPHA, 101, *TRAIL_CULL_NONE, 1.4, 0.1);
}
frame(lua_state, 50.0);
if is_excute(fighter) {
	EFFECT(fighter, Hash40::new("ganon_final_cut"), Hash40::new("top"), 0, 16, 28, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, true);
}
frame(lua_state, 51.0);
if is_excute(fighter) {
	LANDING_EFFECT(fighter, Hash40::new("sys_atk_smoke"), Hash40::new("top"), 5, 0, 17, 0, 0, 0, 1.4, 0, 0, 0, 0, 0, 0, false);
}
frame(lua_state, 53.0);
if is_excute(fighter) {
	LANDING_EFFECT(fighter, Hash40::new("sys_action_smoke_h"), Hash40::new("top"), -5, 0, 0, 0, 0, 0, 1.7, 0, 0, 0, 0, 0, 0, false);
}
frame(lua_state, 55.0);
if is_excute(fighter) {
	LANDING_EFFECT(fighter, Hash40::new("sys_down_smoke"), Hash40::new("top"), 45, 0, 0, 0, 0, 0, 2.2, 0, 0, 0, 0, 0, 0, false);
	LAST_EFFECT_SET_ALPHA(fighter, 0.5);
	LAST_EFFECT_SET_RATE(fighter, 0.8);
}
frame(lua_state, 56.0);
if is_excute(fighter) {
	EFFECT(fighter, Hash40::new("sys_shield_smoke"), Hash40::new("top"), 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, true);
	LAST_EFFECT_SET_ALPHA(fighter, 0.3);
	LAST_EFFECT_SET_RATE(fighter, 0.4);
	AFTER_IMAGE_OFF(fighter, 10);
}
frame(lua_state, 70.0);
get_value_float(*SO_VAR_FLOAT_LR);
if(methodlib::L2CValue::operator<(lib::L2CValueconst&)const(97478068832, 0)){;
	if is_excute(fighter) {
		EFFECT_FOLLOW(fighter, Hash40::new("ganon_final_eye"), Hash40::new("eye_l"), 0, 0, 0, 0, 0, 0, 1, true);
	}
	else{;
	if is_excute(fighter) {
		EFFECT_FOLLOW(fighter, Hash40::new("ganon_final_eye"), Hash40::new("eye_r"), 0, 0, 0, 0, 0, 0, 1, true);
	}
}
}
frame(lua_state, 85.0);
if is_excute(fighter) {
BURN_COLOR(fighter, 1.5, 0.5, 2, 0);
EFFECT_FOLLOW(fighter, Hash40::new("ganon_final_attack"), Hash40::new("top"), 0, 17, 25, 0, 0, 0, 1, false);
}
frame(lua_state, 90.0);
if is_excute(fighter) {
EFFECT_OFF_KIND(fighter, Hash40::new("sys_shield_smoke"), false, true);
BURN_COLOR_FRAME(fighter, 5, 1.5, 0.5, 2, 0.5);
}
frame(lua_state, 104.0);
if is_excute(fighter) {
LANDING_EFFECT(fighter, Hash40::new("sys_atk_smoke"), Hash40::new("top"), 5, 0, 17, 0, 0, 0, 1.4, 0, 0, 0, 0, 0, 0, false);
}
frame(lua_state, 105.0);
if is_excute(fighter) {
LANDING_EFFECT(fighter, Hash40::new("sys_h_smoke_b"), Hash40::new("top"), 0, 0, 0, 0, 0, 0, 1.7, 0, 0, 0, 0, 0, 0, false);
}
for(10 Iterations){;
if is_excute(fighter) {
BURN_COLOR(fighter, 1.5, 0.5, 2, 0.5);
}
wait(lua_state, 2.0);
if is_excute(fighter) {
BURN_COLOR_FRAME(fighter, 5, 1.5, 0.5, 2, 0);
}
wait(lua_state, 1.0);
if is_excute(fighter) {
BURN_COLOR_NORMAL(fighter);
}
wait(lua_state, 1.0);
}
}