#[acmd_script( agent = "buddy", script = "game_attackhi3" , category = ACMD_GAME , low_priority)]
unsafe fn game_attackhi3 (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	if is_excute(fighter) {
		HIT_NO(fighter, 12, *HIT_STATUS_NORMAL);
		HIT_NO(fighter, 13, *HIT_STATUS_NORMAL);
		HIT_NO(fighter, 14, *HIT_STATUS_NORMAL);
		HIT_NO(fighter, 15, *HIT_STATUS_NORMAL);
		HIT_NO(fighter, 16, *HIT_STATUS_NORMAL);
		HIT_NO(fighter, 17, *HIT_STATUS_NORMAL);
		FighterAreaModuleImpl::enable_fix_jostle_area(fighter.module_accessor, 4, 3);
	}
	frame(lua_state, 11.0);
	if is_excute(fighter) {
		ATTACK(fighter, 0, 0, Hash40::new("legr"), 10.0, 86, 119, 0, 42, 4.4, 1.8, 0.0, 0.0, None, None, None, 1.0, 1.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_F, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_KICK);
		ATTACK(fighter, 1, 0, Hash40::new("footr"), 10.0, 86, 119, 0, 42, 4.6, 2.2, 0.0, 0.0, None, None, None, 1.0, 1.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_F, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_KICK);
		ATTACK(fighter, 2, 0, Hash40::new("legl"), 10.0, 86, 119, 0, 42, 4.4, 2.6, 0.0, 0.0, None, None, None, 1.0, 1.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_F, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_KICK, *ATTACK_REGION_KICK);
	}
	wait(lua_state, 4.0);
	if is_excute(fighter) {
		AttackModule::clear_all(fighter.module_accessor);
	}
	frame(lua_state, 25.0);
	if is_excute(fighter) {
		HIT_NO(fighter, 12, *HIT_STATUS_OFF);
		HIT_NO(fighter, 13, *HIT_STATUS_OFF);
		HIT_NO(fighter, 14, *HIT_STATUS_OFF);
		HIT_NO(fighter, 15, *HIT_STATUS_OFF);
		HIT_NO(fighter, 16, *HIT_STATUS_OFF);
		HIT_NO(fighter, 17, *HIT_STATUS_OFF);
	}
}