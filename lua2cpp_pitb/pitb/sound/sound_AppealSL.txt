#[acmd_script( agent = "pitb", script = "sound_appealsl" , category = ACMD_SOUND , low_priority)]
unsafe fn sound_appealsl (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	frame(lua_state, 5.0);
	if is_excute(fighter) {
		PLAY_SE(fighter, Hash40::new("se_pitb_bowcombine"));
	}
	frame(lua_state, 8.0);
	if is_excute(fighter) {
		PLAY_STEP(fighter, Hash40::new("se_pitb_step_right_s"));
	}
	frame(lua_state, 13.0);
	if is_excute(fighter) {
		PLAY_STEP(fighter, Hash40::new("se_pitb_step_left_s"));
	}
	frame(lua_state, 14.0);
	if is_excute(fighter) {
		PLAY_STATUS(fighter, Hash40::new("se_pitb_attack100"));
	}
	wait(lua_state, 24.0);
	if is_excute(fighter) {
		STOP_SE(fighter, Hash40::new("se_pitb_attack100"));
	}
	wait(lua_state, 1.0);
	if is_excute(fighter) {
		PLAY_SE(fighter, Hash40::new("se_pitb_bowsplit"));
		PLAY_SE(fighter, Hash40::new("se_pitb_swing_s"));
	}
	wait(lua_state, 10.0);
	if is_excute(fighter) {
		PLAY_SE_REMAIN(fighter, Hash40::new("vc_pitb_appeal02"));
		PLAY_SE(fighter, Hash40::new("se_pitb_swing_s"));
	}
	frame(lua_state, 85.0);
	if is_excute(fighter) {
		PLAY_STEP(fighter, Hash40::new("se_pitb_step_right_s"));
	}
	frame(lua_state, 96.0);
	if is_excute(fighter) {
		PLAY_STEP(fighter, Hash40::new("se_pitb_step_left_s"));
	}
}