#[acmd_script( agent = "reflet", script = "expression_attackhi42" , category = ACMD_EXPRESSION , low_priority)]
unsafe fn expression_attackhi42 (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	if is_excute(fighter) {
		slope(*MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_LR);
	}
	frame(lua_state, 6.0);
	execute(6);
	WorkModule::is_flag(fighter.module_accessor, *FIGHTER_REFLET_INSTANCE_WORK_ID_FLAG_THUNDER_SWORD_ON);
	methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, true);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("top"), *ATTACK_DIRECTION_Y, *ATTACK_DIRECTION_X, *ATTACK_DIRECTION_Z);
		AttackModule::set_attack_reference_joint_id(fighter.module_accessor);
	}
	if is_excute(fighter) {
		slope(*MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_LR);
	}
	frame(lua_state, 7.0);
	if is_excute(fighter) {
		AREA_WIND_2ND_arg10(0, 1, 80, 300, 0.8, 0, 12, 24, 24, 80);
	}
	execute(10);
	WorkModule::is_flag(fighter.module_accessor, *FIGHTER_REFLET_INSTANCE_WORK_ID_FLAG_THUNDER_SWORD_ON);
	if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, true)){;
		frame(lua_state, 12.0);
		if is_excute(fighter) {
			RUMBLE_HIT(fighter, Hash40::new("rbkind_attackl"), 0);
			methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohitm"), 0, false);
			ControlModule::set_rumble(fighter.module_accessor);
		}
	}
	frame(lua_state, 16.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohitl"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	else{;
	frame(lua_state, 11.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohitl"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
}
frame(lua_state, 12.0);
if is_excute(fighter) {
	RUMBLE_HIT(fighter, Hash40::new("rbkind_pierces"), 0);
}
frame(lua_state, 18.0);
if is_excute(fighter) {
	AreaModule::erase_wind(fighter.module_accessor, 0);
}
}