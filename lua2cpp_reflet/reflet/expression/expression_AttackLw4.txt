#[acmd_script( agent = "reflet", script = "expression_attacklw4" , category = ACMD_EXPRESSION , low_priority)]
unsafe fn expression_attacklw4 (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	if is_excute(fighter) {
		slope(*MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_LR);
	}
	frame(lua_state, 4.0);
	execute(4);
	WorkModule::is_flag(fighter.module_accessor, *FIGHTER_REFLET_INSTANCE_WORK_ID_FLAG_THUNDER_SWORD_ON);
	methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, true);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("sword"), *ATTACK_DIRECTION_Z, *ATTACK_DIRECTION_Y, *ATTACK_DIRECTION_X);
		AttackModule::set_attack_reference_joint_id(fighter.module_accessor);
	}
	if is_excute(fighter) {
		slope(*MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_LR);
	}
	frame(lua_state, 12.0);
	if is_excute(fighter) {
		slope(*MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_TOP, 4);
	}
	frame(lua_state, 13.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohitl"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 16.0);
	execute(16);
	WorkModule::is_flag(fighter.module_accessor, *FIGHTER_REFLET_INSTANCE_WORK_ID_FLAG_THUNDER_SWORD_ON);
	if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, true)){;
		if is_excute(fighter) {
			RUMBLE_HIT(fighter, Hash40::new("rbkind_slashl"), 0);
			methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_impact"), 0, false);
			ControlModule::set_rumble(fighter.module_accessor);
		}
		else{;
		if is_excute(fighter) {
			RUMBLE_HIT(fighter, Hash40::new("rbkind_slashm"), 0);
			methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_impact"), 0, false);
			ControlModule::set_rumble(fighter.module_accessor);
		}
	}
}
frame(lua_state, 19.0);
if is_excute(fighter) {
	RUMBLE_HIT(fighter, Hash40::new("rbkind_beamm"), 0);
}
frame(lua_state, 55.0);
if is_excute(fighter) {
	slope(*MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_LR, 8);
}
}