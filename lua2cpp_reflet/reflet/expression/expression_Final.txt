#[acmd_script( agent = "reflet", script = "expression_final" , category = ACMD_EXPRESSION , low_priority)]
unsafe fn expression_final (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	if is_excute(fighter) {
		ItemModule::set_have_item_visibility(fighter.module_accessor, false);
		WorkModule::on_flag(fighter.module_accessor, /*Flag*/ *FIGHTER_INSTANCE_WORK_ID_FLAG_BACKSHIELD_INVISIBLE);
	}
	frame(lua_state, 7.0);
	if is_excute(fighter) {
		QUAKE(fighter, *CAMERA_QUAKE_KIND_M);
	}
	frame(lua_state, 8.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_slashs"), 10, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 20.0);
	if is_excute(fighter) {
		QUAKE(fighter, *CAMERA_QUAKE_KIND_S);
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_beamm"), 10, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 25.0);
	if is_excute(fighter) {
		QUAKE(fighter, *CAMERA_QUAKE_KIND_S);
	}
	frame(lua_state, 31.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_slashs"), 9, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 41.0);
	if is_excute(fighter) {
		QUAKE(fighter, *CAMERA_QUAKE_KIND_S);
	}
	frame(lua_state, 42.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_slashs"), 4, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 48.0);
	if is_excute(fighter) {
		QUAKE(fighter, *CAMERA_QUAKE_KIND_M);
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_explosionm"), 8, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 57.0);
	if is_excute(fighter) {
		QUAKE(fighter, *CAMERA_QUAKE_KIND_S);
	}
	frame(lua_state, 62.0);
	if is_excute(fighter) {
		QUAKE(fighter, *CAMERA_QUAKE_KIND_S);
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_beamm"), 7, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 71.0);
	if is_excute(fighter) {
		QUAKE(fighter, *CAMERA_QUAKE_KIND_S);
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_slashs"), 14, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 87.0);
	if is_excute(fighter) {
		QUAKE(fighter, *CAMERA_QUAKE_KIND_M);
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_beamm"), 18, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 96.0);
	if is_excute(fighter) {
		QUAKE(fighter, *CAMERA_QUAKE_KIND_S);
	}
	frame(lua_state, 106.0);
	if is_excute(fighter) {
		QUAKE(fighter, *CAMERA_QUAKE_KIND_S);
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_explosionm"), 13, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 118.0);
	if is_excute(fighter) {
		QUAKE(fighter, *CAMERA_QUAKE_KIND_S);
	}
	frame(lua_state, 119.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_attackm"), 12, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 130.0);
	if is_excute(fighter) {
		QUAKE(fighter, *CAMERA_QUAKE_KIND_M);
	}
	frame(lua_state, 132.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_beamm"), 15, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 136.0);
	if is_excute(fighter) {
		QUAKE(fighter, *CAMERA_QUAKE_KIND_S);
	}
	frame(lua_state, 148.0);
	if is_excute(fighter) {
		QUAKE(fighter, *CAMERA_QUAKE_KIND_S);
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_explosionm"), 6, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 154.0);
	if is_excute(fighter) {
		QUAKE(fighter, *CAMERA_QUAKE_KIND_S);
	}
	frame(lua_state, 155.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_slashm"), 20, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 165.0);
	if is_excute(fighter) {
		QUAKE(fighter, *CAMERA_QUAKE_KIND_S);
	}
	frame(lua_state, 171.0);
	if is_excute(fighter) {
		QUAKE(fighter, *CAMERA_QUAKE_KIND_M);
	}
	frame(lua_state, 176.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_beamm"), 10, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 187.0);
	if is_excute(fighter) {
		QUAKE(fighter, *CAMERA_QUAKE_KIND_S);
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_slashm"), 14, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 202.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_explosionm"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 207.0);
	if is_excute(fighter) {
		QUAKE(fighter, *CAMERA_QUAKE_KIND_M);
	}
	frame(lua_state, 216.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_erase"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 220.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_smashhold1"), 0, true);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 260.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_erase"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 263.0);
	if is_excute(fighter) {
		QUAKE(fighter, *CAMERA_QUAKE_KIND_L);
		RUMBLE_HIT(fighter, Hash40::new("rbkind_explosionl"), 0);
	}
}