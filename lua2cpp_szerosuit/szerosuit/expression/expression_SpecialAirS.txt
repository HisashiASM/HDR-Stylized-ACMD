#[acmd_script( agent = "szerosuit", script = "expression_specialairs" , category = ACMD_EXPRESSION , low_priority)]
unsafe fn expression_specialairs (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	if is_excute(fighter) {
		slope(*MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_LR);
	}
	frame(lua_state, 20.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohitl"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 22.0);
	if is_excute(fighter) {
		RUMBLE_HIT(fighter, Hash40::new("rbkind_attacks"), 4);
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_elecattacks"), 18, true);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 25.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_elecattacks"), 15, true);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 29.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_elecattacks"), 11, true);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 31.0);
	if is_excute(fighter) {
		RUMBLE_HIT(fighter, Hash40::new("rbkind_attackl"), 0);
	}
	frame(lua_state, 36.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_grapplingbeam"), 6, true);
		ControlModule::set_rumble(fighter.module_accessor);
	}
}