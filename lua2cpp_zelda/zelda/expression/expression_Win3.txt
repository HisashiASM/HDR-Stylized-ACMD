#[acmd_script( agent = "zelda", script = "expression_win3" , category = ACMD_EXPRESSION , low_priority)]
unsafe fn expression_win3 (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	WorkModule::is_flag(fighter.module_accessor, *FIGHTER_INSTANCE_WORK_ID_FLAG_RESULT_FIGHTER_SINGLE);
	0x10db70(false, true);
	if is_excute(fighter) {
		ArticleModule::generate_article(fighter.module_accessor, *FIGHTER_ZELDA_GENERATE_ARTICLE_PHANTOM);
		methodlib::L2CValue::as_hash()const(*FIGHTER_ZELDA_GENERATE_ARTICLE_PHANTOM, Hash40::new("demo"));
		ArticleModule::change_motion(fighter.module_accessor);
		ArticleModule::set_visibility_whole(fighter.module_accessor, *FIGHTER_ZELDA_GENERATE_ARTICLE_PHANTOM, true);
	}
	frame(lua_state, 30.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(*FIGHTER_ZELDA_GENERATE_ARTICLE_PHANTOM, Hash40::new("phantom_step_01_a"), Hash40::new("build"));
		methodlib::L2CValue::as_hash()const();
		ArticleModule::set_visibility(fighter.module_accessor);
	}
	wait(lua_state, 1.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(*FIGHTER_ZELDA_GENERATE_ARTICLE_PHANTOM, Hash40::new("hud_end_limit_pos"), Hash40::new("build"));
		methodlib::L2CValue::as_hash()const();
		ArticleModule::set_visibility(fighter.module_accessor);
	}
	wait(lua_state, 5.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(*FIGHTER_ZELDA_GENERATE_ARTICLE_PHANTOM, Hash40::new("phantom_step_02"), Hash40::new("build"));
		methodlib::L2CValue::as_hash()const();
		ArticleModule::set_visibility(fighter.module_accessor);
	}
	wait(lua_state, 5.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(*FIGHTER_ZELDA_GENERATE_ARTICLE_PHANTOM, Hash40::new("phantom_step_03_a"), Hash40::new("build"));
		methodlib::L2CValue::as_hash()const();
		ArticleModule::set_visibility(fighter.module_accessor);
	}
	wait(lua_state, 1.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(*FIGHTER_ZELDA_GENERATE_ARTICLE_PHANTOM, Hash40::new("phantom_step_03_b"), Hash40::new("build"));
		methodlib::L2CValue::as_hash()const();
		ArticleModule::set_visibility(fighter.module_accessor);
	}
	wait(lua_state, 5.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(*FIGHTER_ZELDA_GENERATE_ARTICLE_PHANTOM, Hash40::new("phantom_step_04_a"), Hash40::new("build"));
		methodlib::L2CValue::as_hash()const();
		ArticleModule::set_visibility(fighter.module_accessor);
	}
	wait(lua_state, 1.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(*FIGHTER_ZELDA_GENERATE_ARTICLE_PHANTOM, Hash40::new("phantom_step_04_b"), Hash40::new("build"));
		methodlib::L2CValue::as_hash()const();
		ArticleModule::set_visibility(fighter.module_accessor);
	}
	wait(lua_state, 5.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(*FIGHTER_ZELDA_GENERATE_ARTICLE_PHANTOM, Hash40::new("phantom_step_05"), Hash40::new("build"));
		methodlib::L2CValue::as_hash()const();
		ArticleModule::set_visibility(fighter.module_accessor);
	}
	wait(lua_state, 5.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(*FIGHTER_ZELDA_GENERATE_ARTICLE_PHANTOM, Hash40::new("phantom_step_06_a"), Hash40::new("build"));
		methodlib::L2CValue::as_hash()const();
		ArticleModule::set_visibility(fighter.module_accessor);
	}
	wait(lua_state, 1.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(*FIGHTER_ZELDA_GENERATE_ARTICLE_PHANTOM, Hash40::new("phantom_step_06_b"), Hash40::new("build"));
		methodlib::L2CValue::as_hash()const();
		ArticleModule::set_visibility(fighter.module_accessor);
	}
	wait(lua_state, 5.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(*FIGHTER_ZELDA_GENERATE_ARTICLE_PHANTOM, Hash40::new("rate_pole_value"), Hash40::new("build"));
		methodlib::L2CValue::as_hash()const();
		ArticleModule::set_visibility(fighter.module_accessor);
	}
	wait(lua_state, 5.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(*FIGHTER_ZELDA_GENERATE_ARTICLE_PHANTOM, Hash40::new("phantom_step_08"), Hash40::new("build"));
		methodlib::L2CValue::as_hash()const();
		ArticleModule::set_visibility(fighter.module_accessor);
	}
	wait(lua_state, 5.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(*FIGHTER_ZELDA_GENERATE_ARTICLE_PHANTOM, Hash40::new("phantom_step_09"), Hash40::new("build"));
		methodlib::L2CValue::as_hash()const();
		ArticleModule::set_visibility(fighter.module_accessor);
	}
}