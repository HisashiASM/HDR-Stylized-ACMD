#[acmd_script( agent = "kirby", script = "expression_robotspecialairn" , category = ACMD_EXPRESSION , low_priority)]
unsafe fn expression_robotspecialairn (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	frame(lua_state, 23.0);
	WorkModule::get_float(fighter.module_accessor, *FIGHTER_ROBOT_INSTANCE_WORK_ID_FLOAT_BEAM_ENERGY_VALUE);
	WorkModule::get_param_float(fighter.module_accessor, -1165490952, Hash40::new("param_special_n"), Hash40::new("strong_shoot_energy"));
	if(0x543c60(368)){;
		if is_excute(fighter) {
			methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_beaml"), 0, false);
			ControlModule::set_rumble(fighter.module_accessor);
		}
		else{;
		WorkModule::get_float(fighter.module_accessor, *FIGHTER_ROBOT_INSTANCE_WORK_ID_FLOAT_BEAM_ENERGY_VALUE);
		WorkModule::get_param_float(fighter.module_accessor, -1165490952, Hash40::new("param_special_n"), Hash40::new("miss_shoot_energy"));
		if(0x543c60(368)){;
			if is_excute(fighter) {
				methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_beams"), 0, false);
				ControlModule::set_rumble(fighter.module_accessor);
			}
			else{;
			if is_excute(fighter) {
				methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_blank"), 0, false);
				ControlModule::set_rumble(fighter.module_accessor);
			}
		}
	}
}
}
frame(lua_state, 25.0);
if is_excute(fighter) {
QUAKE(fighter, *CAMERA_QUAKE_KIND_S);
RUMBLE_HIT(fighter, Hash40::new("rbkind_explosion"), 0);
}
}