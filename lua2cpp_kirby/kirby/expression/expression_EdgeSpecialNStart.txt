#[acmd_script( agent = "kirby", script = "expression_edgespecialnstart" , category = ACMD_EXPRESSION , low_priority)]
unsafe fn expression_edgespecialnstart (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	if is_excute(fighter) {
		ItemModule::set_have_item_visibility(fighter.module_accessor, false);
		slope(*MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_LR);
	}
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_attackss"), 3, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	wait(lua_state, 10.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_attackss"), 3, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	wait(lua_state, 10.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_attackss"), 3, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	wait(lua_state, 10.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_attackss"), 3, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	wait(lua_state, 10.0);
	frame(lua_state, 45.0);
	for(5 Iterations){;
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_attacks"), 3, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	wait(lua_state, 8.0);
}
frame(lua_state, 85.0);
for(5 Iterations){;
if is_excute(fighter) {
	methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_attackm"), 3, false);
	ControlModule::set_rumble(fighter.module_accessor);
}
wait(lua_state, 6.0);
}
if is_excute(fighter) {
slope(*MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_LR, 8);
}
}