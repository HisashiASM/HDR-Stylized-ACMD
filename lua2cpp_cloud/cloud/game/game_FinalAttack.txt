#[acmd_script( agent = "cloud", script = "game_finalattack" , category = ACMD_GAME , low_priority)]
unsafe fn game_finalattack (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	if is_excute(fighter) {
		WHOLE_HIT(fighter, *HIT_STATUS_XLU);
		WorkModule::off_flag(fighter.module_accessor, /*Flag*/ *FIGHTER_CLOUD_STATUS_FINAL_FLAG_DISP_WINDOW);
	}
	frame(lua_state, 6.0);
	WorkModule::is_flag(fighter.module_accessor, *FIGHTER_CLOUD_STATUS_FINAL_FLAG_HIT_ALL_OPPONENT);
	if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, true)){;
		if is_excute(fighter) {
			CAM_ZOOM_OUT(fighter);
		}
	}
	get_value_float(*SO_VAR_FLOAT_LR);
	if(0x1801b0(2001248, 0)){;
		if is_excute(fighter) {
			PostureModule::scale(fighter.module_accessor, 220, 0);
			0x1801b0(0, 2.8);
			CAM_ZOOM_IN_FINAL(fighter, 20, -10, -20, 20, 160, true, *FIGHTER_CLOUD_STATUS_FINAL_WORK_INT_ATTACK_HIT_OBJECT_ID, 0);
		}
		else{;
		if is_excute(fighter) {
			PostureModule::scale(fighter.module_accessor, 220, 0);
			0x1801b0(0, 2.4);
			CAM_ZOOM_IN_FINAL(fighter, -20, -10, 20, 20, 160, true, *FIGHTER_CLOUD_STATUS_FINAL_WORK_INT_ATTACK_HIT_OBJECT_ID, 0);
		}
	}
}
frame(lua_state, 7.0);
if is_excute(fighter) {
	ATTACK(fighter, 0, 0, Hash40::new("top"), 2.2, 90, 100, 35, 0, 22.0, 0.0, 5.0, 20.0, None, None, None, 0.4, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, Hash40::new("no"), 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, COLLISION_SOUND_ATTR_CLOUD_FINAL_01, *ATTACK_REGION_NONE);
	AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
}
frame(lua_state, 8.0);
if is_excute(fighter) {
	AttackModule::clear_all(fighter.module_accessor);
}
frame(lua_state, 19.0);
if is_excute(fighter) {
	ATTACK(fighter, 0, 0, Hash40::new("top"), 2.2, 90, 100, 35, 0, 22.0, 0.0, 5.0, 20.0, None, None, None, 0.4, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, Hash40::new("no"), 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, COLLISION_SOUND_ATTR_CLOUD_FINAL_01, *ATTACK_REGION_NONE);
	AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
}
frame(lua_state, 20.0);
if is_excute(fighter) {
	AttackModule::clear_all(fighter.module_accessor);
}
frame(lua_state, 32.0);
if is_excute(fighter) {
	ATTACK(fighter, 0, 0, Hash40::new("top"), 2.2, 90, 100, 35, 0, 22.0, 0.0, 5.0, 20.0, None, None, None, 0.4, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, Hash40::new("no"), 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, COLLISION_SOUND_ATTR_CLOUD_FINAL_01, *ATTACK_REGION_NONE);
	AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
}
frame(lua_state, 33.0);
if is_excute(fighter) {
	AttackModule::clear_all(fighter.module_accessor);
}
frame(lua_state, 49.0);
if is_excute(fighter) {
	ATTACK(fighter, 0, 0, Hash40::new("top"), 2.2, 90, 100, 35, 0, 22.0, 0.0, 5.0, 20.0, None, None, None, 0.4, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, Hash40::new("no"), 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, COLLISION_SOUND_ATTR_CLOUD_FINAL_02, *ATTACK_REGION_NONE);
	AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
}
frame(lua_state, 50.0);
if is_excute(fighter) {
	AttackModule::clear_all(fighter.module_accessor);
}
frame(lua_state, 74.0);
if is_excute(fighter) {
	ATTACK(fighter, 0, 0, Hash40::new("top"), 2.2, 90, 100, 35, 0, 22.0, 0.0, 5.0, 20.0, None, None, None, 0.4, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, Hash40::new("no"), 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, COLLISION_SOUND_ATTR_CLOUD_FINAL_01, *ATTACK_REGION_NONE);
	AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
}
frame(lua_state, 75.0);
if is_excute(fighter) {
	AttackModule::clear_all(fighter.module_accessor);
}
frame(lua_state, 88.0);
if is_excute(fighter) {
	ATTACK(fighter, 0, 0, Hash40::new("top"), 2.2, 90, 100, 35, 0, 22.0, 0.0, 5.0, 20.0, None, None, None, 0.4, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, Hash40::new("no"), 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, COLLISION_SOUND_ATTR_CLOUD_FINAL_01, *ATTACK_REGION_NONE);
	AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
}
frame(lua_state, 89.0);
if is_excute(fighter) {
	AttackModule::clear_all(fighter.module_accessor);
}
frame(lua_state, 105.0);
if is_excute(fighter) {
	ATTACK(fighter, 0, 0, Hash40::new("top"), 2.2, 90, 100, 35, 0, 22.0, 0.0, 5.0, 20.0, None, None, None, 0.4, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, Hash40::new("no"), 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, COLLISION_SOUND_ATTR_CLOUD_FINAL_01, *ATTACK_REGION_NONE);
	AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
}
frame(lua_state, 106.0);
if is_excute(fighter) {
	AttackModule::clear_all(fighter.module_accessor);
}
frame(lua_state, 125.0);
if is_excute(fighter) {
	ATTACK(fighter, 0, 0, Hash40::new("top"), 2.2, 90, 100, 35, 0, 22.0, 0.0, 5.0, 20.0, None, None, None, 0.4, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, Hash40::new("no"), 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, COLLISION_SOUND_ATTR_CLOUD_FINAL_01, *ATTACK_REGION_NONE);
	AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
}
frame(lua_state, 126.0);
if is_excute(fighter) {
	AttackModule::clear_all(fighter.module_accessor);
}
frame(lua_state, 143.0);
if is_excute(fighter) {
	ATTACK(fighter, 0, 0, Hash40::new("top"), 2.2, 90, 100, 35, 0, 22.0, 0.0, 5.0, 20.0, None, None, None, 0.4, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, Hash40::new("no"), 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, COLLISION_SOUND_ATTR_CLOUD_FINAL_01, *ATTACK_REGION_NONE);
	AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
}
frame(lua_state, 144.0);
if is_excute(fighter) {
	AttackModule::clear_all(fighter.module_accessor);
}
frame(lua_state, 161.0);
if is_excute(fighter) {
	ATTACK(fighter, 0, 0, Hash40::new("top"), 2.2, 90, 100, 35, 0, 22.0, 0.0, 5.0, 20.0, None, None, None, 0.4, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, Hash40::new("no"), 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, COLLISION_SOUND_ATTR_CLOUD_FINAL_02, *ATTACK_REGION_NONE);
	AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
}
frame(lua_state, 162.0);
if is_excute(fighter) {
	AttackModule::clear_all(fighter.module_accessor);
}
frame(lua_state, 186.0);
if is_excute(fighter) {
	ATTACK(fighter, 0, 0, Hash40::new("top"), 2.2, 90, 100, 35, 0, 22.0, 0.0, 5.0, 20.0, None, None, None, 0.4, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, Hash40::new("no"), 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, COLLISION_SOUND_ATTR_CLOUD_FINAL_01, *ATTACK_REGION_NONE);
	AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
}
frame(lua_state, 187.0);
if is_excute(fighter) {
	AttackModule::clear_all(fighter.module_accessor);
}
frame(lua_state, 195.0);
if is_excute(fighter) {
	ATTACK(fighter, 0, 0, Hash40::new("top"), 2.2, 90, 100, 35, 0, 22.0, 0.0, 5.0, 20.0, None, None, None, 0.4, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, Hash40::new("no"), 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, COLLISION_SOUND_ATTR_CLOUD_FINAL_01, *ATTACK_REGION_NONE);
	AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
}
frame(lua_state, 196.0);
if is_excute(fighter) {
	AttackModule::clear_all(fighter.module_accessor);
}
frame(lua_state, 203.0);
if is_excute(fighter) {
	ATTACK(fighter, 0, 0, Hash40::new("top"), 2.2, 90, 100, 35, 0, 22.0, 0.0, 5.0, 20.0, None, None, None, 0.4, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, Hash40::new("no"), 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, COLLISION_SOUND_ATTR_CLOUD_FINAL_01, *ATTACK_REGION_NONE);
	AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
}
frame(lua_state, 204.0);
if is_excute(fighter) {
	AttackModule::clear_all(fighter.module_accessor);
}
frame(lua_state, 214.0);
if is_excute(fighter) {
	ATTACK(fighter, 0, 0, Hash40::new("top"), 2.2, 90, 100, 35, 0, 22.0, 0.0, 5.0, 20.0, None, None, None, 0.4, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, Hash40::new("no"), 0.0, 0, false, false, false, true, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, COLLISION_SOUND_ATTR_CLOUD_FINAL_02, *ATTACK_REGION_NONE);
	AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
	WorkModule::on_flag(fighter.module_accessor, /*Flag*/ *FIGHTER_CLOUD_STATUS_FINAL_FLAG_ATTACK_REQUEST_LOOP_DAMAGE_MOTION);
	WorkModule::set_int64(fighter.module_accessor, Hash40::new("fall_damage"), *FIGHTER_CLOUD_STATUS_FINAL_WORK_INT_ATTACK_REQUEST_LOOP_DAMAGE_MOTION);
}
frame(lua_state, 216.0);
if is_excute(fighter) {
	AttackModule::clear_all(fighter.module_accessor);
	WorkModule::off_flag(fighter.module_accessor, /*Flag*/ *FIGHTER_CLOUD_STATUS_FINAL_FLAG_ATTACK_REQUEST_LOOP_DAMAGE_MOTION);
	notify_event_msc_cmd(0x296be39a69, 8, 70);
}
frame(lua_state, 217.0);
WorkModule::is_flag(fighter.module_accessor, *FIGHTER_CLOUD_STATUS_FINAL_FLAG_HIT_ALL_OPPONENT);
if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, true)){;
	if is_excute(fighter) {
		CAM_ZOOM_OUT(fighter);
	}
}
get_value_float(*SO_VAR_FLOAT_LR);
if(0x1801b0(2001256, 0)){;
	if is_excute(fighter) {
		PostureModule::scale(fighter.module_accessor, 30, 0);
		0x1801b0(0, 2.4);
		CAM_ZOOM_IN_arg6(0.6, -0.6, true);
		camera(*MA_MSC_CMD_CAMERA_CAM_OFFSET, 0, 12);
	}
	else{;
	if is_excute(fighter) {
		PostureModule::scale(fighter.module_accessor, 30, 0);
		0x1801b0(0, 2);
		CAM_ZOOM_IN_arg6(0.2, 0.6, true);
		camera(*MA_MSC_CMD_CAMERA_CAM_OFFSET, 0, 12);
	}
}
}
frame(lua_state, 220.0);
if is_excute(fighter) {
notify_event_msc_cmd(0x348e125d20, 0x14d842c3f5, true, true);
notify_event_msc_cmd(0x348e125d20, 0x10cf1285a2, true, true);
}
frame(lua_state, 285.0);
if is_excute(fighter) {
ATTACK(fighter, 0, 0, Hash40::new("top"), 5.0, 70, 100, 0, 50, 10.0, 0.0, 5.0, 12.0, None, None, None, 1.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, Hash40::new("no"), 0.0, 0, false, false, false, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, COLLISION_SOUND_ATTR_CLOUD_FINAL_03, *ATTACK_REGION_NONE);
ATTACK(fighter, 1, 0, Hash40::new("top"), 5.0, 70, 100, 0, 50, 12.0, 0.0, 5.0, 24.0, None, None, None, 1.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, Hash40::new("no"), 0.0, 0, false, false, false, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, COLLISION_SOUND_ATTR_CLOUD_FINAL_03, *ATTACK_REGION_NONE);
ATTACK(fighter, 2, 0, Hash40::new("top"), 5.0, 70, 100, 0, 50, 14.0, 0.0, 5.0, 38.0, None, None, None, 1.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, Hash40::new("no"), 0.0, 0, false, false, false, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, COLLISION_SOUND_ATTR_CLOUD_FINAL_03, *ATTACK_REGION_NONE);
AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
WorkModule::on_flag(fighter.module_accessor, /*Flag*/ *FIGHTER_CLOUD_STATUS_FINAL_FLAG_ATTACK_END_HIT);
WorkModule::on_flag(fighter.module_accessor, /*Flag*/ *FIGHTER_CLOUD_STATUS_FINAL_FLAG_FALL_START);
}
WorkModule::is_flag(fighter.module_accessor, *FIGHTER_CLOUD_STATUS_FINAL_FLAG_HIT_ALL_OPPONENT);
if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, true)){;
if is_excute(fighter) {
	CAM_ZOOM_OUT(fighter);
	camera(*MA_MSC_CMD_CAMERA_CAM_OFFSET, 0, 0);
	camera(*MA_MSC_CMD_CAMERA_CAM_RECT, 0, 0, 10, 0);
	CAM_ZOOM_IN_arg6(35, 0, 2.2, 0, 0, true);
}
}
}