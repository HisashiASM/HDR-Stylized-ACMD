#[acmd_script( agent = "cloud", script = "game_finalhit" , category = ACMD_GAME , low_priority)]
unsafe fn game_finalhit (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	if is_excute(fighter) {
		WHOLE_HIT(fighter, *HIT_STATUS_XLU);
	}
	frame(lua_state, 1.0);
	if is_excute(fighter) {
		ATTACK(fighter, 0, 0, Hash40::new("top"), 3.0, 361, 100, 100, 0, 15.0, 0.0, 8.0, 4.0, Some(0.0), Some(8.0), Some(20.0), 3.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, Hash40::new("no"), 0.0, 0, false, false, false, false, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_CLOUD_HIT, *ATTACK_REGION_NONE);
		AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
	}
	frame(lua_state, 5.0);
	WorkModule::is_flag(fighter.module_accessor, *FIGHTER_CLOUD_STATUS_FINAL_FLAG_HIT_ALL_OPPONENT);
	if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, true)){;
		FT_MOTION_RATE(fighter, 0.5);
		WorkModule::get_float(fighter.module_accessor, *FIGHTER_CLOUD_STATUS_FINAL_WORK_FLOAT_ATTACK_TARGET_LR);
		if(0x1801b0(1699148503, 0)){;
			if is_excute(fighter) {
				CAM_ZOOM_OUT(fighter);
				PostureModule::scale(fighter.module_accessor, 32, 0);
				0x1801b0(1699148503, 3.2);
				CAM_ZOOM_IN_FINAL(fighter, 0, 0, 30, -10, 195, true, *FIGHTER_CLOUD_STATUS_FINAL_WORK_INT_ATTACK_HIT_OBJECT_ID, 10);
			}
			else{;
			if is_excute(fighter) {
				CAM_ZOOM_OUT(fighter);
				PostureModule::scale(fighter.module_accessor, 32, 0);
				0x1801b0(1699148503, 2.8);
				CAM_ZOOM_IN_FINAL(fighter, 0, 0, -30, -10, 195, true, *FIGHTER_CLOUD_STATUS_FINAL_WORK_INT_ATTACK_HIT_OBJECT_ID, 10);
			}
		}
	}
}
frame(lua_state, 6.0);
if is_excute(fighter) {
	ATTACK(fighter, 0, 0, Hash40::new("top"), 3.0, 361, 100, 100, 0, 18.0, 0.0, 14.0, 3.0, Some(0.0), Some(14.0), Some(-3.0), 3.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, Hash40::new("no"), 0.0, 0, false, false, false, false, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_NO_FLOOR, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_CLOUD_HIT, *ATTACK_REGION_NONE);
	AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
}
frame(lua_state, 12.0);
if is_excute(fighter) {
	AttackModule::clear_all(fighter.module_accessor);
}
frame(lua_state, 36.0);
if is_excute(fighter) {
	WorkModule::on_flag(fighter.module_accessor, /*Flag*/ *FIGHTER_CLOUD_STATUS_FINAL_FLAG_ENABLE_MOVE);
}
}