#[acmd_script( agent = "cloud", script = "expression_finalattack" , category = ACMD_EXPRESSION , low_priority)]
unsafe fn expression_finalattack (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	if is_excute(fighter) {
		ItemModule::set_have_item_visibility(fighter.module_accessor, false);
	}
	WorkModule::is_flag(fighter.module_accessor, *FIGHTER_CLOUD_STATUS_FINAL_FLAG_HIT_ALL_OPPONENT);
	if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, true)){;
		frame(lua_state, 7.0);
		if is_excute(fighter) {
			RUMBLE_HIT(fighter, Hash40::new("rbkind_slashm"), 12);
		}
	}
	frame(lua_state, 10.0);
	if is_excute(fighter) {
		QUAKE(fighter, *CAMERA_QUAKE_KIND_XL);
	}
	frame(lua_state, 19.0);
	if is_excute(fighter) {
		RUMBLE_HIT(fighter, Hash40::new("rbkind_slashm"), 12);
	}
	frame(lua_state, 32.0);
	if is_excute(fighter) {
		RUMBLE_HIT(fighter, Hash40::new("rbkind_slashm"), 0);
	}
	frame(lua_state, 49.0);
	if is_excute(fighter) {
		RUMBLE_HIT(fighter, Hash40::new("rbkind_slashm"), 0);
	}
	frame(lua_state, 50.0);
	if is_excute(fighter) {
		QUAKE(fighter, *CAMERA_QUAKE_KIND_L);
	}
	frame(lua_state, 74.0);
	if is_excute(fighter) {
		RUMBLE_HIT(fighter, Hash40::new("rbkind_slashm"), 14);
	}
	frame(lua_state, 75.0);
	if is_excute(fighter) {
		QUAKE(fighter, *CAMERA_QUAKE_KIND_L);
	}
	frame(lua_state, 88.0);
	if is_excute(fighter) {
		RUMBLE_HIT(fighter, Hash40::new("rbkind_slashm"), 0);
	}
	frame(lua_state, 105.0);
	if is_excute(fighter) {
		RUMBLE_HIT(fighter, Hash40::new("rbkind_slashm"), 0);
	}
	frame(lua_state, 110.0);
	if is_excute(fighter) {
		QUAKE(fighter, *CAMERA_QUAKE_KIND_L);
	}
	frame(lua_state, 125.0);
	if is_excute(fighter) {
		RUMBLE_HIT(fighter, Hash40::new("rbkind_slashm"), 0);
	}
	frame(lua_state, 143.0);
	if is_excute(fighter) {
		RUMBLE_HIT(fighter, Hash40::new("rbkind_slashm"), 0);
	}
	frame(lua_state, 160.0);
	if is_excute(fighter) {
		QUAKE(fighter, *CAMERA_QUAKE_KIND_XL);
	}
	frame(lua_state, 161.0);
	if is_excute(fighter) {
		RUMBLE_HIT(fighter, Hash40::new("rbkind_slashm"), 0);
	}
	frame(lua_state, 186.0);
	if is_excute(fighter) {
		RUMBLE_HIT(fighter, Hash40::new("rbkind_slashm"), 8);
	}
	frame(lua_state, 195.0);
	if is_excute(fighter) {
		RUMBLE_HIT(fighter, Hash40::new("rbkind_slashs"), 8);
	}
	frame(lua_state, 200.0);
	if is_excute(fighter) {
		QUAKE(fighter, *CAMERA_QUAKE_KIND_M);
	}
	frame(lua_state, 203.0);
	if is_excute(fighter) {
		RUMBLE_HIT(fighter, Hash40::new("rbkind_slashs"), 0);
	}
	frame(lua_state, 214.0);
	if is_excute(fighter) {
		RUMBLE_HIT(fighter, Hash40::new("rbkind_slashs"), 0);
	}
	frame(lua_state, 228.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_spinattack"), 0, true);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 250.0);
	if is_excute(fighter) {
		QUAKE(fighter, *CAMERA_QUAKE_KIND_L);
	}
	frame(lua_state, 262.0);
	if is_excute(fighter) {
		QUAKE(fighter, *CAMERA_QUAKE_KIND_L);
	}
	frame(lua_state, 271.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_erase"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 274.0);
	if is_excute(fighter) {
		QUAKE(fighter, *CAMERA_QUAKE_KIND_L);
	}
	frame(lua_state, 285.0);
	if is_excute(fighter) {
		RUMBLE_HIT(fighter, Hash40::new("rbkind_slashll"), 0);
	}
	else{;
	frame(lua_state, 0.0);
	if is_excute(fighter) {
		RUMBLE_HIT(fighter, Hash40::new("rbkind_slashm"), 12);
	}
}
frame(lua_state, 10.0);
if is_excute(fighter) {
	QUAKE(fighter, *CAMERA_QUAKE_KIND_L);
}
frame(lua_state, 19.0);
if is_excute(fighter) {
	RUMBLE_HIT(fighter, Hash40::new("rbkind_slashm"), 12);
}
frame(lua_state, 32.0);
if is_excute(fighter) {
	RUMBLE_HIT(fighter, Hash40::new("rbkind_slashm"), 0);
}
frame(lua_state, 49.0);
if is_excute(fighter) {
	RUMBLE_HIT(fighter, Hash40::new("rbkind_slashm"), 0);
}
frame(lua_state, 50.0);
if is_excute(fighter) {
	QUAKE(fighter, *CAMERA_QUAKE_KIND_M);
}
frame(lua_state, 74.0);
if is_excute(fighter) {
	RUMBLE_HIT(fighter, Hash40::new("rbkind_slashm"), 14);
}
frame(lua_state, 75.0);
if is_excute(fighter) {
	QUAKE(fighter, *CAMERA_QUAKE_KIND_M);
}
frame(lua_state, 88.0);
if is_excute(fighter) {
	RUMBLE_HIT(fighter, Hash40::new("rbkind_slashm"), 0);
}
frame(lua_state, 105.0);
if is_excute(fighter) {
	RUMBLE_HIT(fighter, Hash40::new("rbkind_slashm"), 0);
}
frame(lua_state, 110.0);
if is_excute(fighter) {
	QUAKE(fighter, *CAMERA_QUAKE_KIND_M);
}
frame(lua_state, 125.0);
if is_excute(fighter) {
	RUMBLE_HIT(fighter, Hash40::new("rbkind_slashm"), 0);
}
frame(lua_state, 143.0);
if is_excute(fighter) {
	RUMBLE_HIT(fighter, Hash40::new("rbkind_slashm"), 0);
}
frame(lua_state, 160.0);
if is_excute(fighter) {
	QUAKE(fighter, *CAMERA_QUAKE_KIND_L);
}
frame(lua_state, 161.0);
if is_excute(fighter) {
	RUMBLE_HIT(fighter, Hash40::new("rbkind_slashm"), 0);
}
frame(lua_state, 186.0);
if is_excute(fighter) {
	RUMBLE_HIT(fighter, Hash40::new("rbkind_slashm"), 8);
}
frame(lua_state, 195.0);
if is_excute(fighter) {
	RUMBLE_HIT(fighter, Hash40::new("rbkind_slashs"), 8);
}
frame(lua_state, 200.0);
if is_excute(fighter) {
	QUAKE(fighter, *CAMERA_QUAKE_KIND_M);
}
frame(lua_state, 203.0);
if is_excute(fighter) {
	RUMBLE_HIT(fighter, Hash40::new("rbkind_slashs"), 10);
}
frame(lua_state, 214.0);
if is_excute(fighter) {
	RUMBLE_HIT(fighter, Hash40::new("rbkind_slashs"), 0);
}
frame(lua_state, 228.0);
if is_excute(fighter) {
	methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_spinattack"), 0, true);
	ControlModule::set_rumble(fighter.module_accessor);
}
frame(lua_state, 250.0);
if is_excute(fighter) {
	QUAKE(fighter, *CAMERA_QUAKE_KIND_S);
}
frame(lua_state, 262.0);
if is_excute(fighter) {
	QUAKE(fighter, *CAMERA_QUAKE_KIND_S);
}
frame(lua_state, 271.0);
if is_excute(fighter) {
	methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_erase"), 0, false);
	ControlModule::set_rumble(fighter.module_accessor);
}
frame(lua_state, 274.0);
if is_excute(fighter) {
	QUAKE(fighter, *CAMERA_QUAKE_KIND_S);
}
frame(lua_state, 285.0);
if is_excute(fighter) {
	RUMBLE_HIT(fighter, Hash40::new("rbkind_slashll"), 0);
}
}