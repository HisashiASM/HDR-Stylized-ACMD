#[acmd_script( agent = "palutena_explosiveflame", script = "game_explode" , category = ACMD_GAME , low_priority)]
unsafe fn game_explode (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	if is_excute(fighter) {
		ATTACK(fighter, 0, 0, Hash40::new("top"), 1.5, 160, 100, 0, 50, 4.8, 0.0, 0.0, 0.0, None, None, None, 1.0, 0.4, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, -0.7, 0.0, 5, true, true, false, false, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_fire"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_BOMB, *ATTACK_REGION_BOMB);
		AttackModule::set_no_damage_fly_smoke_all(fighter.module_accessor, true, false);
	}
	wait(lua_state, 4.0);
	if is_excute(fighter) {
		AttackModule::set_size(fighter.module_accessor, /*ID*/ 0, /*Size*/ 6);
	}
	wait(lua_state, 4.0);
	if is_excute(fighter) {
		AttackModule::set_size(fighter.module_accessor, /*ID*/ 0, /*Size*/ 7.2);
	}
	wait(lua_state, 4.0);
	if is_excute(fighter) {
		AttackModule::set_size(fighter.module_accessor, /*ID*/ 0, /*Size*/ 8.4);
	}
	wait(lua_state, 4.0);
	if is_excute(fighter) {
		AttackModule::set_size(fighter.module_accessor, /*ID*/ 0, /*Size*/ 9.6);
	}
	wait(lua_state, 4.0);
	if is_excute(fighter) {
		AttackModule::set_size(fighter.module_accessor, /*ID*/ 0, /*Size*/ 10.8);
	}
	wait(lua_state, 4.0);
	if is_excute(fighter) {
		AttackModule::set_size(fighter.module_accessor, /*ID*/ 0, /*Size*/ 12);
	}
	wait(lua_state, 4.0);
	if is_excute(fighter) {
		AttackModule::clear_all(fighter.module_accessor);
		AREA_WIND_2ND_RAD(0, 1, 0.02, 1000, 1, 0, 0, 29);
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_explosion"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	wait(lua_state, 1.0);
	if is_excute(fighter) {
		ATTACK(fighter, 0, 1, Hash40::new("top"), 5.5, 84, 141, 0, 60, 15.5, 0.0, 0.0, 0.0, None, None, None, 1.5, 0.4, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, -2.7, 0.0, 0, true, true, false, false, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_fire"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_BOMB, *ATTACK_REGION_BOMB);
	}
	wait(lua_state, 1.0);
	if is_excute(fighter) {
		AttackModule::clear_all(fighter.module_accessor);
	}
}