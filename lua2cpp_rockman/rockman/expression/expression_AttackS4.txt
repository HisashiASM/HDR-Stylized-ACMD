#[acmd_script( agent = "rockman", script = "expression_attacks4" , category = ACMD_EXPRESSION , low_priority)]
unsafe fn expression_attacks4 (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	if is_excute(fighter) {
		notify_event_msc_cmd(0x1f5b14bb65, *FIGHTER_ROCKMAN_ARM_LEFT, *FIGHTER_ROCKMAN_ARMFORM_ROCKBUSTER, 5);
		notify_event_msc_cmd(0x1f5b14bb65, *FIGHTER_ROCKMAN_ARM_RIGHT, *FIGHTER_ROCKMAN_ARMFORM_HAND, 0);
		slope(*MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_LR);
		ItemModule::set_have_item_visibility(fighter.module_accessor, false);
	}
	frame(lua_state, 10.0);
	execute(10);
	if is_excute(fighter) {
		ItemModule::set_have_item_visibility(fighter.module_accessor, false);
		slope(*MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_LR);
	}
	frame(lua_state, 19.0);
	WorkModule::get_float(fighter.module_accessor, *FIGHTER_STATUS_WORK_ID_FLOAT_RESERVE_HOLD_RATE);
	if(methodlib::L2CValue::operator<=(lib::L2CValueconst&)const(-756939156, 1)){;
		if is_excute(fighter) {
			QUAKE(fighter, *CAMERA_QUAKE_KIND_M);
			methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_beaml"), 0, false);
			ControlModule::set_rumble(fighter.module_accessor);
		}
		else{;
		if is_excute(fighter) {
			QUAKE(fighter, *CAMERA_QUAKE_KIND_S);
			methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_beams"), 0, false);
			ControlModule::set_rumble(fighter.module_accessor);
		}
	}
}
}