#[acmd_script( agent = "rockman", script = "expression_appeallwr" , category = ACMD_EXPRESSION , low_priority)]
unsafe fn expression_appeallwr (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	if is_excute(fighter) {
		slope(*MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_LR);
	}
	frame(lua_state, 12.0);
	if is_excute(fighter) {
		VisibilityModule::set_whole(fighter.module_accessor, false);
	}
	frame(lua_state, 13.0);
	if is_excute(fighter) {
		VisibilityModule::set_whole(fighter.module_accessor, true);
	}
	frame(lua_state, 14.0);
	if is_excute(fighter) {
		VisibilityModule::set_whole(fighter.module_accessor, false);
	}
	frame(lua_state, 15.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_awaken"), 5, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 45.0);
	if is_excute(fighter) {
		VisibilityModule::set_whole(fighter.module_accessor, true);
	}
	frame(lua_state, 46.0);
	if is_excute(fighter) {
		VisibilityModule::set_whole(fighter.module_accessor, false);
	}
	frame(lua_state, 47.0);
	if is_excute(fighter) {
		VisibilityModule::set_whole(fighter.module_accessor, true);
	}
	frame(lua_state, 48.0);
	if is_excute(fighter) {
		VisibilityModule::set_whole(fighter.module_accessor, false);
	}
	frame(lua_state, 49.0);
	if is_excute(fighter) {
		VisibilityModule::set_whole(fighter.module_accessor, true);
	}
	frame(lua_state, 50.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohitm"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 52.0);
	if is_excute(fighter) {
		VisibilityModule::set_whole(fighter.module_accessor, false);
	}
	frame(lua_state, 53.0);
	if is_excute(fighter) {
		VisibilityModule::set_whole(fighter.module_accessor, true);
	}
}