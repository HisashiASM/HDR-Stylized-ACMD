#[acmd_script( agent = "gamewatch", script = "expression_sleeploop" , category = ACMD_EXPRESSION , low_priority)]
unsafe fn expression_sleeploop (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	wait_loop_sync_mot();
	methodlua2cpp::L2CFighterAnimcmdExpressionCommon::expression_SleepLoopRumble()();
	if is_excute(fighter) {
		slope(*MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_TOP);
	}
	wait(lua_state, 1.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_sleep"), 0, true);
		ControlModule::set_rumble(fighter.module_accessor);
		VisibilityModule::set_int64(fighter.module_accessor, Hash40::new("head"), Hash40::new("head_close"));
	}
	get_value_float(*SO_VAR_FLOAT_LR);
	if(0x102320(480, 0)){;
		if is_excute(fighter) {
			VisibilityModule::set_int64(fighter.module_accessor, Hash40::new("zzz"), Hash40::new("r_zzz_5"));
		}
		else{;
		if is_excute(fighter) {
			VisibilityModule::set_int64(fighter.module_accessor, Hash40::new("zzz"), Hash40::new("l_zzz_5"));
		}
	}
}
wait(lua_state, 30.0);
get_value_float(*SO_VAR_FLOAT_LR);
if(0x102320(928, 0)){;
	if is_excute(fighter) {
		VisibilityModule::set_int64(fighter.module_accessor, Hash40::new("zzz"), Hash40::new("r_zzz_4"));
	}
	else{;
	if is_excute(fighter) {
		VisibilityModule::set_int64(fighter.module_accessor, Hash40::new("zzz"), Hash40::new("l_zzz_4"));
	}
}
}
wait(lua_state, 30.0);
get_value_float(*SO_VAR_FLOAT_LR);
VisibilityModule::set_int64(fighter.module_accessor, Hash40::new("zzz"), Hash40::new("l_zzz_3"));
}