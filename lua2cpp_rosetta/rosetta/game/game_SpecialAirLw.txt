#[acmd_script( agent = "rosetta", script = "game_specialairlw" , category = ACMD_GAME , low_priority)]
unsafe fn game_specialairlw (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	frame(lua_state, 3.0);
	if is_excute(fighter) {
		WorkModule::on_flag(fighter.module_accessor, /*Flag*/ *FIGHTER_ROSETTA_STATUS_SPECIAL_LW_FLAG_ENABLE_SEARCH);
	}
	if is_excute(fighter) {
		ItemModule::pickup_item(fighter.module_accessor, *ITEM_SIZE_LIGHT, *FIGHTER_HAVE_ITEM_WORK_TEMPORARY, *ITEM_TRAIT_FLAG_QUICK);
		ItemModule::use_item(fighter.module_accessor, false, *FIGHTER_HAVE_ITEM_WORK_TEMPORARY);
		ItemModule::pickup_item(fighter.module_accessor, *ITEM_SIZE_LIGHT);
	}
	wait(false, 1);
	if is_excute(fighter) {
		ItemModule::pickup_item(fighter.module_accessor, *ITEM_SIZE_LIGHT, *FIGHTER_HAVE_ITEM_WORK_TEMPORARY, *ITEM_TRAIT_FLAG_QUICK);
		ItemModule::use_item(fighter.module_accessor, false, *FIGHTER_HAVE_ITEM_WORK_TEMPORARY);
		ItemModule::pickup_item(fighter.module_accessor, *ITEM_SIZE_LIGHT);
	}
	wait(false, 1);
	if is_excute(fighter) {
		ItemModule::pickup_item(fighter.module_accessor, *ITEM_SIZE_LIGHT, *FIGHTER_HAVE_ITEM_WORK_TEMPORARY, *ITEM_TRAIT_FLAG_QUICK);
		ItemModule::use_item(fighter.module_accessor, false, *FIGHTER_HAVE_ITEM_WORK_TEMPORARY);
		ItemModule::pickup_item(fighter.module_accessor, *ITEM_SIZE_LIGHT);
	}
	wait(false, 1);
	if is_excute(fighter) {
		ItemModule::pickup_item(fighter.module_accessor, *ITEM_SIZE_LIGHT, *FIGHTER_HAVE_ITEM_WORK_TEMPORARY, *ITEM_TRAIT_FLAG_QUICK);
		ItemModule::use_item(fighter.module_accessor, false, *FIGHTER_HAVE_ITEM_WORK_TEMPORARY);
		ItemModule::pickup_item(fighter.module_accessor, *ITEM_SIZE_LIGHT);
	}
	wait(false, 1);
	if is_excute(fighter) {
		ItemModule::pickup_item(fighter.module_accessor, *ITEM_SIZE_LIGHT, *FIGHTER_HAVE_ITEM_WORK_TEMPORARY, *ITEM_TRAIT_FLAG_QUICK);
		ItemModule::use_item(fighter.module_accessor, false, *FIGHTER_HAVE_ITEM_WORK_TEMPORARY);
		ItemModule::pickup_item(fighter.module_accessor, *ITEM_SIZE_LIGHT);
	}
	wait(false, 1);
	if is_excute(fighter) {
		ItemModule::pickup_item(fighter.module_accessor, *ITEM_SIZE_LIGHT, *FIGHTER_HAVE_ITEM_WORK_TEMPORARY, *ITEM_TRAIT_FLAG_QUICK);
		ItemModule::use_item(fighter.module_accessor, false, *FIGHTER_HAVE_ITEM_WORK_TEMPORARY);
		ItemModule::pickup_item(fighter.module_accessor, *ITEM_SIZE_LIGHT);
	}
	wait(false, 1);
	if is_excute(fighter) {
		ItemModule::pickup_item(fighter.module_accessor, *ITEM_SIZE_LIGHT, *FIGHTER_HAVE_ITEM_WORK_TEMPORARY, *ITEM_TRAIT_FLAG_QUICK);
		ItemModule::use_item(fighter.module_accessor, false, *FIGHTER_HAVE_ITEM_WORK_TEMPORARY);
		ItemModule::pickup_item(fighter.module_accessor, *ITEM_SIZE_LIGHT);
	}
	wait(false, 1);
	if is_excute(fighter) {
		ItemModule::pickup_item(fighter.module_accessor, *ITEM_SIZE_LIGHT, *FIGHTER_HAVE_ITEM_WORK_TEMPORARY, *ITEM_TRAIT_FLAG_QUICK);
		ItemModule::use_item(fighter.module_accessor, false, *FIGHTER_HAVE_ITEM_WORK_TEMPORARY);
		ItemModule::pickup_item(fighter.module_accessor, *ITEM_SIZE_LIGHT);
	}
	wait(false, 1);
	if is_excute(fighter) {
		ItemModule::pickup_item(fighter.module_accessor, *ITEM_SIZE_LIGHT, *FIGHTER_HAVE_ITEM_WORK_TEMPORARY, *ITEM_TRAIT_FLAG_QUICK);
		ItemModule::use_item(fighter.module_accessor, false, *FIGHTER_HAVE_ITEM_WORK_TEMPORARY);
		ItemModule::pickup_item(fighter.module_accessor, *ITEM_SIZE_LIGHT);
	}
	wait(false, 1);
	if is_excute(fighter) {
		ItemModule::pickup_item(fighter.module_accessor, *ITEM_SIZE_LIGHT, *FIGHTER_HAVE_ITEM_WORK_TEMPORARY, *ITEM_TRAIT_FLAG_QUICK);
		ItemModule::use_item(fighter.module_accessor, false, *FIGHTER_HAVE_ITEM_WORK_TEMPORARY);
		ItemModule::pickup_item(fighter.module_accessor, *ITEM_SIZE_LIGHT);
	}
	wait(false, 1);
	if is_excute(fighter) {
		ItemModule::pickup_item(fighter.module_accessor, *ITEM_SIZE_LIGHT, *FIGHTER_HAVE_ITEM_WORK_TEMPORARY, *ITEM_TRAIT_FLAG_QUICK);
		ItemModule::use_item(fighter.module_accessor, false, *FIGHTER_HAVE_ITEM_WORK_TEMPORARY);
		ItemModule::pickup_item(fighter.module_accessor, *ITEM_SIZE_LIGHT);
	}
	wait(false, 1);
	if is_excute(fighter) {
		ItemModule::pickup_item(fighter.module_accessor, *ITEM_SIZE_LIGHT, *FIGHTER_HAVE_ITEM_WORK_TEMPORARY, *ITEM_TRAIT_FLAG_QUICK);
		ItemModule::use_item(fighter.module_accessor, false, *FIGHTER_HAVE_ITEM_WORK_TEMPORARY);
		ItemModule::pickup_item(fighter.module_accessor, *ITEM_SIZE_LIGHT);
	}
	wait(false, 1);
	if is_excute(fighter) {
		ItemModule::pickup_item(fighter.module_accessor, *ITEM_SIZE_LIGHT, *FIGHTER_HAVE_ITEM_WORK_TEMPORARY, *ITEM_TRAIT_FLAG_QUICK);
		ItemModule::use_item(fighter.module_accessor, false, *FIGHTER_HAVE_ITEM_WORK_TEMPORARY);
		ItemModule::pickup_item(fighter.module_accessor, *ITEM_SIZE_LIGHT);
	}
	wait(false, 1);
	if is_excute(fighter) {
		ItemModule::pickup_item(fighter.module_accessor, *ITEM_SIZE_LIGHT, *FIGHTER_HAVE_ITEM_WORK_TEMPORARY, *ITEM_TRAIT_FLAG_QUICK);
		ItemModule::use_item(fighter.module_accessor, false, *FIGHTER_HAVE_ITEM_WORK_TEMPORARY);
		ItemModule::pickup_item(fighter.module_accessor, *ITEM_SIZE_LIGHT);
	}
	wait(false, 1);
	if is_excute(fighter) {
		ItemModule::pickup_item(fighter.module_accessor, *ITEM_SIZE_LIGHT, *FIGHTER_HAVE_ITEM_WORK_TEMPORARY, *ITEM_TRAIT_FLAG_QUICK);
		ItemModule::use_item(fighter.module_accessor, false, *FIGHTER_HAVE_ITEM_WORK_TEMPORARY);
		ItemModule::pickup_item(fighter.module_accessor, *ITEM_SIZE_LIGHT);
	}
	wait(false, 1);
	if is_excute(fighter) {
		ItemModule::pickup_item(fighter.module_accessor, *ITEM_SIZE_LIGHT, *FIGHTER_HAVE_ITEM_WORK_TEMPORARY, *ITEM_TRAIT_FLAG_QUICK);
		ItemModule::use_item(fighter.module_accessor, false, *FIGHTER_HAVE_ITEM_WORK_TEMPORARY);
		ItemModule::pickup_item(fighter.module_accessor, *ITEM_SIZE_LIGHT);
	}
	wait(false, 1);
	if is_excute(fighter) {
		ItemModule::pickup_item(fighter.module_accessor, *ITEM_SIZE_LIGHT, *FIGHTER_HAVE_ITEM_WORK_TEMPORARY, *ITEM_TRAIT_FLAG_QUICK);
		ItemModule::use_item(fighter.module_accessor, false, *FIGHTER_HAVE_ITEM_WORK_TEMPORARY);
		ItemModule::pickup_item(fighter.module_accessor, *ITEM_SIZE_LIGHT);
	}
	wait(false, 1);
	if is_excute(fighter) {
		ItemModule::pickup_item(fighter.module_accessor, *ITEM_SIZE_LIGHT, *FIGHTER_HAVE_ITEM_WORK_TEMPORARY, *ITEM_TRAIT_FLAG_QUICK);
		ItemModule::use_item(fighter.module_accessor, false, *FIGHTER_HAVE_ITEM_WORK_TEMPORARY);
		ItemModule::pickup_item(fighter.module_accessor, *ITEM_SIZE_LIGHT);
	}
	wait(false, 1);
	if is_excute(fighter) {
		ItemModule::pickup_item(fighter.module_accessor, *ITEM_SIZE_LIGHT, *FIGHTER_HAVE_ITEM_WORK_TEMPORARY, *ITEM_TRAIT_FLAG_QUICK);
		ItemModule::use_item(fighter.module_accessor, false, *FIGHTER_HAVE_ITEM_WORK_TEMPORARY);
		ItemModule::pickup_item(fighter.module_accessor, *ITEM_SIZE_LIGHT);
	}
	wait(false, 1);
	if is_excute(fighter) {
		ItemModule::pickup_item(fighter.module_accessor, *ITEM_SIZE_LIGHT, *FIGHTER_HAVE_ITEM_WORK_TEMPORARY, *ITEM_TRAIT_FLAG_QUICK);
		ItemModule::use_item(fighter.module_accessor, false, *FIGHTER_HAVE_ITEM_WORK_TEMPORARY);
		ItemModule::pickup_item(fighter.module_accessor, *ITEM_SIZE_LIGHT);
	}
	wait(false, 1);
	if is_excute(fighter) {
		ItemModule::pickup_item(fighter.module_accessor, *ITEM_SIZE_LIGHT, *FIGHTER_HAVE_ITEM_WORK_TEMPORARY, *ITEM_TRAIT_FLAG_QUICK);
		ItemModule::use_item(fighter.module_accessor, false, *FIGHTER_HAVE_ITEM_WORK_TEMPORARY);
		ItemModule::pickup_item(fighter.module_accessor, *ITEM_SIZE_LIGHT);
	}
	wait(false, 1);
	if is_excute(fighter) {
		ItemModule::pickup_item(fighter.module_accessor, *ITEM_SIZE_LIGHT, *FIGHTER_HAVE_ITEM_WORK_TEMPORARY, *ITEM_TRAIT_FLAG_QUICK);
		ItemModule::use_item(fighter.module_accessor, false, *FIGHTER_HAVE_ITEM_WORK_TEMPORARY);
		ItemModule::pickup_item(fighter.module_accessor, *ITEM_SIZE_LIGHT);
	}
	wait(false, 1);
	if is_excute(fighter) {
		ItemModule::pickup_item(fighter.module_accessor, *ITEM_SIZE_LIGHT, *FIGHTER_HAVE_ITEM_WORK_TEMPORARY, *ITEM_TRAIT_FLAG_QUICK);
		ItemModule::use_item(fighter.module_accessor, false, *FIGHTER_HAVE_ITEM_WORK_TEMPORARY);
		ItemModule::pickup_item(fighter.module_accessor, *ITEM_SIZE_LIGHT);
	}
	wait(false, 1);
	if is_excute(fighter) {
		ItemModule::pickup_item(fighter.module_accessor, *ITEM_SIZE_LIGHT, *FIGHTER_HAVE_ITEM_WORK_TEMPORARY, *ITEM_TRAIT_FLAG_QUICK);
		ItemModule::use_item(fighter.module_accessor, false, *FIGHTER_HAVE_ITEM_WORK_TEMPORARY);
		ItemModule::pickup_item(fighter.module_accessor, *ITEM_SIZE_LIGHT);
	}
	wait(false, 1);
	if is_excute(fighter) {
		ItemModule::pickup_item(fighter.module_accessor, *ITEM_SIZE_LIGHT, *FIGHTER_HAVE_ITEM_WORK_TEMPORARY, *ITEM_TRAIT_FLAG_QUICK);
		ItemModule::use_item(fighter.module_accessor, false, *FIGHTER_HAVE_ITEM_WORK_TEMPORARY);
		ItemModule::pickup_item(fighter.module_accessor, *ITEM_SIZE_LIGHT);
	}
	wait(false, 1);
	if is_excute(fighter) {
		ItemModule::pickup_item(fighter.module_accessor, *ITEM_SIZE_LIGHT, *FIGHTER_HAVE_ITEM_WORK_TEMPORARY, *ITEM_TRAIT_FLAG_QUICK);
		ItemModule::use_item(fighter.module_accessor, false, *FIGHTER_HAVE_ITEM_WORK_TEMPORARY);
		ItemModule::pickup_item(fighter.module_accessor, *ITEM_SIZE_LIGHT);
	}
	wait(false, 1);
	if is_excute(fighter) {
		ItemModule::pickup_item(fighter.module_accessor, *ITEM_SIZE_LIGHT, *FIGHTER_HAVE_ITEM_WORK_TEMPORARY, *ITEM_TRAIT_FLAG_QUICK);
		ItemModule::use_item(fighter.module_accessor, false, *FIGHTER_HAVE_ITEM_WORK_TEMPORARY);
		ItemModule::pickup_item(fighter.module_accessor, *ITEM_SIZE_LIGHT);
	}
	wait(false, 1);
	if is_excute(fighter) {
		WorkModule::off_flag(fighter.module_accessor, /*Flag*/ *FIGHTER_ROSETTA_STATUS_SPECIAL_LW_FLAG_ENABLE_SEARCH);
	}
	if is_excute(fighter) {
		ItemModule::pickup_item(fighter.module_accessor, *ITEM_SIZE_LIGHT, *FIGHTER_HAVE_ITEM_WORK_TEMPORARY, *ITEM_TRAIT_FLAG_QUICK);
		ItemModule::use_item(fighter.module_accessor, false, *FIGHTER_HAVE_ITEM_WORK_TEMPORARY);
		ItemModule::pickup_item(fighter.module_accessor, *ITEM_SIZE_LIGHT);
	}
	wait(false, 1);
}