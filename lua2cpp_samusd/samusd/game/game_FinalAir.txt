#[acmd_script( agent = "samusd", script = "game_finalair" , category = ACMD_GAME , low_priority)]
unsafe fn game_finalair (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	IS_EXIST_ARTICLE(fighter, FIGHTER_SAMUSD_GENERATE_ARTICLE_LASER2);
	if(0x112510(false, false)){;
		if is_excute(fighter) {
			ArticleModule::shoot(fighter.module_accessor, *FIGHTER_SAMUSD_GENERATE_ARTICLE_LASER, *ARTICLE_OPE_TARGET_ALL, false);
			WorkModule::set_float(fighter.module_accessor, 14, *FIGHTER_SAMUS_STATUS_FINAL_WORK_FLOAT_OY);
			ArticleModule::generate_article(fighter.module_accessor, FIGHTER_SAMUSD_GENERATE_ARTICLE_LASER2);
			WorkModule::set_float(fighter.module_accessor, -14, *FIGHTER_SAMUS_STATUS_FINAL_WORK_FLOAT_OY);
			ArticleModule::generate_article(fighter.module_accessor, FIGHTER_SAMUSD_GENERATE_ARTICLE_LASER2);
			ArticleModule::shoot(fighter.module_accessor, FIGHTER_SAMUSD_GENERATE_ARTICLE_LASER2, *ARTICLE_OPE_TARGET_ALL, false);
		}
	}
	if is_excute(fighter) {
		ATTACK(fighter, 0, 0, Hash40::new("top"), 1.0, 20, 100, 22, 0, 13.0, 0.0, 15.0, 20.0, None, None, None, 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, Hash40::new("no"), 0.0, 8, false, false, false, false, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_BOMB, *ATTACK_REGION_NONE);
	}
	frame(lua_state, 8.0);
	if is_excute(fighter) {
		AttackModule::clear_all(fighter.module_accessor);
		ATTACK(fighter, 0, 0, Hash40::new("top"), 2.0, 20, 100, 22, 0, 15.0, 0.0, 15.0, 20.0, None, None, None, 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, Hash40::new("no"), 0.0, 8, false, false, false, false, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_BOMB, *ATTACK_REGION_NONE);
	}
	frame(lua_state, 12.0);
	if is_excute(fighter) {
		AttackModule::clear_all(fighter.module_accessor);
	}
}