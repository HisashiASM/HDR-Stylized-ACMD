#[acmd_script( agent = "toonlink", script = "expression_attackairlw" , category = ACMD_EXPRESSION , low_priority)]
unsafe fn expression_attackairlw (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("sword1"), *ATTACK_DIRECTION_X_MINUS, *ATTACK_DIRECTION_Y_MINUS, *ATTACK_DIRECTION_Z_MINUS);
		AttackModule::set_attack_reference_joint_id(fighter.module_accessor);
	}
	frame(lua_state, 6.0);
	if is_excute(fighter) {
		VisibilityModule::set_int64(fighter.module_accessor, Hash40::new("shield"), Hash40::new("shield_back"));
		ItemModule::set_have_item_visibility(fighter.module_accessor, false);
	}
	frame(lua_state, 16.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohitm"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 17.0);
	if is_excute(fighter) {
		RUMBLE_HIT(fighter, Hash40::new("rbkind_pierces"), 0);
	}
	frame(lua_state, 80.0);
	if is_excute(fighter) {
		VisibilityModule::set_int64(fighter.module_accessor, Hash40::new("shield"), Hash40::new("shield_normal"));
		ItemModule::set_have_item_visibility(fighter.module_accessor, true);
	}
}