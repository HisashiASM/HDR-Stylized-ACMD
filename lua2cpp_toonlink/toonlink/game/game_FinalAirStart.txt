#[acmd_script( agent = "toonlink", script = "game_finalairstart" , category = ACMD_GAME , low_priority)]
unsafe fn game_finalairstart (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	if is_excute(fighter) {
		ATTACK_ABS(fighter, *FIGHTER_ATTACK_ABSOLUTE_KIND_CATCH, 0, 30.0, 361, 90, 0, 30, 0.0, 1.0, *ATTACK_LR_CHECK_F, 0.0, true, Hash40::new("collision_attr_cutup"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_CUTUP, *ATTACK_REGION_THROW);
		CHECK_VALID_FINAL_START_CAMERA(fighter, 0, 7, 20, 0, 0, 0);
		SLOW_OPPONENT(fighter, 8, 34);
	}
	frame(lua_state, 1.0);
	WorkModule::is_flag(fighter.module_accessor, *FIGHTER_INSTANCE_WORK_ID_FLAG_DISABLE_FINAL_START_CAMERA);
	if(0x120e80(false, false)){;
		frame(lua_state, 5.0);
		if is_excute(fighter) {
			FT_SET_FINAL_FEAR_FACE(fighter, 60);
		}
	}
	get_value_float(*SO_VAR_FLOAT_LR);
	if(0x120e80(1556888, 0)){;
		if is_excute(fighter) {
			REQ_FINAL_START_CAMERA_arg3(Hash40::new("d04finalstart02.nuanmb"), false, false);
		}
		else{;
		if is_excute(fighter) {
			PostureModule::scale(fighter.module_accessor, 3, 0);
			0x120e80(-996042881, 2.1);
			CAM_ZOOM_IN_arg5(0, 0);
			FT_START_CUTIN(fighter);
		}
		frame(lua_state, 13.0);
		if is_excute(fighter) {
			ATTACK(fighter, 0, 0, Hash40::new("top"), 1.0, 22, 100, 50, 0, 8.0, 0.0, 6.0, 13.0, None, None, None, 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, Hash40::new("no"), 0.0, 0, false, false, false, false, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_paralyze"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_FIRE, *ATTACK_REGION_NONE);
			ATTACK(fighter, 1, 0, Hash40::new("top"), 1.0, 22, 100, 50, 0, 6.0, 0.0, 6.0, 9.0, None, None, None, 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, Hash40::new("no"), 0.0, 0, false, false, false, false, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_paralyze"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_FIRE, *ATTACK_REGION_NONE);
			AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
		}
		frame(lua_state, 15.0);
		if is_excute(fighter) {
			AttackModule::clear_all(fighter.module_accessor);
		}
		frame(lua_state, 22.0);
		if is_excute(fighter) {
			CAM_ZOOM_OUT(fighter);
		}
		else{;
		if is_excute(fighter) {
			REQ_FINAL_START_CAMERA_arg3(Hash40::new("d04finalstart.nuanmb"), false, false);
		}
		if is_excute(fighter) {
			FT_START_CUTIN(fighter);
		}
		frame(lua_state, 13.0);
		if is_excute(fighter) {
			ATTACK(fighter, 0, 0, Hash40::new("top"), 1.0, 22, 100, 50, 0, 8.0, 0.0, 6.0, 13.0, None, None, None, 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, Hash40::new("no"), 0.0, 0, false, false, false, false, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_paralyze"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_FIRE, *ATTACK_REGION_NONE);
			ATTACK(fighter, 1, 0, Hash40::new("top"), 1.0, 22, 100, 50, 0, 6.0, 0.0, 6.0, 9.0, None, None, None, 0.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, Hash40::new("no"), 0.0, 0, false, false, false, false, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_paralyze"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_FIRE, *ATTACK_REGION_NONE);
			AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
		}
		frame(lua_state, 15.0);
		if is_excute(fighter) {
			AttackModule::clear_all(fighter.module_accessor);
		}
		frame(lua_state, 34.0);
		if is_excute(fighter) {
			SlowModule::set_whole(fighter.module_accessor, 10, 0);
		}
		frame(lua_state, 35.0);
		if is_excute(fighter) {
			SlowModule::clear_whole(fighter.module_accessor);
		}
	}
}
}
frame(lua_state, 35.0);
if is_excute(fighter) {
WorkModule::on_flag(fighter.module_accessor, /*Flag*/ *FIGHTER_LINK_STATUS_WORK_ID_FLAG_FINAL_REQ_CATCH);
}
frame(lua_state, 38.0);
if is_excute(fighter) {
grab(*MA_MSC_CMD_GRAB_CLEAR_ALL);
search(*MA_MSC_CMD_SEARCH_SEARCH_SCH_CLR_ALL);
}
frame(lua_state, 40.0);
if is_excute(fighter) {
SlowModule::clear_whole(fighter.module_accessor);
}
frame(0, 55);
FT_MOTION_RATE(fighter, 0.5);
}