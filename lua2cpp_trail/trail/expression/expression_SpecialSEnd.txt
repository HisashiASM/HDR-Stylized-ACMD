#[acmd_script( agent = "trail", script = "expression_specialsend" , category = ACMD_EXPRESSION , low_priority)]
unsafe fn expression_specialsend (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	if is_excute(fighter) {
		slope(*MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_LR, 3);
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_landl"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
		ItemModule::set_have_item_visibility(fighter.module_accessor, false);
	}
	frame(lua_state, 2.0);
	for(18 Iterations){;
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_81_specials_land"), 0, true);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	wait(lua_state, 2.0);
}
frame(lua_state, 40.0);
ItemModule::is_have_item(fighter.module_accessor, 0);
if(0x4ae890(false, true)){;
	if is_excute(fighter) {
		FT_MOTION_INTP_WAIT_ITEM(fighter, true, 0.13);
	}
}
frame(lua_state, 43.0);
if is_excute(fighter) {
	FT_MOTION_INTP_WAIT_ITEM(fighter, true, 0.1);
}
frame(lua_state, 48.0);
if is_excute(fighter) {
	ItemModule::set_have_item_visibility(fighter.module_accessor, true);
}
frame(lua_state, 53.0);
if is_excute(fighter) {
	FT_MOTION_INTP_WAIT_ITEM(fighter, true, 0);
}
if is_excute(fighter) {
	methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_81_landingairlwlight"), 0, false);
	ControlModule::set_rumble(fighter.module_accessor);
}
wait(lua_state, 2.0);
}