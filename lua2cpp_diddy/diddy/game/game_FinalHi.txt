#[acmd_script( agent = "diddy", script = "game_finalhi" , category = ACMD_GAME , low_priority)]
unsafe fn game_finalhi (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	PostureModule::scale(fighter.module_accessor);
	if(0x148390(95671436, 1.4)){;
		if is_excute(fighter) {
			ATTACK(fighter, 0, 0, Hash40::new("rot"), 2.0, 130, 60, 0, 45, 10.0, 0.0, 7.0, 0.0, Some(0.0), Some(-10.0), Some(0.0), 0.5, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_SPEED, false, Hash40::new("no"), 0.0, 0, false, false, false, false, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_fire"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_FIRE, *ATTACK_REGION_NONE);
			AttackModule::set_force_reaction(fighter.module_accessor, 0, true, false);
		}
		else{;
		PostureModule::scale(fighter.module_accessor);
		if(0x148390(95671436, 0.5)){;
			if is_excute(fighter) {
				ATTACK(fighter, 0, 0, Hash40::new("rot"), 2.0, 130, 60, 0, 45, 10.0, 0.0, 7.0, 0.0, Some(0.0), Some(-30.0), Some(0.0), 0.5, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_SPEED, false, Hash40::new("no"), 0.0, 0, false, false, false, false, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_fire"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_FIRE, *ATTACK_REGION_NONE);
				AttackModule::set_force_reaction(fighter.module_accessor, 0, true, false);
			}
			else{;
			if is_excute(fighter) {
				ATTACK(fighter, 0, 0, Hash40::new("rot"), 2.0, 130, 60, 0, 45, 10.0, 0.0, 7.0, 0.0, Some(0.0), Some(-10.0), Some(0.0), 0.5, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_SPEED, false, Hash40::new("no"), 0.0, 0, false, false, false, false, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_fire"), *ATTACK_SOUND_LEVEL_M, *COLLISION_SOUND_ATTR_FIRE, *ATTACK_REGION_NONE);
				AttackModule::set_force_reaction(fighter.module_accessor, 0, true, false);
			}
		}
	}
}
}
if is_excute(fighter) {
AttackModule::set_final_finish_cut_in(fighter.module_accessor, 0, true, false, -1, false);
}
}