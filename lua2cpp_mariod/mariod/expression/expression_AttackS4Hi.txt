#[acmd_script( agent = "mariod", script = "expression_attacks4hi" , category = ACMD_EXPRESSION , low_priority)]
unsafe fn expression_attacks4hi (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	if is_excute(fighter) {
		ItemModule::set_have_item_visibility(fighter.module_accessor, false);
		slope(*MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_LR);
	}
	frame(lua_state, 2.0);
	if is_excute(fighter) {
		slope(*MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_R, 3);
	}
	frame(lua_state, 6.0);
	execute(6);
	WorkModule::is_flag(fighter.module_accessor, *FIGHTER_STATUS_ATTACK_FLAG_SMASH_SMASH_HOLD_TO_ATTACK);
	if(0xda370(false, true)){;
		if is_excute(fighter) {
			slope(*MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_R, 3);
			ItemModule::set_have_item_visibility(fighter.module_accessor, false);
		}
	}
	frame(lua_state, 12.0);
	if is_excute(fighter) {
		slope(*MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_LR, 3);
	}
	frame(lua_state, 15.0);
	if is_excute(fighter) {
		RUMBLE_HIT(fighter, Hash40::new("rbkind_attackll"), 0);
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_55_smash"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 40.0);
	if is_excute(fighter) {
		ItemModule::set_have_item_visibility(fighter.module_accessor, true);
	}
}