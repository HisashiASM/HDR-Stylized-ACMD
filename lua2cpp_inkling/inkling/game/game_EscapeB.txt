#[acmd_script( agent = "inkling", script = "game_escapeb" , category = ACMD_GAME , low_priority)]
unsafe fn game_escapeb (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	if is_excute(fighter) {
		WorkModule::on_flag(fighter.module_accessor, /*Flag*/ *FIGHTER_INKLING_INSTANCE_WORK_ID_FLAG_NO_FLIP_SQUID);
	}
	WorkModule::is_flag(fighter.module_accessor, *FIGHTER_INKLING_INSTANCE_WORK_ID_FLAG_EXIST_SQUID);
	if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, false)){;
		if is_excute(fighter) {
			ArticleModule::generate_article(fighter.module_accessor, *FIGHTER_INKLING_GENERATE_ARTICLE_SQUID);
		}
	}
	MotionModule::motion_kind(fighter.module_accessor);
	MotionModule::frame(fighter.module_accessor, 0x00000002b0);
	MotionModule::rate(fighter.module_accessor, -1407754940);
	methodlib::L2CValue::as_hash()const(-1407754940, *FIGHTER_INKLING_GENERATE_ARTICLE_SQUID, false);
	ArticleModule::change_motion(fighter.module_accessor);
	if is_excute(fighter) {
		ArticleModule::set_frame(fighter.module_accessor, *FIGHTER_INKLING_GENERATE_ARTICLE_SQUID);
		ArticleModule::set_rate(fighter.module_accessor, *FIGHTER_INKLING_GENERATE_ARTICLE_SQUID);
		ArticleModule::set_visibility_whole(fighter.module_accessor, *FIGHTER_INKLING_GENERATE_ARTICLE_SQUID, false);
		WorkModule::on_flag(fighter.module_accessor, /*Flag*/ *FIGHTER_INKLING_INSTANCE_WORK_ID_FLAG_EXIST_SQUID);
		StatusModule::status_kind(fighter.module_accessor);
		methodlib::L2CValue::operator==(lib::L2CValueconst&)const(0, *FIGHTER_STATUS_KIND_REBIRTH);
		WorkModule::on_flag(fighter.module_accessor, /*Flag*/ *FIGHTER_INSTANCE_WORK_ID_FLAG_FORCE_LOUPE);
	}
	get_value_float(0, *SO_VAR_FLOAT_LR);
	if(0x13d500(0, 0)){;
		if is_excute(fighter) {
			methodlib::L2CValue::as_hash()const(*FIGHTER_INKLING_GENERATE_ARTICLE_SQUID, Hash40::new("escape_bl"));
			ArticleModule::change_motion(fighter.module_accessor);
			get_value_float(*FIGHTER_INKLING_GENERATE_ARTICLE_SQUID, *SO_VAR_FLOAT_MOTION_RATE);
			SET_RATE_ARTICLE(fighter, 304);
		}
		else{;
		if is_excute(fighter) {
			methodlib::L2CValue::as_hash()const(*FIGHTER_INKLING_GENERATE_ARTICLE_SQUID, Hash40::new("escape_b"));
			ArticleModule::change_motion(fighter.module_accessor);
			get_value_float(*FIGHTER_INKLING_GENERATE_ARTICLE_SQUID, *SO_VAR_FLOAT_MOTION_RATE);
			SET_RATE_ARTICLE(fighter, 432);
		}
	}
}
frame(lua_state, 1.0);
if is_excute(fighter) {
	VisibilityModule::set_whole(fighter.module_accessor, false);
	ArticleModule::set_visibility_whole(fighter.module_accessor, *FIGHTER_INKLING_GENERATE_ARTICLE_SQUID, true);
}
frame(lua_state, 10.0);
if is_excute(fighter) {
	VisibilityModule::set_whole(fighter.module_accessor, true);
}
frame(lua_state, 16.0);
if is_excute(fighter) {
	ArticleModule::set_visibility_whole(fighter.module_accessor, *FIGHTER_INKLING_GENERATE_ARTICLE_SQUID, false);
}
}