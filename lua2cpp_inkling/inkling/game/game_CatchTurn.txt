#[acmd_script( agent = "inkling", script = "game_catchturn" , category = ACMD_GAME , low_priority)]
unsafe fn game_catchturn (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	if is_excute(fighter) {
		WorkModule::on_flag(fighter.module_accessor, /*Flag*/ *FIGHTER_INKLING_INSTANCE_WORK_ID_FLAG_NO_FLIP_SQUID);
	}
	WorkModule::is_flag(fighter.module_accessor, *FIGHTER_INKLING_INSTANCE_WORK_ID_FLAG_EXIST_SQUID);
	if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, false)){;
		if is_excute(fighter) {
			ArticleModule::generate_article(fighter.module_accessor, *FIGHTER_INKLING_GENERATE_ARTICLE_SQUID);
		}
	}
	MotionModule::motion_kind(fighter.module_accessor);
	MotionModule::frame(fighter.module_accessor, 0x00000002b0);
	MotionModule::rate(fighter.module_accessor, -1407754940);
	methodlib::L2CValue::as_hash()const(-1407754940, *FIGHTER_INKLING_GENERATE_ARTICLE_SQUID, false);
	ArticleModule::change_motion(fighter.module_accessor);
	if is_excute(fighter) {
		ArticleModule::set_frame(fighter.module_accessor, *FIGHTER_INKLING_GENERATE_ARTICLE_SQUID);
		ArticleModule::set_rate(fighter.module_accessor, *FIGHTER_INKLING_GENERATE_ARTICLE_SQUID);
		ArticleModule::set_visibility_whole(fighter.module_accessor, *FIGHTER_INKLING_GENERATE_ARTICLE_SQUID, false);
		WorkModule::on_flag(fighter.module_accessor, /*Flag*/ *FIGHTER_INKLING_INSTANCE_WORK_ID_FLAG_EXIST_SQUID);
		StatusModule::status_kind(fighter.module_accessor);
		methodlib::L2CValue::operator==(lib::L2CValueconst&)const(0, *FIGHTER_STATUS_KIND_REBIRTH);
		WorkModule::on_flag(fighter.module_accessor, /*Flag*/ *FIGHTER_INSTANCE_WORK_ID_FLAG_FORCE_LOUPE);
	}
	get_value_float(0, *SO_VAR_FLOAT_LR);
	if(0x13d500(0, 0)){;
		if is_excute(fighter) {
			methodlib::L2CValue::as_hash()const(*FIGHTER_INKLING_GENERATE_ARTICLE_SQUID, Hash40::new("catch_turn_l"));
			ArticleModule::change_motion(fighter.module_accessor);
		}
		else{;
		if is_excute(fighter) {
			methodlib::L2CValue::as_hash()const(*FIGHTER_INKLING_GENERATE_ARTICLE_SQUID, Hash40::new("catch_turn"));
			ArticleModule::change_motion(fighter.module_accessor);
		}
	}
}
frame(lua_state, 1.0);
if is_excute(fighter) {
	VisibilityModule::set_whole(fighter.module_accessor, true);
	ArticleModule::set_visibility_whole(fighter.module_accessor, *FIGHTER_INKLING_GENERATE_ARTICLE_SQUID, true);
}
frame(lua_state, 9.0);
if is_excute(fighter) {
	ArticleModule::set_visibility_whole(fighter.module_accessor, *FIGHTER_INKLING_GENERATE_ARTICLE_SQUID, false);
	GrabModule::set_rebound(fighter.module_accessor, /*CanCatchRebound*/ true);
}
frame(lua_state, 10.0);
if is_excute(fighter) {
	CATCH(fighter, 0, Hash40::new("top"), 3.3, 0.0, 6.6, -4.0, Some(0.0), Some(6.6), Some(-14.7), *FIGHTER_STATUS_KIND_CAPTURE_PULLED, *COLLISION_SITUATION_MASK_G);
	CATCH(fighter, 1, Hash40::new("top"), 1.65, 0.0, 6.6, -2.35, Some(0.0), Some(6.6), Some(-16.35), *FIGHTER_STATUS_KIND_CAPTURE_PULLED, *COLLISION_SITUATION_MASK_A);
}
methodlua2cpp::L2CFighterAnimcmdGameCommon::game_CaptureCutCommon()();
wait(lua_state, 2.0);
if is_excute(fighter) {
	grab(*MA_MSC_CMD_GRAB_CLEAR_ALL);
	WorkModule::on_flag(fighter.module_accessor, /*Flag*/ *FIGHTER_STATUS_CATCH_FLAG_CATCH_WAIT);
	GrabModule::set_rebound(fighter.module_accessor, /*CanCatchRebound*/ false);
}
}