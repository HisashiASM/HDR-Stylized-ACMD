#[acmd_script( agent = "inkling", script = "expression_attack100" , category = ACMD_EXPRESSION , low_priority)]
unsafe fn expression_attack100 (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	wait_loop_sync_mot();
	if is_excute(fighter) {
		slope(*MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_LR);
	}
	WorkModule::is_flag(fighter.module_accessor, *FIGHTER_INKLING_INSTANCE_WORK_ID_FLAG_INK_SUCCESS);
	if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, true)){;
		if is_excute(fighter) {
			methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_erase"), 0, false);
			ControlModule::set_rumble(fighter.module_accessor);
		}
	}
	frame(lua_state, 1.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_elecattack"), 0, true);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	else{;
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_erase"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
}
frame(lua_state, 1.0);
if is_excute(fighter) {
	methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohits"), 3, false);
	ControlModule::set_rumble(fighter.module_accessor);
}
frame(lua_state, 5.0);
if is_excute(fighter) {
	methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohits"), 3, false);
	ControlModule::set_rumble(fighter.module_accessor);
}
frame(lua_state, 9.0);
if is_excute(fighter) {
	methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohits"), 3, false);
	ControlModule::set_rumble(fighter.module_accessor);
}
frame(lua_state, 13.0);
methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohits"), 3, false);
ControlModule::set_rumble(fighter.module_accessor);
}