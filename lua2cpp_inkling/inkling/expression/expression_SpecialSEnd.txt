#[acmd_script( agent = "inkling", script = "expression_specialsend" , category = ACMD_EXPRESSION , low_priority)]
unsafe fn expression_specialsend (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	if is_excute(fighter) {
		slope(*MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_LR, 3);
		ItemModule::set_have_item_visibility(fighter.module_accessor, false);
		battle_object();
		methodlib::L2CValue::L2CValue(void*)();
	}
	else{;
	methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
}
methodlib::L2CValue::as_pointer()const(Hash40::new("top"), -4.5, 0, 13, 5, 0.7, 10);
methodlib::L2CValue::as_hash()const();
request_paint();
frame(0, 1, 2, 3, 4, 3);
if is_excute(fighter) {
	battle_object();
	methodlib::L2CValue::L2CValue(void*)();
}
else{;
methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
}
methodlib::L2CValue::as_pointer()const(Hash40::new("top"), -4.5, 0, 15, 4, 0.5, 10);
methodlib::L2CValue::as_hash()const();
request_paint();
methodlib::L2CValue::as_hash()const(0, 1, 2, 3, 4, Hash40::new("rbkind_nohitm"), 0, false);
ControlModule::set_rumble(fighter.module_accessor);
frame(lua_state, 4.0);
if is_excute(fighter) {
battle_object();
methodlib::L2CValue::L2CValue(void*)();
}
else{;
methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
}
methodlib::L2CValue::as_pointer()const(Hash40::new("top"), -4.5, 0, 17, 3, 0.35, 10);
methodlib::L2CValue::as_hash()const();
request_paint();
frame(0, 1, 2, 3, 4, 5);
if is_excute(fighter) {
battle_object();
methodlib::L2CValue::L2CValue(void*)();
}
else{;
methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
}
methodlib::L2CValue::as_pointer()const(Hash40::new("top"), -4, 0, 19, 2, 0.25, 10);
methodlib::L2CValue::as_hash()const();
request_paint();
frame(0, 1, 2, 3, 4, 6);
if is_excute(fighter) {
battle_object();
methodlib::L2CValue::L2CValue(void*)();
}
else{;
methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
}
methodlib::L2CValue::as_pointer()const(Hash40::new("top"), -3.5, 0, 20, 1, 0.2, 10);
methodlib::L2CValue::as_hash()const();
request_paint();
frame(0, 1, 2, 3, 4, 7);
if is_excute(fighter) {
battle_object();
methodlib::L2CValue::L2CValue(void*)();
}
else{;
methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
}
methodlib::L2CValue::as_pointer()const(Hash40::new("top"), -3, 0, 21.5, 0.35, 0.2, 10);
methodlib::L2CValue::as_hash()const();
request_paint();
frame(0, 1, 2, 3, 4, 8);
if is_excute(fighter) {
battle_object();
methodlib::L2CValue::L2CValue(void*)();
}
else{;
methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
}
methodlib::L2CValue::as_pointer()const(Hash40::new("top"), -3, 0, 22, 0.1, 0.2, 10);
methodlib::L2CValue::as_hash()const();
request_paint();
frame(0, 1, 2, 3, 4, 17);
if is_excute(fighter) {
methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_grapple"), 3, false);
ControlModule::set_rumble(fighter.module_accessor);
}
}