#[acmd_script( agent = "inkling", script = "expression_specialsstart" , category = ACMD_EXPRESSION , low_priority)]
unsafe fn expression_specialsstart (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	if is_excute(fighter) {
		slope(*MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_LR, 3);
		ItemModule::set_have_item_visibility(fighter.module_accessor, false);
	}
	frame(lua_state, 2.0);
	if is_excute(fighter) {
		battle_object();
		methodlib::L2CValue::L2CValue(void*)();
	}
	else{;
	methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
}
methodlib::L2CValue::as_pointer()const(Hash40::new("top"), -3, 0, -3, 0.5, 2, 5);
methodlib::L2CValue::as_hash()const();
request_paint();
frame(0, 1, 2, 3, 4, 4);
if is_excute(fighter) {
	battle_object();
	methodlib::L2CValue::L2CValue(void*)();
}
else{;
methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
}
methodlib::L2CValue::as_pointer()const(Hash40::new("top"), -6, 0, -1.5, 0.8, 1.2, 5);
methodlib::L2CValue::as_hash()const();
request_paint();
frame(0, 1, 2, 3, 4, 8);
if is_excute(fighter) {
battle_object();
methodlib::L2CValue::L2CValue(void*)();
}
else{;
methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
}
methodlib::L2CValue::as_pointer()const(Hash40::new("top"), -4, 0, 0, 3.9, 1.5, 5);
methodlib::L2CValue::as_hash()const();
request_paint();
frame(0, 1, 2, 3, 4, 9);
if is_excute(fighter) {
battle_object();
methodlib::L2CValue::L2CValue(void*)();
}
else{;
methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
}
methodlib::L2CValue::as_pointer()const(Hash40::new("top"), -3.5, 0, 2, 4.2, 1.2, 5);
methodlib::L2CValue::as_hash()const();
request_paint();
frame(0, 1, 2, 3, 4, 10);
if is_excute(fighter) {
battle_object();
methodlib::L2CValue::L2CValue(void*)();
}
else{;
methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
}
methodlib::L2CValue::as_pointer()const(Hash40::new("top"), -3, 0, 2.5, 4.5, 1, 5);
methodlib::L2CValue::as_hash()const();
request_paint();
frame(0, 1, 2, 3, 4, 11);
if is_excute(fighter) {
battle_object();
methodlib::L2CValue::L2CValue(void*)();
}
else{;
methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
}
methodlib::L2CValue::as_pointer()const(Hash40::new("top"), -2.5, 0, 3.5, 4.8, 0.8, 5);
methodlib::L2CValue::as_hash()const();
request_paint();
}