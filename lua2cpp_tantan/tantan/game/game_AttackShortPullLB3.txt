#[acmd_script( agent = "tantan", script = "game_attackshortpulllb3" , category = ACMD_GAME , low_priority)]
unsafe fn game_attackshortpulllb3 (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	WorkModule::is_flag(fighter.module_accessor, *FIGHTER_TANTAN_INSTANCE_WORK_ID_FLAG_ATTACK_BLOCKED_PUNCH_L);
	if(0x3a02e0(false, true)){;
		WorkModule::is_flag(fighter.module_accessor, *FIGHTER_TANTAN_INSTANCE_WORK_ID_FLAG_DRAGONIZE_L);
		if(0x3a02e0(false, true)){;
			WorkModule::is_flag(fighter.module_accessor, *FIGHTER_TANTAN_INSTANCE_WORK_ID_FLAG_ATTACK_REINFORCE_L);
			if(0x3a02e0(false, true)){;
				frame(lua_state, 1.0);
				if is_excute(fighter) {
					ATTACK(fighter, 0, 0, Hash40::new("arml"), 15.0, 361, 75, 0, 40, 5.5, 4.0, 2.0, 0.0, None, None, None, 1.0, 1.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_POS, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_LL, COLLISION_SOUND_ATTR_TANTAN_PUNCH01, *ATTACK_REGION_PUNCH);
					AttackModule::set_damage_shake_scale(fighter.module_accessor, 0.5);
					methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_76_dragonarm"), 9, false);
					ControlModule::set_rumble(fighter.module_accessor);
				}
				frame(lua_state, 2.0);
				methodlib::L2CValue::operatorbool()const(is_excute);
			}
			else{;
			WorkModule::is_flag(fighter.module_accessor, *LUA_SCRIPT_LINE_MAX);
			if(0x3a02e0(false, true)){;
				frame(lua_state, 1.0);
				if is_excute(fighter) {
					ATTACK(fighter, 0, 0, Hash40::new("arml"), 13.8, 361, 75, 0, 40, 5.5, 4.0, 2.0, 0.0, None, None, None, 1.0, 1.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_POS, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_LL, COLLISION_SOUND_ATTR_TANTAN_PUNCH01, *ATTACK_REGION_PUNCH);
					AttackModule::set_damage_shake_scale(fighter.module_accessor, 0.5);
					methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_76_dragonarm"), 9, false);
					ControlModule::set_rumble(fighter.module_accessor);
				}
				frame(lua_state, 2.0);
				methodlib::L2CValue::operatorbool()const(is_excute);
			}
			else{;
			frame(lua_state, 1.0);
			if is_excute(fighter) {
				ATTACK(fighter, 0, 0, Hash40::new("arml"), 8.0, 361, 90, 0, 50, 5.5, 4.0, 2.0, 0.0, None, None, None, 1.0, 1.0, *ATTACK_SETOFF_KIND_ON, *ATTACK_LR_CHECK_POS, false, 0, 0.0, 0, false, false, false, false, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, COLLISION_SOUND_ATTR_TANTAN_PUNCH01, *ATTACK_REGION_PUNCH);
				AttackModule::set_damage_shake_scale(fighter.module_accessor, 0.5);
				methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_76_dragonarm"), 9, false);
				ControlModule::set_rumble(fighter.module_accessor);
			}
			frame(lua_state, 2.0);
			methodlib::L2CValue::operatorbool()const(is_excute);
		}
	}
}
AttackModule::clear_all(fighter.module_accessor);
}
}
}