#[acmd_script( agent = "snake_c4", script = "game_explosion" , category = ACMD_GAME , low_priority)]
unsafe fn game_explosion (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	if is_excute(fighter) {
		ATTACK(fighter, 0, 0, Hash40::new("rot"), 17.0, 80, 90, 0, 40, 3.0, 0.0, 0.0, 0.0, None, None, None, 1.0, 1.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_POS, false, 0, 0.0, 0, false, true, false, false, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, true, Hash40::new("collision_attr_fire"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_BOMB, *ATTACK_REGION_BOMB);
		VisibilityModule::set_whole(fighter.module_accessor, false);
		QUAKE(fighter, *CAMERA_QUAKE_KIND_M);
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_erase"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 1.0);
	if is_excute(fighter) {
		AttackModule::set_size(fighter.module_accessor, /*ID*/ 0, /*Size*/ 17);
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_explosion"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 2.0);
	WorkModule::is_flag(fighter.module_accessor, WEAPON_SNAKE_C4*_INSTANCE_WORK_ID_FLAG_GROUND);
	if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, false)){;
		if is_excute(fighter) {
			AttackModule::clear_all(fighter.module_accessor);
		}
	}
	frame(lua_state, 3.0);
	WorkModule::is_flag(fighter.module_accessor, WEAPON_SNAKE_C4*_INSTANCE_WORK_ID_FLAG_GROUND);
	if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, true)){;
		if is_excute(fighter) {
			AttackModule::clear_all(fighter.module_accessor);
		}
	}
}