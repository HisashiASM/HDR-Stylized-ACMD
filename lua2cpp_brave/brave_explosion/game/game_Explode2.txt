#[acmd_script( agent = "brave_explosion", script = "game_explode2" , category = ACMD_GAME , low_priority)]
unsafe fn game_explode2 (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	if is_excute(fighter) {
		AttackModule::disable_tip(fighter.module_accessor);
	}
	frame(lua_state, 1.0);
	if is_excute(fighter) {
		ATTACK(fighter, 2, 0, Hash40::new("top"), 0.0, 366, 100, 100, 0, 35.0, 0.0, 0.0, 0.0, Some(0.0), Some(0.0), Some(0.5), 0.0, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, true, 0, 0.0, 1, false, false, true, true, false, *COLLISION_SITUATION_MASK_G, *COLLISION_CATEGORY_MASK_FIGHTER, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_NONE);
		ATTACK(fighter, 3, 0, Hash40::new("top"), 0.0, 366, 100, 50, 0, 35.0, 0.0, 0.0, 0.0, Some(0.0), Some(0.0), Some(0.5), 0.0, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, true, 0, 0.0, 1, false, false, true, true, false, *COLLISION_SITUATION_MASK_A, *COLLISION_CATEGORY_MASK_FIGHTER, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_S, *COLLISION_SOUND_ATTR_NONE, *ATTACK_REGION_NONE);
		AREA_WIND_2ND_RAD(0, 0.5, 0.01, 1000, 1, 0, 0, 40);
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_elecattacks"), 14, true);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 16.0);
	if is_excute(fighter) {
		AttackModule::clear(fighter.module_accessor, /*ID*/ 2);
		AttackModule::clear(fighter.module_accessor, /*ID*/ 3);
		QUAKE(fighter, *CAMERA_QUAKE_KIND_L);
		ATTACK(fighter, 0, 0, Hash40::new("top"), 26.0, 65, 50, 0, 80, 13.0, 0.0, 0.0, 0.0, Some(0.0), Some(0.0), Some(0.5), 1.0, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, -13, 0.0, 0, true, true, false, false, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_fire"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_BOMB, *ATTACK_REGION_MAGIC);
		ATTACK(fighter, 1, 0, Hash40::new("top"), 21.0, 60, 50, 0, 80, 18.0, 0.0, 0.0, 0.0, Some(0.0), Some(0.0), Some(0.5), 1.0, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_F, false, -10, 0.0, 0, true, true, false, false, false, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_ALL, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_fire"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_BOMB, *ATTACK_REGION_MAGIC);
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_explosionl"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 19.0);
	if is_excute(fighter) {
		AttackModule::set_size(fighter.module_accessor, /*ID*/ 0, /*Size*/ 18);
		AttackModule::set_size(fighter.module_accessor, /*ID*/ 1, /*Size*/ 23);
	}
	frame(lua_state, 28.0);
	if is_excute(fighter) {
		AttackModule::set_size(fighter.module_accessor, /*ID*/ 0, /*Size*/ 23);
		AttackModule::set_size(fighter.module_accessor, /*ID*/ 1, /*Size*/ 28);
		AREA_WIND_2ND_RAD(0, 1, 0.1, 1000, 1, 0, 0, 40);
	}
	frame(lua_state, 40.0);
	if is_excute(fighter) {
		AttackModule::clear_all(fighter.module_accessor);
	}
}