#[acmd_script( agent = "ness", script = "expression_attacklw4" , category = ACMD_EXPRESSION , low_priority)]
unsafe fn expression_attacklw4 (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	if is_excute(fighter) {
		slope(*MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_TOP, 6);
		ItemModule::set_have_item_visibility(fighter.module_accessor, false);
	}
	frame(lua_state, 12.0);
	execute(12);
	WorkModule::is_flag(fighter.module_accessor, *FIGHTER_STATUS_ATTACK_FLAG_SMASH_SMASH_HOLD_TO_ATTACK);
	if(0xfdab0(false, true)){;
		if is_excute(fighter) {
			slope(*MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_TOP);
			methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohits"), 6, false);
			ControlModule::set_rumble(fighter.module_accessor);
			RUMBLE_HIT(fighter, Hash40::new("rbkind_attacks"), 0);
		}
	}
	if is_excute(fighter) {
		ItemModule::set_have_item_visibility(fighter.module_accessor, false);
	}
	frame(lua_state, 17.0);
	if is_excute(fighter) {
		RUMBLE_HIT(fighter, Hash40::new("rbkind_attackl"), 0);
	}
	frame(lua_state, 21.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohitm"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 23.0);
	if is_excute(fighter) {
		RUMBLE_HIT(fighter, Hash40::new("rbkind_attacks"), 0);
	}
	frame(lua_state, 31.0);
	if is_excute(fighter) {
		RUMBLE_HIT(fighter, Hash40::new("rbkind_attackl"), 0);
	}
	frame(lua_state, 42.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_grapple"), 4, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 48.0);
	if is_excute(fighter) {
		slope(*MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_LR, 8);
	}
}