#[acmd_script( agent = "richter_whip", script = "effect_attackairflw" , category = ACMD_EFFECT , low_priority)]
unsafe fn effect_attackairflw (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	frame(lua_state, 14.0);
	if is_excute(fighter) {
		battle_object();
		methodlib::L2CValue::L2CValue(void*)();
	}
	else{;
	methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
}
methodlib::L2CValue::as_pointer()const(true);
set_chain_2_visibility();
frame(lua_state, 15.0);
if is_excute(fighter) {
	EFFECT_FOLLOW(fighter, Hash40::new("richter_whip_straight"), Hash40::new("hookshot7"), -8, 0, 0, 0, -130, -90, 0.8, true);
	EFFECT_FOLLOW(fighter, Hash40::new("richter_whip_light"), Hash40::new("hookshot9"), 0, 0, 0, 0, 0, 0, 1, true);
	LAST_EFFECT_SET_RATE(fighter, 2);
	EFFECT_FOLLOW(fighter, Hash40::new("richter_whip_flash_top"), Hash40::new("hookshot27"), 1, 0, 0, 0, 0, 0, 1, true);
}
frame(lua_state, 16.0);
if is_excute(fighter) {
	EFFECT_OFF_KIND(fighter, Hash40::new("richter_whip_straight"), true, true);
}
frame(lua_state, 18.0);
if is_excute(fighter) {
	battle_object();
	methodlib::L2CValue::L2CValue(void*)();
}
else{;
methodlib::L2CValue::L2CValue(lib::L2CValueconst&)();
}
methodlib::L2CValue::as_pointer()const(false);
set_chain_2_visibility();
}