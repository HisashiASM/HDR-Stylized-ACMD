#[acmd_script( agent = "richter", script = "game_finalairstart" , category = ACMD_GAME , low_priority)]
unsafe fn game_finalairstart (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	if is_excute(fighter) {
		CHECK_VALID_FINAL_START_CAMERA(fighter, 0, 7, 20, 0, 0, 0);
		SLOW_OPPONENT(fighter, 4, 50);
	}
	WorkModule::is_flag(fighter.module_accessor, *FIGHTER_INSTANCE_WORK_ID_FLAG_DISABLE_FINAL_START_CAMERA);
	if(methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, false)){;
		frame(lua_state, 5.0);
		if is_excute(fighter) {
			SlowModule::set_whole(fighter.module_accessor, 2, 0);
			FT_SET_FINAL_FEAR_FACE(fighter, 40);
		}
	}
	get_value_float(*SO_VAR_FLOAT_LR);
	if(0x115660(32, 0)){;
		if is_excute(fighter) {
			REQ_FINAL_START_CAMERA_arg3(Hash40::new("d04finalstart02.nuanmb"), false, false);
		}
		else{;
		if is_excute(fighter) {
			PostureModule::scale(fighter.module_accessor, 5, 0);
			0x115660(-1239919212, 2.1);
			CAM_ZOOM_IN_arg5(0, 0);
		}
		else{;
		if is_excute(fighter) {
			REQ_FINAL_START_CAMERA_arg3(Hash40::new("d04finalstart.nuanmb"), false, false);
		}
		if is_excute(fighter) {
			FT_START_CUTIN(fighter);
		}
	}
}
}
frame(lua_state, 29.0);
if is_excute(fighter) {
SlowModule::clear_whole(fighter.module_accessor);
}
frame(lua_state, 30.0);
if is_excute(fighter) {
ArticleModule::set_visibility_whole(fighter.module_accessor, *FIGHTER_SIMON_GENERATE_ARTICLE_COFFIN, true);
CAM_ZOOM_OUT(fighter);
}
if is_excute(fighter) {
ATTACK(fighter, 0, 0, Hash40::new("top"), 3.0, 80, 100, 80, 0, 22.0, 0.0, 7.0, 30.0, None, None, None, 0.0, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_SPEED, false, Hash40::new("no"), 0.0, 0, false, false, false, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_FIGHTER, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_NONE);
ATTACK(fighter, 1, 0, Hash40::new("top"), 3.0, 80, 100, 80, 0, 10.0, 0.0, 7.0, 15.0, Some(0.0), Some(11.0), Some(15.0), 0.0, 0.0, *ATTACK_SETOFF_KIND_OFF, *ATTACK_LR_CHECK_SPEED, false, Hash40::new("no"), 0.0, 0, false, false, false, true, true, *COLLISION_SITUATION_MASK_GA, *COLLISION_CATEGORY_MASK_FIGHTER, *COLLISION_PART_MASK_ALL, false, Hash40::new("collision_attr_normal"), *ATTACK_SOUND_LEVEL_L, *COLLISION_SOUND_ATTR_PUNCH, *ATTACK_REGION_NONE);
AttackModule::set_no_dead_all(fighter.module_accessor, true, false);
}
wait(lua_state, 15.0);
if is_excute(fighter) {
AttackModule::clear_all(fighter.module_accessor);
}
wait(lua_state, 1.0);
WorkModule::is_flag(fighter.module_accessor, *FIGHTER_SIMON_INSTANCE_WORK_ID_FLAG_FINAL_HIT);
methodlib::L2CValue::operator==(lib::L2CValueconst&)const(false, true);
if is_excute(fighter) {
WorkModule::on_flag(fighter.module_accessor, /*Flag*/ *FIGHTER_SIMON_STATUS_FINAL_WORK_ID_FLAG_START_COFFIN_ROT_Y);
}
}