#[acmd_script( agent = "pichu", script = "expression_walkfast" , category = ACMD_EXPRESSION , low_priority)]
unsafe fn expression_walkfast (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	if is_excute(fighter) {
		slope(*MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_LR, 5);
	}
	frame(lua_state, 3.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(0x11699da2fd, 6, true);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 18.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(0x11699da2fd, 6, true);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 32.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(0x11699da2fd, 6, true);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	wait_loop_sync_mot();
	methodlib::L2CAgent::pop();
	wait_loop_sync_mot();
	if is_excute(fighter) {
		slope(*MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_TOP, 10);
	}
	frame(lua_state, 1.0);
	if is_excute(fighter) {
		slope(*MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_TOP, 10, true);
	}
	frame(lua_state, 3.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(0x11699da2fd, 6, true);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 18.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(0x11699da2fd, 6, true);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 32.0);
	loc.imp._Unwind_Resume();
}