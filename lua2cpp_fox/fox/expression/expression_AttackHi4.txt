#[acmd_script( agent = "fox", script = "expression_attackhi4" , category = ACMD_EXPRESSION , low_priority)]
unsafe fn expression_attackhi4 (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	if is_excute(fighter) {
		slope(*MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_LR);
	}
	frame(lua_state, 3.0);
	execute(3);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("toer"), *ATTACK_DIRECTION_Y_MINUS, *ATTACK_DIRECTION_X, *ATTACK_DIRECTION_Z);
		AttackModule::set_attack_reference_joint_id(fighter.module_accessor);
		slope(*MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_L, 3);
	}
	frame(lua_state, 6.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohitl"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
		slope(*MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_NONE, 2);
	}
	frame(lua_state, 8.0);
	if is_excute(fighter) {
		RUMBLE_HIT(fighter, Hash40::new("rbkind_attackl"), 0);
	}
	frame(lua_state, 22.0);
	if is_excute(fighter) {
		slope(*MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_LR, 3);
	}
	frame(lua_state, 27.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_lands"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
}