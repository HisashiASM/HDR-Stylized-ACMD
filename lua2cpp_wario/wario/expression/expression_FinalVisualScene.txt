#[acmd_script( agent = "wario", script = "expression_finalvisualscene" , category = ACMD_EXPRESSION , low_priority)]
unsafe fn expression_finalvisualscene (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	frame(lua_state, 1.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_erase_sp"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
		RUMBLE_FINAL_TARGET(fighter, Hash40::new("rbkind_erase_sp"), 0);
	}
	frame(lua_state, 18.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohits"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
		RUMBLE_FINAL_TARGET(fighter, Hash40::new("rbkind_nohits"), 0);
	}
	frame(lua_state, 70.0);
	for(6 Iterations){;
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_attacks"), 4, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	wait(lua_state, 6.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_attackm"), 6, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	wait(lua_state, 8.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_beams"), 5, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	wait(lua_state, 7.0);
}
frame(lua_state, 210.0);
if is_excute(fighter) {
	methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_attack_critical"), 0, false);
	ControlModule::set_rumble(fighter.module_accessor);
	RUMBLE_FINAL_TARGET(fighter, Hash40::new("rbkind_attack_critical"), 0);
}
}