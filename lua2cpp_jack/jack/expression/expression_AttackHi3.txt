#[acmd_script( agent = "jack", script = "expression_attackhi3" , category = ACMD_EXPRESSION , low_priority)]
unsafe fn expression_attackhi3 (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("knife"), *ATTACK_DIRECTION_Z, *ATTACK_DIRECTION_Y, *ATTACK_DIRECTION_X);
		AttackModule::set_attack_reference_joint_id(fighter.module_accessor);
		slope(*MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_LR);
	}
	frame(lua_state, 9.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohitm"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 11.0);
	if is_excute(fighter) {
		RUMBLE_HIT(fighter, Hash40::new("rbkind_slashs"), 0);
	}
	frame(lua_state, 14.0);
	if is_excute(fighter) {
		RUMBLE_HIT(fighter, Hash40::new("rbkind_slashss"), 3);
	}
	frame(lua_state, 23.0);
	if is_excute(fighter) {
		RUMBLE_HIT(fighter, Hash40::new("rbkind_slashm"), 0);
	}
	frame(lua_state, 34.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_grapple"), 3, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
}