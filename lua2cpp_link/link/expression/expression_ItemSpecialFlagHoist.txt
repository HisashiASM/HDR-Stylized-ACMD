#[acmd_script( agent = "link", script = "expression_itemspecialflaghoist" , category = ACMD_EXPRESSION , low_priority)]
unsafe fn expression_itemspecialflaghoist (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	if is_excute(fighter) {
		VisibilityModule::set_int64(fighter.module_accessor, Hash40::new("shield"), Hash40::new("shield_back"));
		slope(*MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_LR);
	}
	IS_HAVE_ITEM_KIND(fighter, *ITEM_KIND_SPECIALFLAG);
	if(0x11e440(false, true)){;
		frame(lua_state, 11.0);
		if is_excute(fighter) {
			methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_sp_flag"), 0, true);
			ControlModule::set_rumble(fighter.module_accessor);
		}
	}
	frame(lua_state, 14.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_getbonusl"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	else{;
	IS_HAVE_ITEM_KIND(fighter, *ITEM_KIND_BOMBER);
	if(0x11e440(false, true)){;
		frame(lua_state, 13.0);
		if is_excute(fighter) {
			methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_explosionl"), 0, false);
			ControlModule::set_rumble(fighter.module_accessor);
		}
	}
}
frame(lua_state, 58.0);
if is_excute(fighter) {
	VisibilityModule::set_int64(fighter.module_accessor, Hash40::new("shield"), Hash40::new("shield_normal"));
}
}