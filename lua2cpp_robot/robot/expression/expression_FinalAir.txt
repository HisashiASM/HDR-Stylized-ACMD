#[acmd_script( agent = "robot", script = "expression_finalair" , category = ACMD_EXPRESSION , low_priority)]
unsafe fn expression_finalair (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	if is_excute(fighter) {
		WorkModule::on_flag(fighter.module_accessor, /*Flag*/ *FIGHTER_INSTANCE_WORK_ID_FLAG_BACKSHIELD_INVISIBLE);
		ItemModule::set_have_item_visibility(fighter.module_accessor, false);
		QUAKE(fighter, *CAMERA_QUAKE_KIND_S);
	}
	frame(lua_state, 2.0);
	for(5 Iterations){;
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_beamss"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	wait(lua_state, 11.0);
}
frame(lua_state, 127.0);
for(5 Iterations){;
if is_excute(fighter) {
	methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_beamss"), 0, false);
	ControlModule::set_rumble(fighter.module_accessor);
}
wait(lua_state, 11.0);
}
frame(lua_state, 200.0);
if is_excute(fighter) {
methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_erase_sp"), 0, false);
ControlModule::set_rumble(fighter.module_accessor);
}
frame(lua_state, 201.0);
if is_excute(fighter) {
methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_explosionm"), 10, false);
ControlModule::set_rumble(fighter.module_accessor);
}
frame(lua_state, 212.0);
if is_excute(fighter) {
methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_loopattack"), 0, true);
ControlModule::set_rumble(fighter.module_accessor);
}
}