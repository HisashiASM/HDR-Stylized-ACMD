#[acmd_script( agent = "gekkouga", script = "expression_attackhi4" , category = ACMD_EXPRESSION , low_priority)]
unsafe fn expression_attackhi4 (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	if is_excute(fighter) {
		ItemModule::set_have_item_visibility(fighter.module_accessor, false);
		slope(*MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_LR);
	}
	frame(lua_state, 9.0);
	execute(9);
	if is_excute(fighter) {
		ItemModule::set_have_item_visibility(fighter.module_accessor, false);
		slope(*MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_LR);
	}
	frame(lua_state, 10.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohits"), 5, false);
		ControlModule::set_rumble(fighter.module_accessor);
		slope(*MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_L, 2);
		methodlib::L2CValue::as_hash()const(Hash40::new("haver"), *ATTACK_DIRECTION_Y_MINUS, *ATTACK_DIRECTION_Z_MINUS, *ATTACK_DIRECTION_X);
		AttackModule::set_attack_reference_joint_id(fighter.module_accessor);
	}
	frame(lua_state, 11.0);
	if is_excute(fighter) {
		AREA_WIND_2ND_arg10(0, 1, 80, 300, 0.8, 0, 12, 24, 24, 80);
	}
	frame(lua_state, 12.0);
	if is_excute(fighter) {
		RUMBLE_HIT(fighter, Hash40::new("rbkind_pierces"), 0);
	}
	frame(lua_state, 18.0);
	if is_excute(fighter) {
		AreaModule::erase_wind(fighter.module_accessor, 0);
		slope(*MA_MSC_CMD_SLOPE_SLOPE_INTP, *SLOPE_STATUS_LR, 3);
		RUMBLE_HIT(fighter, Hash40::new("rbkind_slashl"), 0);
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohitl"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 19.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("bust"), *ATTACK_DIRECTION_X, *ATTACK_DIRECTION_Z, *ATTACK_DIRECTION_Y);
		AttackModule::set_attack_reference_joint_id(fighter.module_accessor);
	}
}