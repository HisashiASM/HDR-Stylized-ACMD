#[acmd_script( agent = "younglink", script = "expression_appeallwl" , category = ACMD_EXPRESSION , low_priority)]
unsafe fn expression_appeallwl (fighter: &mut L2CAgentBase) {
	let lua_state = fighter.lua_state_agent;
	let boma = fighter.boma();
	if is_excute(fighter) {
		ItemModule::set_have_item_visibility(fighter.module_accessor, false);
		slope(*MA_MSC_CMD_SLOPE_SLOPE, *SLOPE_STATUS_LR);
		ArticleModule::generate_article(fighter.module_accessor, *FIGHTER_YOUNGLINK_GENERATE_ARTICLE_MILK, true);
		methodlib::L2CValue::as_hash()const(*FIGHTER_YOUNGLINK_GENERATE_ARTICLE_MILK, Hash40::new("appeal_lw_r"));
		ArticleModule::change_motion(fighter.module_accessor);
	}
	frame(lua_state, 3.0);
	if is_excute(fighter) {
		VisibilityModule::set_int64(fighter.module_accessor, Hash40::new("shield"), Hash40::new("shield_back"));
		VisibilityModule::set_int64(fighter.module_accessor, Hash40::new("sword"), Hash40::new("sword_back"));
	}
	frame(lua_state, 42.0);
	if is_excute(fighter) {
		methodlib::L2CValue::as_hash()const(Hash40::new("rbkind_nohits_l"), 0, false);
		ControlModule::set_rumble(fighter.module_accessor);
	}
	frame(lua_state, 95.0);
	if is_excute(fighter) {
		ArticleModule::remove_exist(fighter.module_accessor, *FIGHTER_YOUNGLINK_GENERATE_ARTICLE_MILK);
	}
	frame(lua_state, 98.0);
	if is_excute(fighter) {
		VisibilityModule::set_int64(fighter.module_accessor, Hash40::new("shield"), Hash40::new("shield_normal"));
		VisibilityModule::set_int64(fighter.module_accessor, Hash40::new("sword"), Hash40::new("sword_normal"));
	}
}